<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Reverse Proxy with Nginx on RHEL</title>
      <link href="/p/9365577.html"/>
      <url>/p/9365577.html</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article introducing a method on reverse proxy with Nginx web server on RHEL.</p><h2 id="1-Install-Nginx"><a href="#1-Install-Nginx" class="headerlink" title="1. Install Nginx"></a>1. Install Nginx</h2><p><code>sudo dnf install nginx</code></p><h2 id="2-Edit-Nginx-Config-File"><a href="#2-Edit-Nginx-Config-File" class="headerlink" title="2. Edit Nginx Config File"></a>2. Edit Nginx Config File</h2><h3 id="1-etc-nginx-nginx-conf"><a href="#1-etc-nginx-nginx-conf" class="headerlink" title="(1). /etc/nginx/nginx.conf"></a>(1). <code>/etc/nginx/nginx.conf</code></h3><pre><code>user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123;    worker_connections 1024;&#125;http &#123;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    keepalive_timeout   65;    types_hash_max_size 4096;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;&#125;</code></pre><h3 id="2-Site-Config-in-etc-nginx-conf-d-conf"><a href="#2-Site-Config-in-etc-nginx-conf-d-conf" class="headerlink" title="(2). Site Config in /etc/nginx/conf.d/*.conf"></a>(2). Site Config in <code>/etc/nginx/conf.d/*.conf</code></h3><pre><code>server &#123;    server_name WEB.DOMAIN.com;    location / &#123;        proxy_ssl_server_name on;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_set_header Host $host;        proxy_pass http://$host:$remote_port;    &#125;    listen 443 ssl http2; # DO NOT NEED IF YOU USE NGINX    ssl_certificate path/to/certificate/fullchain.pem; # DO NOT NEED IF YOU USE NGINX    ssl_certificate_key path/to/certificate//privkey.pem; # DO NOT NEED IF YOU USE NGINX&#125;</code></pre><h2 id="3-SSL-with-Let’s-Encrypt"><a href="#3-SSL-with-Let’s-Encrypt" class="headerlink" title="3. SSL with Let’s Encrypt"></a>3. SSL with Let’s Encrypt</h2><h3 id="1-Install-Certbot"><a href="#1-Install-Certbot" class="headerlink" title="(1). Install Certbot"></a>(1). Install Certbot</h3><p><code>sudo dnf install certbot</code></p><h3 id="2-Opt-Install-plugin-for-nginx"><a href="#2-Opt-Install-plugin-for-nginx" class="headerlink" title="(2). (Opt.) Install plugin for nginx"></a>(2). (Opt.) Install plugin for nginx</h3><p><code>sudo dnf install python3-certbot-nginx</code></p><h3 id="3-Opt-Install-plugin-for-dns-cloudflare"><a href="#3-Opt-Install-plugin-for-dns-cloudflare" class="headerlink" title="(3). (Opt.) Install plugin for dns-cloudflare"></a>(3). (Opt.) Install plugin for dns-cloudflare</h3><p><code>sudo dnf install python3-certbot-dns-cloudflare</code></p><h3 id="4-Applying-for-SSL-Certificate"><a href="#4-Applying-for-SSL-Certificate" class="headerlink" title="(4). Applying for SSL Certificate"></a>(4). Applying for SSL Certificate</h3><p>According to steps above, there are many ways to get certificate. We demonstrate 2 ways matchs steps (2) and (3) before.</p><ol><li><p>Sign with Nginx</p><p> <code>sudo certbot --nginx -d domainname.com</code></p><p> In this way, Certificates will be configured in *.conf in folder <code>/etc/nginx/conf.d/</code> automatically.</p></li><li><p>Sign with dns-cloudflare</p><p> <code>sudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d example.com</code></p><p> In this way, you need a cloudflare key file:<br> <code>cat cloudflare.ini</code></p><pre><code># Cloudflare API credentials used by Certbotdns_cloudflare_email = cloudflare@example.comdns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234</code></pre></li></ol><h2 id="4-Set-SELinux-sebool"><a href="#4-Set-SELinux-sebool" class="headerlink" title="4. Set SELinux sebool"></a>4. Set SELinux sebool</h2><p><code>sudo setsebool -P httpd_can_network_connect 1</code></p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://certbot.eff.org/">https://certbot.eff.org/</a></p><p>[2]. <a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/">https://certbot-dns-cloudflare.readthedocs.io/en/stable/</a></p><p>[3]. <a href="https://docs.nginx.com/">https://docs.nginx.com/</a></p><p>[4]. <a href="https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx">https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Samba on RHEL/CentOS/Fedora</title>
      <link href="/p/7c9e3091.html"/>
      <url>/p/7c9e3091.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.samba.org/">Samba</a> is the standard Windows interoperability suite of programs for Linux and Unix, we are going to configuration it on RHEL&#x2F;CentOS Linux system.</p><p>Commands use root as default, for other user, <code>sudo</code> needed.</p><h2 id="1-Install-Samba"><a href="#1-Install-Samba" class="headerlink" title="1. Install Samba"></a>1. Install Samba</h2><p><code>dnf install samba -y</code></p><blockquote><p>For older releae like RHEL7.x and CentOS7.x, replace <code>dnf</code> with <code>yum</code>.</p></blockquote><h2 id="2-Add-User"><a href="#2-Add-User" class="headerlink" title="2. Add User"></a>2. Add User</h2><p><code>useradd -s /sbin/nologin -d /PATH/TO/HOME/USERNAME</code></p><blockquote><p>Add user USERNAME with home directory in &#x2F;PATH&#x2F;TO&#x2F;HOME, unable to login.</p></blockquote><p><code>passwd USERNAME</code></p><blockquote><p>Change USERNAME’s password.</p></blockquote><h2 id="3-Change-smb-user’s-access-password"><a href="#3-Change-smb-user’s-access-password" class="headerlink" title="3. Change smb user’s access password"></a>3. Change smb user’s access password</h2><p><code>smbpasswd -a USERNAME</code></p><h2 id="4-Config-samba’s-configuration-file"><a href="#4-Config-samba’s-configuration-file" class="headerlink" title="4. Config samba’s configuration file"></a>4. Config samba’s configuration file</h2><p>Change file  <code>/etc/samba/smb.conf</code>.</p><h3 id="1-Change-global-section"><a href="#1-Change-global-section" class="headerlink" title="(1). Change [global] section"></a>(1). Change <code>[global]</code> section</h3><pre><code>    workgroup = SAMBA    security = user    log file = /var/log/samba/%m.log    log level = 1    min protocol = SMB3    passdb backend = tdbsam    hosts allow = 192.168.0.0/16</code></pre><blockquote><p>Set security to <code>user</code></p><p>Set minimum samba version to <code>SMB3</code></p></blockquote><h3 id="2-Change-homes-section"><a href="#2-Change-homes-section" class="headerlink" title="(2). Change [homes] section"></a>(2). Change <code>[homes]</code> section</h3><pre><code>[homes]    comment = Home Directories    valid users = %S, %D%w%S    create mask = 2640    directory mask = 2750    browseable = No    read only = No    inherit acls = Yes    inherit permissions = yes</code></pre><h2 id="Op1-Share-Other-Directories"><a href="#Op1-Share-Other-Directories" class="headerlink" title="Op1. Share Other Directories"></a>Op1. Share Other Directories</h2><p>Add a new section in <code>/etc/samba/smb.conf</code></p><pre><code>[Data]    comment = Data    path = /PATH/TO/DATA    # valid users =     # write list =     valid users = USERNAME    create mask = 2660    directory mask = 2770    browseable = No    read only = No    inherit acls = Yes    inherit permissions = yes    # force user = GROUP    # force group = GROUP</code></pre><p>If the directory is not under home directory, it’s unaccessable due to SELinux by default.</p><p>Set boolean to access it:</p><p><code>setsebool -P samba_export_all_rw 1</code></p><h2 id="Op2-Set-SELinux-Booleans"><a href="#Op2-Set-SELinux-Booleans" class="headerlink" title="Op2. Set SELinux Booleans"></a>Op2. Set SELinux Booleans</h2><p>After operations above, it’s able to access home directory with samba, if SELinux is set to <code>diabled</code>, otherwise, SELinux should configured.</p><p><code>setsebool -P use_samba_home_dirs 1</code></p><p><code>setsebool -P samba_enable_home_dirs 1</code></p><h2 id="Op3-Set-Firewall"><a href="#Op3-Set-Firewall" class="headerlink" title="Op3. Set Firewall"></a>Op3. Set Firewall</h2><p>If firewalld enabled in your system, you have to add <code>samba</code> to <code>firewall</code>:</p><p><code>firewall-cmd --add-server=samba --permanent</code><br>And then reload firewall:<br><code>firewall-cmd --reload</code></p><h2 id="5-Restart-samba"><a href="#5-Restart-samba" class="headerlink" title="5. Restart samba"></a>5. Restart samba</h2><p><code>systemctl restart smbd</code></p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://wiki.samba.org/index.php/Main_Page">https://wiki.samba.org/index.php/Main_Page</a></p><p>[2]. <a href="https://linux.die.net/man/8/samba_selinux">https://linux.die.net/man/8/samba_selinux</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LogRotate</title>
      <link href="/p/ea7a4905.html"/>
      <url>/p/ea7a4905.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0. Introduction"></a>0. Introduction</h2><p>LogRotate is a log manage tool, which enables log files’ cutting, deleting and creating, and triggered by crontab.</p><h2 id="1-Configuration-Files-and-Path"><a href="#1-Configuration-Files-and-Path" class="headerlink" title="1. Configuration Files and Path"></a>1. Configuration Files and Path</h2><p>The default config file located <code>/etc/logrotate.conf</code></p><p>In default config file, the config folder <code>/etc/logrotate.d</code> is included by default. Which means, config files added in this folder will be executed by logrotate process.</p><h2 id="2-Config-demo"><a href="#2-Config-demo" class="headerlink" title="2. Config demo"></a>2. Config demo</h2><pre><code>/var/log/***.log &#123;          # The target log file    LOG_CONFIG_PARAMETERS   # The parameters for logrotate&#125;</code></pre><h2 id="3-Supported-Parameters"><a href="#3-Supported-Parameters" class="headerlink" title="3. Supported Parameters"></a>3. Supported Parameters</h2><h3 id="1-切割周期"><a href="#1-切割周期" class="headerlink" title="(1). 切割周期"></a>(1). 切割周期</h3><ul><li>daily： 切割周期为 每天</li><li>weekly： 切割周期为 每周</li><li>monthly： 切割周期为 每月</li><li>yearly： 切割周期为 每年</li></ul><h3 id="2-转存大小"><a href="#2-转存大小" class="headerlink" title="(2). 转存大小"></a>(2). 转存大小</h3><ul><li>size 50M</li></ul><h3 id="3-日志保存份数"><a href="#3-日志保存份数" class="headerlink" title="(3). 日志保存份数"></a>(3). 日志保存份数</h3><ul><li>rotate 1</li></ul><h3 id="4-保留日志天数"><a href="#4-保留日志天数" class="headerlink" title="(4). 保留日志天数"></a>(4). 保留日志天数</h3><ul><li>maxage 1</li></ul><h3 id="5-不转储指定扩展名的文件"><a href="#5-不转储指定扩展名的文件" class="headerlink" title="(5). 不转储指定扩展名的文件"></a>(5). 不转储指定扩展名的文件</h3><ul><li>tabooext [+] list</li></ul><p></p><h3 id="6-忽略错误"><a href="#6-忽略错误" class="headerlink" title="(6). 忽略错误"></a>(6). 忽略错误</h3><ul><li>missingok</li></ul><h3 id="7-备份-x2F-截断"><a href="#7-备份-x2F-截断" class="headerlink" title="(7). 备份&#x2F;截断"></a>(7). 备份&#x2F;截断</h3><ul><li>copytruncate&#x2F;nocopytruncate</li></ul><h3 id="8-创建权限"><a href="#8-创建权限" class="headerlink" title="(8). 创建权限"></a>(8). 创建权限</h3><ul><li>create mode owner group</li><li>nocreate</li></ul><h3 id="9-压缩"><a href="#9-压缩" class="headerlink" title="(9). 压缩"></a>(9). 压缩</h3><ul><li>nocompress</li><li>compress</li></ul><h3 id="10-延时压缩"><a href="#10-延时压缩" class="headerlink" title="(10). 延时压缩"></a>(10). 延时压缩</h3><ul><li>delaycompress</li><li>nodelaycompress</li></ul><h3 id="11-在所有其它指令完成前执行"><a href="#11-在所有其它指令完成前执行" class="headerlink" title="(11). 在所有其它指令完成前执行"></a>(11). 在所有其它指令完成前执行</h3><ul><li>prerotate</li><li>endscript</li></ul><h3 id="12-在所有其它指令完成后执行"><a href="#12-在所有其它指令完成后执行" class="headerlink" title="(12). 在所有其它指令完成后执行"></a>(12). 在所有其它指令完成后执行</h3><ul><li>postrotate</li><li>endscript</li></ul><h3 id="13-共享脚本"><a href="#13-共享脚本" class="headerlink" title="(13). 共享脚本"></a>(13). 共享脚本</h3><ul><li>sharedscripts</li></ul><h3 id="14-错误信息发送到指定的Email地址"><a href="#14-错误信息发送到指定的Email地址" class="headerlink" title="(14). 错误信息发送到指定的Email地址"></a>(14). 错误信息发送到指定的Email地址</h3><ul><li>errors address</li></ul><h3 id="15-转储的日志文件发送到指定的E-mail地址"><a href="#15-转储的日志文件发送到指定的E-mail地址" class="headerlink" title="(15). 转储的日志文件发送到指定的E-mail地址"></a>(15). 转储的日志文件发送到指定的E-mail地址</h3><ul><li>mail address</li><li>nomail</li></ul><h3 id="16-空文件也转储"><a href="#16-空文件也转储" class="headerlink" title="(16). 空文件也转储"></a>(16). 空文件也转储</h3><ul><li>ifempty</li><li>notifempty</li></ul><h3 id="17-指定转存目录"><a href="#17-指定转存目录" class="headerlink" title="(17). 指定转存目录"></a>(17). 指定转存目录</h3><ul><li>olddir directory</li><li>noolddir<h3 id="18-日志日期后缀"><a href="#18-日志日期后缀" class="headerlink" title="(18). 日志日期后缀"></a>(18). 日志日期后缀</h3></li><li>dateext</li></ul><h3 id="19-日志格式"><a href="#19-日志格式" class="headerlink" title="(19). 日志格式"></a>(19). 日志格式</h3><ul><li>dateformat</li></ul><h3 id="20-日期提前一天"><a href="#20-日期提前一天" class="headerlink" title="(20). 日期提前一天"></a>(20). 日期提前一天</h3><ul><li>dateyesterday</li></ul><h3 id="21-指定文件的后缀"><a href="#21-指定文件的后缀" class="headerlink" title="(21). 指定文件的后缀"></a>(21). 指定文件的后缀</h3><ul><li>extension</li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://blog.csdn.net/xiaojin21cen/article/details/122309230">https://blog.csdn.net/xiaojin21cen/article/details/122309230</a></p><p>[2]. <a href="https://linux.die.net/man/8/logrotate">https://linux.die.net/man/8/logrotate</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LogRotate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Configuration</title>
      <link href="/p/540e571a.html"/>
      <url>/p/540e571a.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0. Introduction"></a>0. Introduction</h2><p>In this article, we introduces git configuration for basic use.</p><p>Remarkablely, configurations for symbolic links are supported on Windows with extra settings.</p><p>The purpose we have to point out, is the git compatibility on both Windows and Unix like system.</p><h2 id="1-Git-Initialization"><a href="#1-Git-Initialization" class="headerlink" title="1. Git Initialization"></a>1. Git Initialization</h2><ul><li>Config User Name</li></ul><pre><code>git config --global user.name &#39;NAME&#39;</code></pre><ul><li>Config User Email</li></ul><pre><code>git config --global user.email &#39;EMAIL@EXAMPLE.COM&#39;</code></pre><h2 id="2-Config-Git-with-GPG"><a href="#2-Config-Git-with-GPG" class="headerlink" title="2. Config Git with GPG"></a>2. Config Git with GPG</h2><ul><li><p>Config signingkey</p><pre><code>git config --global user.signingkey XXXXXXXXXXXXXXXX</code></pre><blockquote><p>XXXXXXXXXXXXXXXX: Personal gpg private key in LONG or SHORT format</p></blockquote></li><li><p>Config GPG</p><pre><code>git config --global gpg.program C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe</code></pre></li><li><p>Config Commit and Tag</p></li></ul><pre><code>git config --global commit.gpgsign truegit config --global tag.gpgsign true</code></pre><h2 id="3-Config-Git-on-Windows-for-compatibility-with-Unix-like-system"><a href="#3-Config-Git-on-Windows-for-compatibility-with-Unix-like-system" class="headerlink" title="3. Config Git on Windows for compatibility with Unix like system"></a>3. Config Git on Windows for compatibility with Unix like system</h2><ul><li><p>Config filemode authority</p><pre><code>git config --global core.filemode false</code></pre></li><li><p>Config CRLF and LF auto change</p><pre><code>git config --global core.autocrlf true</code></pre></li><li><p>Config case-sensitive</p><pre><code>git config --global core.ignorecase false</code></pre></li><li><p>Config symlinks</p><pre><code>git config --global core.symlinks true</code></pre></li></ul><blockquote><p>Additional settings on Windows</p><ul><li>Enable Develop Mode on Windows10 and later</li><li>Enable <code>symlinks</code> on installing git on Windows</li></ul></blockquote><h2 id="4-Config-Git-ignore-LFS-by-default"><a href="#4-Config-Git-ignore-LFS-by-default" class="headerlink" title="4. Config Git ignore LFS by default"></a>4. Config Git ignore LFS by default</h2><pre><code>git config --global filter.lfs.smudge &quot;git-lfs smudge --skip -- %f&quot;git config --global filter.lfs.process &quot;git-lfs filter-process --skip&quot;</code></pre><h2 id="5-gitconfig-Looks-Like"><a href="#5-gitconfig-Looks-Like" class="headerlink" title="5. .gitconfig Looks Like"></a>5. <code>.gitconfig</code> Looks Like</h2><pre><code>[core]      symlinks = true      autocrlf = true      filemode = false      ignorecase = false[user]    name = User Name    email = Username@example.com    signingkey = XXXXXXXXXXXXXXXX[commit]    gpgsign = true[tag]    gpgsign = true[gpg]    program = C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe[filter &quot;lfs&quot;]    smudge = git-lfs smudge --skip -- %f    process = git-lfs filter-process --skip</code></pre><h2 id="6-Add-symbolic-links-on-Windows"><a href="#6-Add-symbolic-links-on-Windows" class="headerlink" title="6. Add symbolic links on Windows"></a>6. Add symbolic links on Windows</h2><pre><code>mklink [[/d] | [/h] | [/j]] &lt;link&gt; &lt;target&gt;</code></pre><blockquote><p>&#x2F;d Creates a directory symbolic link. By default, this command creates a file symbolic link.</p><p>&#x2F;h Creates a hard link instead of a symbolic link.</p><p>&#x2F;j Creates a Directory Junction.</p><p><code>&lt;link&gt;</code> Specifies the name of the symbolic link being created.</p><p><code>&lt;target&gt;</code> Specifies the path (relative or absolute) that the new symbolic link refers to.</p><p>&#x2F;? Displays help at the command prompt.</p></blockquote><h2 id="7-Add-Tag"><a href="#7-Add-Tag" class="headerlink" title="7. Add Tag"></a>7. Add Tag</h2><pre><code>git tag XXXX</code></pre><h2 id="8-Delete-Tag"><a href="#8-Delete-Tag" class="headerlink" title="8. Delete Tag"></a>8. Delete Tag</h2><pre><code>git tag -d &lt;tagname&gt;git push origin --delete &lt;tagname&gt;</code></pre><h2 id="9-Commit-Tag"><a href="#9-Commit-Tag" class="headerlink" title="9. Commit Tag"></a>9. Commit Tag</h2><pre><code>git push origin &lt;tagname&gt;</code></pre><h2 id="10-Delete-Git-Branch"><a href="#10-Delete-Git-Branch" class="headerlink" title="10. Delete Git Branch"></a>10. Delete Git Branch</h2><pre><code>git branch -d &lt;branchname&gt;git push origin --delete &lt;branchname&gt;</code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>[1]. <a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work</a><br>[2]. <a href="https://github.com/git-for-windows/git/wiki/Symbolic-Links">https://github.com/git-for-windows/git/wiki/Symbolic-Links</a><br>[3]. <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/mklink">https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/mklink</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Git </category>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GnuPG </tag>
            
            <tag> Symbolic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH端口号非22的解决方案</title>
      <link href="/p/10337266.html"/>
      <url>/p/10337266.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SSH-Usage"><a href="#1-SSH-Usage" class="headerlink" title="1. SSH Usage"></a>1. SSH Usage</h2><pre><code>ssh user@host.com -p1234 -i /PATH/TO/IDENTITY/FILE</code></pre><ul><li>user: 用户名</li><li>host.com: 服务器地址</li><li>1234: ssh端口号</li><li>&#x2F;PATH&#x2F;TO&#x2F;IDENTITY&#x2F;FILE: 私钥路径</li></ul><h2 id="2-SCP-Usage"><a href="#2-SCP-Usage" class="headerlink" title="2. SCP Usage"></a>2. SCP Usage</h2><pre><code>scp -P 1234 -I /PATH/TO/IDENTITY/FILE user@host.com:/PATH/TO/FILE /FILE/LOCAL/PATH</code></pre><ul><li>user: 用户名</li><li>host.com: 服务器地址</li><li>1234: ssh端口号</li><li>&#x2F;PATH&#x2F;TO&#x2F;FILE: 服务器上文件地址</li><li>&#x2F;FILE&#x2F;LOCAL&#x2F;PATH: 下载到本地的目录</li><li>&#x2F;PATH&#x2F;TO&#x2F;IDENTITY&#x2F;FILE: 私钥路径</li></ul><h2 id="3-Other-Methods"><a href="#3-Other-Methods" class="headerlink" title="3. Other Methods"></a>3. Other Methods</h2><p>在本地<code>~/.ssh</code>目录下，编辑config文件，如果没有则新建一个config文件，按照一下格式编辑文件：</p><pre><code>Host    192.168.1.1HostName    192.168.1.1    Port    2222    User    usergit    IdentityFile    ~/.ssh/id_rsa</code></pre><p>其中<code>IdentityFile</code>是SSH密钥的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebDav Based On Caddy</title>
      <link href="/p/41db54ee.html"/>
      <url>/p/41db54ee.html</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article introducing a method on servering webdav service with CaddyServer.</p><h2 id="1-Install-CaddyServer"><a href="#1-Install-CaddyServer" class="headerlink" title="1. Install CaddyServer"></a>1. Install CaddyServer</h2><p>The easiest way to install caddy is using package manager.</p><ul><li><p>On Debian&#x2F;Ubuntu</p><pre><code>sudo apt install -y debian-keyring debian-archive-keyring apt-transport-httpscurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39; \    | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpgcurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39; \    | sudo tee /etc/apt/sources.list.d/caddy-stable.listsudo apt updatesudo apt install caddy</code></pre></li><li><p>On RHEL&#x2F;CentOS&#x2F;RockyLinux</p><pre><code>dnf install &#39;dnf-command(copr)&#39;dnf copr enable @caddy/caddydnf install caddy</code></pre></li></ul><h2 id="2-Add-Modules-for-Caddy"><a href="#2-Add-Modules-for-Caddy" class="headerlink" title="2. Add Modules for Caddy"></a>2. Add Modules for Caddy</h2><ul><li><p>Add Packages Online</p><pre><code>sudo caddy add-package XXX</code></pre><p>  XXX is the package name, which always start with <code>github.com/xxxxxx</code>.</p><p>  It’s easy to find packages name from <a href="https://caddyserver.com/download">Download Page</a>.</p><blockquote><p>Examples: </p><p>install webdav module:</p><p><code>sudo caddy add-package github.com/mholt/caddy-webdav</code></p></blockquote></li><li><p>Add Packages Manually</p><p>  Select and Download CaddyServer with modules from <a href="https://caddyserver.com/download">Download Page</a>.</p><p>  Replace executable <code>caddy</code> file with downloaded:</p><pre><code>sudo mv caddy /usr/binsudo chmod +x /usr/bin/caddysudo restorecon /usr/bin/caddysudo chown root:root /usr/bin/caddy</code></pre></li></ul><h2 id="3-Modify-CaddyServer’s-service-file"><a href="#3-Modify-CaddyServer’s-service-file" class="headerlink" title="3. Modify CaddyServer’s service file"></a>3. Modify CaddyServer’s service file</h2><p>Due to the configuration in default systemd file, the parameter <code>ProtectSystem=full</code>, caddy lose the permission on writing <code>/usr</code>, <code>/boot</code> and <code>/etc</code>.(<a href="https://www.redhat.com/sysadmin/mastering-systemd">Reference-2</a> for details).</p><ul><li><p>Add ReadWrite permission to caddy web folder <code>/usr/share/caddy</code><br>  Adding paramter to service file <code>/usr/lib/systemd/system/caddy.service</code> under <code>[service]</code> lable:</p></li><li><p>Reload systemd</p><p>  <code>sudo systemctl daemon-reload</code></p></li></ul><h2 id="4-Make-caddy-has-authority-to-access-files"><a href="#4-Make-caddy-has-authority-to-access-files" class="headerlink" title="4. Make caddy has authority to access files"></a>4. Make caddy has authority to access files</h2><ul><li><p>Change the owner of <code>/path/to/data</code> with <code>caddy</code></p><p>  <code>sudo chwon caddy /path/to/data -R</code></p></li><li><p>Add <code>caddy</code> to the group of the files’ owner</p><p>  <code>sudo usermod -a -G $GROUP</code></p></li></ul><h2 id="5-Config-Caddyfile"><a href="#5-Config-Caddyfile" class="headerlink" title="5. Config Caddyfile"></a>5. Config Caddyfile</h2><ul><li><p>webdav Module<br>  Configure introduction is available: <a href="https://github.com/WingLim/caddy-webdav">caddy-webdav</a></p><pre><code>&#123;    basicauth &#123;        username password_generate_by_openssl    &#125;    root * /path/to/data/    route &#123;        rewrite /webdav /webdav/        webdav /webdav/* &#123;            prefix /webdav        &#125;    &#125;    file_server browse&#125;</code></pre></li><li><p>global config<br>  set webdav before file_server:</p><pre><code>&#123;  order webdav before file_server&#125;</code></pre></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://caddyserver.com/docs/install">https://caddyserver.com/docs/install</a></p><p>[2]. <a href="https://www.redhat.com/sysadmin/mastering-systemd">https://www.redhat.com/sysadmin/mastering-systemd</a></p><p>[3]. <a href="https://github.com/abiosoft/caddy-webdav">https://github.com/abiosoft/caddy-webdav</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webhook Based On Caddy</title>
      <link href="/p/4f7b3e2.html"/>
      <url>/p/4f7b3e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article introducing a method on building webhook service with CaddyServer.</p><h2 id="1-Install-CaddyServer"><a href="#1-Install-CaddyServer" class="headerlink" title="1. Install CaddyServer"></a>1. Install CaddyServer</h2><p>The easiest way to install caddy is using package manager.</p><ul><li><p>On Debian&#x2F;Ubuntu</p><pre><code>sudo apt install -y debian-keyring debian-archive-keyring apt-transport-httpscurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39; \    | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpgcurl -1sLf &#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39; \    | sudo tee /etc/apt/sources.list.d/caddy-stable.listsudo apt updatesudo apt install caddy</code></pre></li><li><p>On RHEL&#x2F;CentOS&#x2F;RockyLinux</p><pre><code>dnf install &#39;dnf-command(copr)&#39;dnf copr enable @caddy/caddydnf install caddy</code></pre></li></ul><h2 id="2-Add-Modules-for-Caddy"><a href="#2-Add-Modules-for-Caddy" class="headerlink" title="2. Add Modules for Caddy"></a>2. Add Modules for Caddy</h2><ul><li><p>Add Packages Online</p><pre><code>sudo caddy add-package XXX</code></pre><p>  XXX is the package name, which always start with <code>github.com/xxxxxx</code>.</p><p>  It’s easy to find packages name from <a href="https://caddyserver.com/download">Download Page</a>.</p><blockquote><p>Examples: </p><p>install webhook module:</p><p><code>sudo caddy add-package github.com/WingLim/caddy-webhook</code></p><p>install exec module:</p><p><code>sudo caddy add-package github.com/mholt/caddy-events-exec</code></p></blockquote></li><li><p>Add Packages Manually</p><p>  Select and Download CaddyServer with modules from <a href="https://caddyserver.com/download">Download Page</a>.</p><p>  Replace executable <code>caddy</code> file with downloaded:</p><pre><code>sudo mv caddy /usr/binsudo chmod +x /usr/bin/caddysudo restorecon /usr/bin/caddysudo chown root:root /usr/bin/caddy</code></pre></li></ul><h2 id="3-Modify-CaddyServer’s-service-file"><a href="#3-Modify-CaddyServer’s-service-file" class="headerlink" title="3. Modify CaddyServer’s service file"></a>3. Modify CaddyServer’s service file</h2><p>Due to the configuration in default systemd file, the parameter <code>ProtectSystem=full</code>, caddy lose the permission on writing <code>/usr</code>, <code>/boot</code> and <code>/etc</code>.(<a href="https://www.redhat.com/sysadmin/mastering-systemd">Reference-2</a> for details).</p><ul><li><p>Add ReadWrite permission to caddy web folder <code>/usr/share/caddy</code><br>  Adding paramter to service file <code>/usr/lib/systemd/system/caddy.service</code> under <code>[service]</code> lable:</p><p>  <code>ReadWritePaths=/usr/share/caddy</code></p></li><li><p>Reload systemd</p><p>  <code>sudo systemctl daemon-reload</code></p></li></ul><h2 id="4-Config-Caddyfile"><a href="#4-Config-Caddyfile" class="headerlink" title="4. Config Caddyfile"></a>4. Config Caddyfile</h2><ul><li><p>Webhook Module<br>  Configure introduction is available: <a href="https://github.com/WingLim/caddy-webhook">caddy-webhook</a></p><pre><code>    route /webhook &#123;        webhook &#123;            repo https://github.com/WingLim/winglim.github.io.git            path /usr/share/caddy            branch master            depth 1            type github/gitlab/gitee/gogs/bitbucket            command             username            password            key            token            submodule        &#125;    &#125;</code></pre></li><li><p>Exec Module<br>  Configure introduction is available: <a href="https://github.com/abiosoft/caddy-exec">caddy-exec</a></p><pre><code>    route /webhook &#123;        exec &#123;            command git            args pull            directory /usr/share/caddy            log file /var/log/caddy/git.log        &#125;    &#125;</code></pre></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://caddyserver.com/docs/install">https://caddyserver.com/docs/install</a></p><p>[2]. <a href="https://www.redhat.com/sysadmin/mastering-systemd">https://www.redhat.com/sysadmin/mastering-systemd</a></p><p>[3]. <a href="https://github.com/abiosoft/caddy-exec">https://github.com/abiosoft/caddy-exec</a></p><p>[4]. <a href="https://github.com/WingLim/caddy-webhook">https://github.com/WingLim/caddy-webhook</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Execute Scripts on Period with Systemd</title>
      <link href="/p/dd7b2a00.html"/>
      <url>/p/dd7b2a00.html</url>
      
        <content type="html"><![CDATA[<p>本教程旨在通过<code>Systemd</code>自带的<code>Timer</code>实现定时执行任务</p><p>本文以实现定时的<code>git pull</code>为例，讲解<code>Systemd</code>的定时器</p><h2 id="1-Create-a-git-pull-Script"><a href="#1-Create-a-git-pull-Script" class="headerlink" title="1. Create a git pull Script"></a>1. Create a <code>git pull</code> Script</h2><p>该脚本的主要目的为进入指定的git路径，并执行<code>git pull</code>指令</p><blockquote><p>需要确保该路径存在一个已经clone到本地的git仓库</p></blockquote><h3 id="1-vim-gitpull-sh内容如下"><a href="#1-vim-gitpull-sh内容如下" class="headerlink" title="(1). vim gitpull.sh内容如下:"></a>(1). <code>vim gitpull.sh</code>内容如下:</h3><pre><code>#!/bin/shcd $&#123;pwd_of_git_repo_path&#125;git pull</code></pre><blockquote><p>${pwd_of_git_repo_path}表示git仓库的文件夹</p></blockquote><h3 id="2-编辑完后保存退出-wq-为脚本添加运行权限："><a href="#2-编辑完后保存退出-wq-为脚本添加运行权限：" class="headerlink" title="(2). 编辑完后保存退出:wq,为脚本添加运行权限："></a>(2). 编辑完后保存退出<code>:wq</code>,为脚本添加运行权限：</h3><pre><code>sudo chmod +x gitpull.sh</code></pre><h3 id="3-测试脚本是否可运行"><a href="#3-测试脚本是否可运行" class="headerlink" title="(3). 测试脚本是否可运行"></a>(3). 测试脚本是否可运行</h3><p>命令行运行<code>./gitpull.sh</code>，当命令行出现和正常运行<code>git pull</code>指令一样的输出时，说明脚本正常</p><h2 id="2-Create-gitpull-service"><a href="#2-Create-gitpull-service" class="headerlink" title="2. Create gitpull.service"></a>2. Create <code>gitpull.service</code></h2><h3 id="1-在-etc-systemd-system-或者-usr-lib-systemd-system-目录中创建一个名为gitpull-service的文件-内容如下："><a href="#1-在-etc-systemd-system-或者-usr-lib-systemd-system-目录中创建一个名为gitpull-service的文件-内容如下：" class="headerlink" title="(1). 在/etc/systemd/system/或者/usr/lib/systemd/system/目录中创建一个名为gitpull.service的文件,内容如下："></a>(1). 在<code>/etc/systemd/system/</code>或者<code>/usr/lib/systemd/system/</code>目录中创建一个名为<code>gitpull.service</code>的文件,内容如下：</h3><pre><code>[Unit]Description=gitpull service[Service]User=$&#123;USER&#125;Group=$&#123;GROUP&#125;ExecStart=/bin/bash $&#123;pwd_of_scripts&#125;/gitpull.sh[Install]WantedBy=multi-user.target</code></pre><blockquote><p>${pwd_of_scripts} 表示上一步创建的脚本所在文件夹<br>${USER}表示执行脚本的用户，${GROUP}表示用户所在组</p></blockquote><h3 id="2-测试Service"><a href="#2-测试Service" class="headerlink" title="(2). 测试Service"></a>(2). 测试Service</h3><p>重载并运行<code>gitpull.service</code></p><pre><code>sudo systemctl daemon-reloadsudo systemctl start gitpull.service</code></pre><p>查看<code>Systemd</code>的输出日志，确定service是否正常运行，输出与直接<code>git pull</code>是否相同</p><pre><code>sudo systemctl status gitpull.service</code></pre><h2 id="3-Create-gitpull-timer"><a href="#3-Create-gitpull-timer" class="headerlink" title="3. Create gitpull.timer"></a>3. Create <code>gitpull.timer</code></h2><h3 id="1-创建定时器，内容如下："><a href="#1-创建定时器，内容如下：" class="headerlink" title="(1). 创建定时器，内容如下："></a>(1). 创建定时器，内容如下：</h3><pre><code>[Unit]Description=run gitpull.sh every 1hour[Timer]OnUnitActiveSec=1hUnit=gitpull.service[Install]WantedBy=multi-user.target</code></pre><blockquote><p><code>Timer</code>的名称需要与<code>Service</code>的名称一致</p><p><code>OnUnitActiveSec</code>表示运行定时器运行的间隔</p><p><code>Oncalnedar</code>表示在特定时间运行</p><p><code>Unit</code>表示需要运行的service</p></blockquote><ul><li>Oncalnedar<br><code>* *-*-* *:*:*</code><ul><li><code>*</code> - To signify the day of the week eg:- Sat,Thu,Mon</li><li><code>*-*-* </code>- To signify the calendar date. Which means it breaks down to - year-month-date.<ul><li>2021-10-15 is 15th of October</li><li>*-10-15 means every year at 15th October</li><li>*-01-01 means every new year.</li></ul></li><li><code>*:*:*</code> is to signify the time component of the calnedar event. So it is - hour:minute:second<h3 id="2-运行测试Timer"><a href="#2-运行测试Timer" class="headerlink" title="(2). 运行测试Timer"></a>(2). 运行测试<code>Timer</code></h3><pre><code>sudo systemctl daemon-reloadsudo systemctl start gitpull.timer</code></pre>检查<code>gitpull.service</code>和<code>gitpull.timer</code>的运行状态和输出<pre><code>sudo systemctl status gitpull.servicesudo systemctl status gitpull.timer</code></pre></li></ul></li></ul><h2 id="4-Run-Timer-on-Boot"><a href="#4-Run-Timer-on-Boot" class="headerlink" title="4. Run Timer on Boot"></a>4. Run Timer on Boot</h2><pre><code>sudo systemctl enable gitpull.servicesudo systemctl enable gitpull.timer</code></pre><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>[1]. <a href="http://www.ruanyifeng.com/blog/2018/03/systemd-timer.html">http://www.ruanyifeng.com/blog/2018/03/systemd-timer.html</a></p><p>[2]. <a href="https://silentlad.com/systemd-timers-oncalendar-(cron)-format-explained">https://silentlad.com/systemd-timers-oncalendar-(cron)-format-explained</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yubikey-as-SSH-Key</title>
      <link href="/p/4f4bb9e9.html"/>
      <url>/p/4f4bb9e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Use Yubikey as SSH Key.</p><h2 id="Prequisites"><a href="#Prequisites" class="headerlink" title="Prequisites"></a>Prequisites</h2><h3 id="1-Install-OpenSC-and-YubiKey-Manager-CLI-only"><a href="#1-Install-OpenSC-and-YubiKey-Manager-CLI-only" class="headerlink" title="1. Install OpenSC and YubiKey Manager (CLI only)"></a>1. Install OpenSC and YubiKey Manager (CLI only)</h3><h4 id="On-Ubuntu-x2F-Debian"><a href="#On-Ubuntu-x2F-Debian" class="headerlink" title="On Ubuntu&#x2F;Debian"></a>On Ubuntu&#x2F;Debian</h4><pre><code>sudo apt updatesudo apt install opensc yubikey-manager</code></pre><h3 id="2-If-this-is-a-new-Yubikey-change-the-default-PIV-management-key-PIN-and-PUK"><a href="#2-If-this-is-a-new-Yubikey-change-the-default-PIV-management-key-PIN-and-PUK" class="headerlink" title="2. If this is a new Yubikey, change the default PIV management key, PIN and PUK."></a>2. If this is a new Yubikey, change the default PIV management key, PIN and PUK.</h3><p>The <code>ykman</code> tool can generate a new management key for you. For the PIN and PUK you’ll need to provide your own values (6-8 digits).</p><pre><code>ykman piv change-management-key --touch --generateykman piv change-pin -P 123456ykman piv change-puk -p 12345678</code></pre><p>Make sure you save the generated password somewhere secure such as a password manager. The management key is needed any time you generate a keypair, import a certificate or change the number of PIN or PUK retries</p><p>The PUK should also be kept somewhere safe. This is used if the PIN is entered incorrectly too many times.</p><h2 id="Generate-PIV-Key"><a href="#Generate-PIV-Key" class="headerlink" title="Generate PIV Key"></a>Generate PIV Key</h2><ol><li>Ensure CCID mode is enabled on the Yubikey</li></ol><pre><code>ykman mode</code></pre><p>If CCID is not in the list, enable it by adding CCID to the list, e.g.</p><pre><code>ykman mode OTP+FIDO+CCID</code></pre><p>(This assumes you had OTP+FIDO previously, and still want them enabled.)</p><ol start="2"><li>Generate a PIV key and output the public key</li></ol><pre><code>ykman piv generate-key 9a pubkey.pem</code></pre><p>Alternatively, you can require that you have to touch the Yubikey every time the slot is accessed:</p><pre><code>ykman piv generate-key --touch-policy always 9a pubkey.pem</code></pre><p>This is an RSA 2048-bit key by default. Depending which Yubikey you have, you can change it using <code>-a</code> &#x2F; <code>--algorithm</code>.</p><p>(9a is the PIV authentication slot.)</p><ol start="3"><li>Generate a self-signed X.509 certificate</li></ol><pre><code>ykman piv generate-certificate -s &quot;SSH key&quot; 9a pubkey.pem</code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li>Setting the system path</li></ol><p>Go to Control Panel → System and Security → System → Advanced system setting</p><p>Click “Environment Variables…“</p><p>Under System Variables, highlight “Path“ and click “Edit…“</p><p>Click “New“ and add the absolute path to Yubico PIV Tool\bin</p><ol start="2"><li>Set ssh config file</li></ol><p>Open PowerShell and run the following:</p><pre><code>New-Item -Path $env:USERPROFILE\.ssh\ -Name &quot;config&quot; -ItemType &quot;file&quot; -Value `  &#39;PKCS11Provider &quot;C:\Program Files\Yubico\Yubico PIV Tool\bin\libykcs11.dll&quot;&#39;</code></pre><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li>Export your SSH public key from the Yubikey</li></ol><pre><code>ssh-keygen -D /usr/local/lib/opensc-pkcs11.so</code></pre><p>And that’s all the hard stuff done. </p><p>Now just add the public key to your <code>authorized_keys</code> file on a remote host and try to use it:</p><pre><code>ssh -I /usr/local/lib/opensc-pkcs11.so -i /usr/local/lib/opensc-pkcs11.so \   -o IdentitiesOnly=yes server.example.com</code></pre><p>You should be prompted for your Yubikey’s PIV PIN.</p><p>You can add the PKCS11 library to <code>ssh-agent</code>.</p><pre><code>ssh-add -s /usr/local/lib/opensc-pkcs11.so</code></pre><p>Once more you will be prompted for your PIN, and from there SSH authentication will happen as usual.</p><p>To configure <code>ssh</code> to use the Yubikey’s SSH key, use the <code>PKCS11Provider</code> config option instead of <code>IdentityFile</code>, e.g.:</p><pre><code>Host foo  PKCS11Provider /usr/local/lib/opensc-pkcs11.so  IdentitiesOnly yes</code></pre><h2 id="Additional-notes"><a href="#Additional-notes" class="headerlink" title="Additional notes"></a>Additional notes</h2><ul><li><p>When SSHing, you may get prompted with the key’s subject name, like <code>Enter PIN for &#39;SSH key&#39;:</code>. But if you add the key to the agent, you’ll get a prompt like <code>Enter passphrase for PKCS#11:</code>. These are the same PIN (your PIV PIN).</p></li><li><p>If you remove the key from ssh-agent using <code>ssh-add -d</code> or <code>ssh-add -D</code>, you’ll have to either remove and re-add the PKCS library to the agent or restart the agent. </p><ul><li>To re-add the library run<pre><code>ssh-add -e /usr/local/lib/opensc-pkcs11.sossh-add -s /usr/local/lib/opensc-pkcs11.so</code></pre></li></ul></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1].<a href="https://github.com/jamesog/yubikey-ssh">https://github.com/jamesog/yubikey-ssh</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Yubikey </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GnuPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GnuPG Home Configuration on Winodws</title>
      <link href="/p/53e92165.html"/>
      <url>/p/53e92165.html</url>
      
        <content type="html"><![CDATA[<p>The default GnuPG home is <code>~/.gnupg</code> on Linux, and <code>~\AppData\Roaming\gnupg</code> on Windows.</p><p>To change the gnupg home on Windows, set a System Variables in Environment Variables:</p><pre><code>Variable = GNUPGHOMEVALUE = ~\gnupg</code></pre><p>You should do the commands one by one.</p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1].<a href="https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration.html">https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration.html</a><br>[2].<a href="https://www.gnupg.org/gph/en/manual/r1616.html">https://www.gnupg.org/gph/en/manual/r1616.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GnuPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg Development Environment</title>
      <link href="/p/3d2745bf.html"/>
      <url>/p/3d2745bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h1><p>Build a FFmpeg developing environment on Ubuntu-22.04-LTS with Qt and SDL.</p><h1 id="2-Applications"><a href="#2-Applications" class="headerlink" title="2.Applications"></a>2.Applications</h1><ul><li><a href="https://gcc.gnu.org/">GNU GCC</a></li><li><a href="https://qt.io/">Qt</a></li><li><a href="https://ffmpeg.org/">FFmpeg</a></li><li><a href="https://www.libsdl.org/">SDL</a> <a href="https://github.com/libsdl-org/SDL/releases">2</a></li></ul><h1 id="3-Install"><a href="#3-Install" class="headerlink" title="3.Install"></a>3.Install</h1><h2 id="0-Pre-Install"><a href="#0-Pre-Install" class="headerlink" title="(0).Pre-Install"></a>(0).Pre-Install</h2><p>Update all repositories.</p><pre><code>sudo apt update &amp;&amp; apt upgrade</code></pre><h2 id="1-Depedencies"><a href="#1-Depedencies" class="headerlink" title="(1).Depedencies"></a>(1).Depedencies</h2><p>Resolved in Ubuntu 22.04.2 LTS</p><p>On Video decoding&#x2F;encoding with <a href="https://ffmpeg.org/">FFmpeg</a></p><ul><li><p>x264</p><ul><li>libavcodec58<ul><li>libavcodec-extra58</li></ul></li><li>libavformat58<ul><li>libavformat-extra58</li></ul></li><li>libavutil56</li><li>libc6</li><li>libffms2-5</li><li>libgpac11</li><li>libswscale5</li><li>libx264-163</li></ul></li><li><p>x265</p><ul><li>libc6</li><li>libstdc++6</li><li>libx265-199</li><li>libx265-199</li></ul></li><li><p>libx264-dev</p><ul><li>libx264-163</li></ul></li><li><p>libx265-dev</p><ul><li>libx265-199</li></ul></li><li><p>libass-dev</p><ul><li>libass9</li><li>libfontconfig1-dev<ul><li>libfontconfig-dev</li></ul></li><li>libfreetype-dev</li><li>libfribidi-dev</li><li>libharfbuzz-dev</li></ul></li><li><p>libfdk-aac-dev</p><ul><li>libfdk-aac2</li><li>pkg-config<ul><li>pkg-config:i386</li><li>pkgconf</li></ul></li></ul></li><li><p>libfreetype-dev</p><ul><li>libfreetype6</li><li>libbrotli-dev</li><li>libc6-dev</li><li>libc-dev<ul><li>libc6-dev</li></ul></li><li>zlib1g-dev</li><li>libz-dev<ul><li>zlib1g-dev</li></ul></li></ul></li><li><p>libmp3lame-dev</p><ul><li>libmp3lame0</li></ul></li><li><p>libopus-dev</p><ul><li>libopus0</li></ul></li><li><p>libvorbis-dev</p><ul><li>libogg-dev</li><li>libvorbis0a</li><li>libvorbisenc2</li><li>libvorbisfile3</li></ul></li><li><p>libvpx-dev</p><ul><li>libvpx7</li></ul></li></ul><p>On Audio decoding&#x2F;encoding with <a href="https://www.libsdl.org/">SDL2</a>:</p><ul><li>libsdl2-dev<ul><li>libasound2-dev</li><li>libdbus-1-dev</li><li>libdecor-0-dev</li><li>libdrm-dev</li><li>libegl1-mesa-dev</li><li>libgbm-dev</li><li>libgl-dev</li><li>libgles-dev</li><li>libglu1-mesa-dev</li><li>libibus-1.0-dev</li><li>libpulse-dev</li><li>libsdl2-2.0-0</li><li>libsndio-dev</li><li>libudev-dev</li><li>libwayland-dev</li><li>libx11-dev</li><li>libxcursor-dev</li><li>libxext-dev</li><li>libxfixes-dev</li><li>libxi-dev</li><li>libxinerama-dev</li><li>libxkbcommon-dev</li><li>libxrandr-dev</li><li>libxss-dev</li><li>libxt-dev</li><li>libxv-dev</li><li>libxxf86vm-dev</li><li>libc6</li><li>libopengl0</li><li>libx11-6</li></ul></li></ul><p>On configuring FFmpeg:</p><ul><li>yasm<ul><li>libc6</li></ul></li></ul><p>Install all dependencies with following command:</p><pre><code>sudo apt install yasm gcc g++ cmake make \    x264 x265 libx264-dev libx265-dev \    libass-dev libfdk-aac-dev libvorbis-dev \    libfreetype-dev libmp3lame-dev libopus-dev \     libvpx-dev libsdl2-dev</code></pre><h2 id="2-Qt"><a href="#2-Qt" class="headerlink" title="(2).Qt"></a>(2).Qt</h2><p>Install Qt with <a href="https://download.qt.io/archive/online_installers/">Qt Online Installer</a>.</p><blockquote><p>It’s better to install Qt with <a href="http://mirrors.ustc.edu.cn/qtproject/official_releases/online_installers/">USTC’s mirror</a>.</p><p>Install with commands: <code>.\qt-unified-windows-x86-online.exe --mirror https://mirrors.ustc.edu.cn/qtproject</code></p><p>DO NOT install Qt with <code>sudo</code> command nor with user <code>ROOT</code>.</p></blockquote><blockquote><p>If you prefer Qt Online Installer, <code>libxcb-xinerama.so.0</code> is needed. To install this dependency, run following command <code>sudo apt install libxcb-xinerama0</code>.</p></blockquote><blockquote><p>It’s possible to install Qt from source. Follow the <a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/wikis/installQt">instruction</a>, and the script is available <a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/blob/main/install_qt.sh">here</a>.</p></blockquote><h2 id="3-FFmpeg"><a href="#3-FFmpeg" class="headerlink" title="(3).FFmpeg"></a>(3).FFmpeg</h2><p>Download FFmpeg from <a href="http://ffmpeg.org/releases/">Offical Web Site</a>, install with compile commands below:</p><pre><code>wget http://ffmpeg.org/releases/ffmpeg-4.2.9.tar.xztar -xvf ffmpeg-4.2.9.tar.xzcd ffmpeg-4.2.9sudo ./configure --enable-gpl --enable-libass --enable-libfdk-aac \    --enable-libfreetype --enable-libmp3lame --enable-libopus \    --enable-libvorbis --enable-libvpx --enable-libx264 \    --enable-libx265 --enable-pic --enable-shared  --enable-nonfree \    --prefix=/usr/local/ffmpeg-4.2.9make -j8sudo make install</code></pre><h2 id="4-SDL2"><a href="#4-SDL2" class="headerlink" title="(4).SDL2"></a>(4).SDL2</h2><p>SDL2 has installed with system, headers installed when dependencies installed.</p><h1 id="4-Environment-Installing-Script"><a href="#4-Environment-Installing-Script" class="headerlink" title="4.Environment Installing Script"></a>4.Environment Installing Script</h1><p>One-key environment installing script is provided:</p><ul><li><a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/blob/main/INSTALLENV.sh">INSTALLENV.sh</a><ul><li><a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/blob/main/install_denendency.sh">install_denendency.sh</a></li><li><a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/blob/main/install_ffmpeg.sh">install_ffmpeg.sh</a></li><li><a href="https://gitlab.dashdreams.com/Haoran.Qi/Video-FFmpeg-Dependency/-/blob/main/install_qt.sh">install_qt.sh</a></li></ul></li></ul><blockquote><p>Qt Framework will be installed via local compile, and downloaded opensource from <a href="https://mirrors.ustc.edu.cn/">USTC Mirror</a>.</p><p>Qt will be installed in path: <code>/usr/local/qt-5.15.2</code></p></blockquote><h1 id="5-Config-Qt-Project"><a href="#5-Config-Qt-Project" class="headerlink" title="5.Config Qt Project"></a>5.Config Qt Project</h1><ul><li><p>Add FFmpeg to <code>INCLUDEPATH</code> in .pro file.</p><ul><li>Add dynamic link <code>-lavfilter -lavformat -lavdevice -lavcodec -lpostproc -lswscale -lavutil -lswresample </code> to <code>LIBS</code> in .pro file for <a href="https://ffmpeg.org/">FFmpeg</a>;</li></ul></li><li><p>Add <code>-lSDL2main -lSDL2</code> for <a href="https://libsdl.org/">SDL</a>.</p></li></ul><h1 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h1><p>[1].<a href="https://qt.io/">https://qt.io</a></p><p>[2].<a href="http://mirrors.ustc.edu.cn/help/qtproject.html">http://mirrors.ustc.edu.cn/help/qtproject.html</a></p><p>[3].<a href="http://ffmpeg.org/">http://ffmpeg.org</a></p><p>[4].<a href="https://libsdl.org/">https://libsdl.org/</a></p><p>[5].<a href="https://blog.csdn.net/a1367666195/article/details/126055594">https://blog.csdn.net/a1367666195/article/details/126055594</a></p><p>[6].<a href="https://askubuntu.com/questions/1298645/shared-library-not-found-for-pyqt5-libxcb-xinerama-so-0-not-found">https://askubuntu.com/questions/1298645/shared-library-not-found-for-pyqt5-libxcb-xinerama-so-0-not-found</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install Qt From Source</title>
      <link href="/p/8fb1570a.html"/>
      <url>/p/8fb1570a.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-Intro"><a href="#0-Intro" class="headerlink" title="0.Intro"></a>0.Intro</h2><p>Install Qt from opensouce, via local compile.</p><p>Take <a href="https://www.qt.io/blog/qt-5.15.2-released">Qt-5.15.2</a> as an example.</p><h2 id="1-Download"><a href="#1-Download" class="headerlink" title="1.Download"></a>1.Download</h2><p>Download Qt-5.15.2 from <a href="https://download.qt.io/archive/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">official site</a>, or from mirror, like <a href="http://mirrors.ustc.edu.cn/qtproject/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">UTSC</a>.</p><pre><code>wget http://mirrors.ustc.edu.cn/qtproject/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz</code></pre><h2 id="2-Install-Dependency-and-Unpack"><a href="#2-Install-Dependency-and-Unpack" class="headerlink" title="2.Install Dependency and Unpack"></a>2.Install Dependency and Unpack</h2><pre><code>sudo apt install libX11-dev libXext-dev libXtst-dev -y tar -xvf qt-everywhere-src-5.15.2.tar.xz</code></pre><h2 id="3-To-Directory-and-Configure"><a href="#3-To-Directory-and-Configure" class="headerlink" title="3.To Directory and Configure"></a>3.To Directory and Configure</h2><pre><code>cd qt-everywhere-src-5.15.2./configure -prefix /usr/local/qt-5.15.2 -opensource -developer-build \    -confirm-license -nomake tests -nomake examples</code></pre><h2 id="4-Make-and-Install"><a href="#4-Make-and-Install" class="headerlink" title="4.Make and Install"></a>4.Make and Install</h2><pre><code>make -j8sudo make install</code></pre><blockquote><p>Qt will be installed to <code>/usr/local/qt-5.15.2</code>, due to configure above.</p></blockquote><h2 id="5-Qt-install-script"><a href="#5-Qt-install-script" class="headerlink" title="5.Qt install script"></a>5.Qt install script</h2><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://qt.io/">https://qt.io</a></p><p>[2]. <a href="http://mirrors.ustc.edu.cn/help/qtproject.html">http://mirrors.ustc.edu.cn/help/qtproject.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manage Podman Container With Systemd</title>
      <link href="/p/f69dd6c8.html"/>
      <url>/p/f69dd6c8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Problem-Intro"><a href="#1-Problem-Intro" class="headerlink" title="1. Problem Intro"></a>1. Problem Intro</h2><p>Podman与Docker不同，在架构上无需docker daemon控制容器的运行，因此容器的重启需要由systemd接管。</p><h2 id="2-Generate-systemd-service-file"><a href="#2-Generate-systemd-service-file" class="headerlink" title="2. Generate systemd service file"></a>2. Generate systemd service file</h2><pre><code>podman generate systemd --restart-policy always -t 30 -n --new -f web</code></pre><ul><li>–restart-policy: 重启策略</li><li>-t: 超时时间</li><li>-n: 表示使用容器名代替容器id</li><li>-f: 表示生成服务文件</li><li>–new: 每次启动都删除旧容器，启动一个新的容器</li></ul><h2 id="3-Manage-Pod-with-Systemd"><a href="#3-Manage-Pod-with-Systemd" class="headerlink" title="3. Manage Pod with Systemd"></a>3. Manage Pod with Systemd</h2><h3 id="1-Create-a-Pod"><a href="#1-Create-a-Pod" class="headerlink" title="(1). Create a Pod"></a>(1). Create a Pod</h3><pre><code>podman pod create --name POD_NAME</code></pre><h3 id="2-Create-Container-in-Pod"><a href="#2-Create-Container-in-Pod" class="headerlink" title="(2). Create Container in Pod"></a>(2). Create Container in Pod</h3><pre><code>podman container run --pod POD_NAME --name CONTAINER_NAME1podman container run --pod POD_NAME --name CONTAINER_NAME2</code></pre><h3 id="3-Generate-systemd-service-files-for-Pod-and-Containers-inside"><a href="#3-Generate-systemd-service-files-for-Pod-and-Containers-inside" class="headerlink" title="(3). Generate systemd service files for Pod and Containers inside"></a>(3). Generate systemd service files for Pod and Containers inside</h3><pre><code>podman generate systemd -f --new --restart-policy always --name POD_NAME</code></pre><ul><li>-f: 表示生成服务文件</li><li>–new: 每次启动都删除旧容器，启动一个新的容器</li><li>POD_NAME: pod名称</li></ul><h2 id="4-Config-Systemd"><a href="#4-Config-Systemd" class="headerlink" title="4. Config Systemd"></a>4. Config Systemd</h2><h3 id="1-Move-service-file-to-lib-systemd-system"><a href="#1-Move-service-file-to-lib-systemd-system" class="headerlink" title="(1). Move service file to /lib/systemd/system"></a>(1). Move service file to <code>/lib/systemd/system</code></h3><h3 id="2-Restore-SELinux-Label-with-command-below"><a href="#2-Restore-SELinux-Label-with-command-below" class="headerlink" title="(2). Restore SELinux Label with command below"></a>(2). Restore SELinux Label with command below</h3><pre><code>restorecon /lib/systemd/system/container-***.service</code></pre><h3 id="3-Reload-daemon-with-command-below"><a href="#3-Reload-daemon-with-command-below" class="headerlink" title="(3). Reload daemon with command below"></a>(3). Reload daemon with command below</h3><pre><code>systemctl daemon-reload</code></pre><h3 id="4-Set-Service-Enabled"><a href="#4-Set-Service-Enabled" class="headerlink" title="(4). Set Service Enabled"></a>(4). Set Service Enabled</h3><pre><code>systemctl enable container-***.service</code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h2><p>[1]. <a href="https://blog.51cto.com/omaidb/4531846">https://blog.51cto.com/omaidb/4531846</a></p><p>[2]. <a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers#doc-wrapper">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers#doc-wrapper</a></p><p>[3]. <a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/proc_auto-starting-pods-using-systemd_assembly_porting-containers-to-systemd-using-podman">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/proc_auto-starting-pods-using-systemd_assembly_porting-containers-to-systemd-using-podman</a></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Podman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare DDNS with Linux Shell</title>
      <link href="/p/2e4bb4c7.html"/>
      <url>/p/2e4bb4c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>随着IPv6的普及，及公网IPv4的不可获得性，利用IPv6实现外网访问的需求逐渐提高。本文利用Cloudflare DNS API实现IPv6的DDNS。</p><h2 id="2-Environment-Requirements"><a href="#2-Environment-Requirements" class="headerlink" title="2. Environment Requirements"></a>2. Environment Requirements</h2><ul><li>OS: Linux with SHELL(sh), Other Unix maybe.</li><li>HostName: example.com</li><li>HostName for DDNS: ddns.example.com</li></ul><h2 id="3-Steps-to-DDNS"><a href="#3-Steps-to-DDNS" class="headerlink" title="3. Steps to DDNS"></a>3. Steps to DDNS</h2><h3 id="1-获取域名的Zone-ID和API-Key"><a href="#1-获取域名的Zone-ID和API-Key" class="headerlink" title="(1)获取域名的Zone ID和API Key"></a>(1)获取域名的<code>Zone ID</code>和<code>API Key</code></h3><p>在域名控制面板右下方的 API 一栏可直接获取到 Zone ID。</p><p>API Key 则需要点击该栏下方的「Get your API key」，然后输入密码及验证码确认才可获取。</p><p>其实也可以自己新建一个API Key而不使用全局API Key。</p><h3 id="2-添加子域名的AAAA记录"><a href="#2-添加子域名的AAAA记录" class="headerlink" title="(2)添加子域名的AAAA记录"></a>(2)添加子域名的AAAA记录</h3><p>在域名面板的「DNS」选项卡，DNS Records中添加 AAAA 记录，以<code>ddns.example.com</code>为例：</p><ul><li>Name: “ddns”</li><li>IPv6 address: “::1”</li><li>TTL: NULL</li><li>CDN: None</li></ul><h3 id="3-获取AAAA记录ddns-example-com的RecordID"><a href="#3-获取AAAA记录ddns-example-com的RecordID" class="headerlink" title="(3)获取AAAA记录ddns.example.com的RecordID"></a>(3)获取AAAA记录<code>ddns.example.com</code>的RecordID</h3><p>在命令行中执行：</p><pre><code>curl -s -X GET &quot;https://api.cloudflare.com/client/v4/zones/ZONE_ID/dns_records?\type=AAAA&amp;name=DDNS_HOSTNAME&amp;content=127.0.0.1&amp;\page=1&amp;per_page=100&amp;order=type&amp;direction=desc&amp;match=any&quot; \    -H &quot;X-Auth-Email: CF_EMAIL&quot; \    -H &quot;X-Auth-Key: CF_API_KEY&quot; \    -H &quot;Content-Type: application/json&quot; \    | python -m json.tool</code></pre><ul><li>ZONE_ID是第一步中获取的<code>Zone ID</code></li><li>DDNS_HOSTNAME是第二步设置AAAA记录的域名</li><li>CF_EMAIL是Cloudflare账户的注册email地址</li><li>CF_API_KEY是第一步获取的<code>API KEY</code></li></ul><p>成功执行后会返回一段JSON格式的输出，在<code>result</code>中找到域名<code>ddns.example.com</code>对应的<code>&quot;id&quot;</code></p><h3 id="4-创建DDNS脚本"><a href="#4-创建DDNS脚本" class="headerlink" title="(4)创建DDNS脚本"></a>(4)创建DDNS脚本</h3><blockquote><p>A useful Cloudflare Shell API is available on my gitlab: <a href="https://gitlab.dashdreams.com/Haoran.Qi/RaspberryPi/-/blob/master/DDNS/cfapi.sh">gitlab.dashdreams.com</a>, all based on scripts above.</p></blockquote><h3 id="5-运行脚本"><a href="#5-运行脚本" class="headerlink" title="(5)运行脚本"></a>(5)运行脚本</h3><p>为脚本添加执行权限<code>sudo chmod +x ddns.sh</code></p><p>运行脚本<code>sudo ./ddns.sh</code></p><h3 id="6-添加定时运行"><a href="#6-添加定时运行" class="headerlink" title="(6)添加定时运行"></a>(6)添加定时运行</h3><ul><li>使用crontab</li><li>使用systemd timer（参考本博客）<a href="https://dashdream.github.io/p/dd7b2a00.html">Systemd-Timer</a></li></ul><h2 id="Ref："><a href="#Ref：" class="headerlink" title="Ref："></a>Ref：</h2><p>[1].<a href="https://zhuanlan.zhihu.com/p/69379645">https://zhuanlan.zhihu.com/p/69379645</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP Address List Distribution Based on RouterOS and Openwrt</title>
      <link href="/p/f6c5fa7b.html"/>
      <url>/p/f6c5fa7b.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-Brief"><a href="#0-Brief" class="headerlink" title="0. Brief"></a>0. Brief</h2><p>IP address list distribution with CNIP.</p><p>Configurations are based on Mikrotik RouterOS 7.6 .</p><h2 id="1-Requirement"><a href="#1-Requirement" class="headerlink" title="1. Requirement"></a>1. Requirement</h2><p>A bypass routre with Openwrt required.</p><h2 id="2-Get-CN-IP-Address-List"><a href="#2-Get-CN-IP-Address-List" class="headerlink" title="2. Get CN IP Address List"></a>2. Get CN IP Address List</h2><p>CN IP address list can be found from</p><p><a href="https://ispip.clang.cn/all_cn_cidr.txt">Clang.CN</a></p><p><a href="https://github.com/17mon/china_ip_list">IPIP</a></p><p><a href="https://github.com/metowolf/iplist">RealIPDatabase</a></p><p>It’s possible to get CN IP list by running scripts below on linux:</p><pre><code>curl &#39;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&#39;|\grep ipv6 | grep CN | awk -F\| \&#39;&#123; printf(&quot;%s/%d\n&quot;, $4, 32-log($5)/log(2)) &#125;&#39; | \sed -e &#39;s/^/add address=/g&#39; -e &#39;s/$/ list=CNIP/g&#39;|\sed -e $&#39;1i\\\n/ipv6 firewall address-list&#39; \  -e $&#39;1i\\\nremove [/ipv6 firewall address-list find list=CNIP]&#39;|\  sed &#39;$a /file remove CNIPv6.rsc&#39;&gt;CNIPv6.rsccurl &#39;http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest&#39;|\grep ipv4 | grep CN | awk -F\| \&#39;&#123; printf(&quot;%s/%d\n&quot;, $4, 32-log($5)/log(2)) &#125;&#39; |\ sed -e &#39;s/^/add address=/g&#39; -e &#39;s/$/ list=CNIP/g&#39; \  -e &#39;s/$/ comment=&quot;CNIP&quot;/g&#39; |\  sed -e $&#39;1i\\\n/ip firewall address-list&#39; \  -e $&#39;1i\\\nremove [/ip firewall address-list find list=CNIP]&#39; |\  sed &#39;$a \/&#39; |sed &#39;$a /file remove CNIPv4.rsc&#39;&gt;CNIPv4.rsc</code></pre><blockquote><p>Contains both IPv6 and IPv4 addresses.</p></blockquote><p>The address list may look like this:</p><pre><code>/ip firewall address-listadd list=CNIP address=x.x.x.x/xxadd list=CNIP address=x.x.x.x/xx.........add list=CNIP address=x.x.x.x/xx</code></pre><h2 id="3-Distribution-Configuration"><a href="#3-Distribution-Configuration" class="headerlink" title="3. Distribution Configuration"></a>3. Distribution Configuration</h2><h3 id="1-Import-CN-IP-List"><a href="#1-Import-CN-IP-List" class="headerlink" title="(1). Import CN IP List"></a>(1). Import CN IP List</h3><p>Open WinBox, and upload CNIPv4.rsc to RouterOS, than open <code>Terminal</code>, and run <code>import CNIPv4.rsc</code>.</p><h3 id="2-Add-Route-Table"><a href="#2-Add-Route-Table" class="headerlink" title="(2). Add Route Table"></a>(2). Add Route Table</h3><p>In <code>Terminal</code> run command: <code>/routing/tables/add name=OP fib</code></p><h3 id="3-Add-Proxy-Device-List"><a href="#3-Add-Proxy-Device-List" class="headerlink" title="(3). Add Proxy Device List"></a>(3). Add Proxy Device List</h3><p>Add Proxy List in <code>Firewall</code>:</p><pre><code>/ip/firewall/address-list/add name=proxy address=192.168.1.1-192.168.1.200</code></pre><blockquote><p>We take IP address range 192.168.1.1–192.168.1.200 to proxy list.</p></blockquote><h3 id="4-Mangle-non-CN-IP-Connections"><a href="#4-Mangle-non-CN-IP-Connections" class="headerlink" title="(4). Mangle non-CN IP Connections"></a>(4). Mangle non-CN IP Connections</h3><p>Mark Non-CN IP destnation address</p><pre><code>add action=mark-routing chain=prerouting comment=&quot;ProxyRoute&quot; \    src-address=proxy dst-address=!CNIP dst-address-type=!local \    new-routing-mark=OP passthrough=yes </code></pre><p>Add another rule to accept openwrt’s flow</p><pre><code>add action=accept chain=prerouting comment=&quot;BypassOP&quot; \    src-address=192.168.1.254  </code></pre><blockquote><p>Assume openwrt’s local ip is <code>192.168.1.254</code></p></blockquote><h3 id="5-Config-Route-Table"><a href="#5-Config-Route-Table" class="headerlink" title="(5). Config Route Table"></a>(5). Config Route Table</h3><p>Config route table to openwrt:</p><pre><code>/ip/route/add dst-address=0.0.0.0 gateway=192.168.1.254 \    check-getway=ping routing-table=OP distance=1 \    scope=30 target-scope=10</code></pre><h3 id="6-Change-PPPOE’s-distance"><a href="#6-Change-PPPOE’s-distance" class="headerlink" title="(6). Change PPPOE’s distance"></a>(6). Change PPPOE’s distance</h3><p>Change PPPOE’s distance to 2:</p><pre><code>/interface/pppoe-client/set pppoe-CMCC default-route-distance=2</code></pre><h2 id="4-Change-Distribution-if-Bypass-Router-Down"><a href="#4-Change-Distribution-if-Bypass-Router-Down" class="headerlink" title="4. Change Distribution if Bypass Router Down"></a>4. Change Distribution if Bypass Router Down</h2><h3 id="1-Purpose"><a href="#1-Purpose" class="headerlink" title="(1). Purpose"></a>(1). Purpose</h3><ul><li>Shutdown distribution when openwrt down</li><li>Turn distribution when openwrt up</li></ul><h3 id="2-Config-NetWatch"><a href="#2-Config-NetWatch" class="headerlink" title="(2). Config NetWatch"></a>(2). Config NetWatch</h3><pre><code>/tool/netwatch/add host=192.168.1.254 type=simple interval=60 \    up-script=OPUP.rsc down-script=OPDOWN.rsc</code></pre><h2 id="3-Edit-Up-amp-Down-Scripts"><a href="#3-Edit-Up-amp-Down-Scripts" class="headerlink" title="(3). Edit Up &amp; Down Scripts"></a>(3). Edit Up &amp; Down Scripts</h2><p>Up Script:</p><pre><code>add dont-require-permissions=yes name=OPUP.rsc owner=admin policy=\    ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source=&quot;/\    ip firewall mangle enable number=???\r\    \n/ip firewall mangle enable number=???\r\    \n/ip route enable number=0\r\    \n/ip/dns/cache/flush&quot;</code></pre><p>Down Script:</p><pre><code>add dont-require-permissions=yes name=OPDOWN.rsc owner=admin policy=\    ftp,reboot,read,write,policy,test,password,sniff,sensitive,romon source=&quot;/\    ip firewall mangle disable number=???\r\    \n/ip firewall mangle disable number=???\r\    \n/ip route disable number=0\r\    \n/ip/dns/cache/flush&quot;</code></pre><blockquote><p><code>???</code> is index number of mangle rules set in <a href="IP-Address-List-Distribution-Based-on-RouterOS-and-Openwrt.md#4-mangle-non-cn-ip-connections">MangleRules</a></p></blockquote><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://www.shawnleetttt.cyou/posts/71e7c44b/">https://www.shawnleetttt.cyou/posts/71e7c44b/</a></p><p>[2]. <a href="https://idndx.com/high-availability-when-split-routing-using-routeros-and-raspberrypi/">https://idndx.com/high-availability-when-split-routing-using-routeros-and-raspberrypi/</a></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6 Configure on Mikrotik RouterOS v7.x</title>
      <link href="/p/c53ee424.html"/>
      <url>/p/c53ee424.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-Brief"><a href="#0-Brief" class="headerlink" title="0. Brief"></a>0. Brief</h2><p>IPv6 configuration on Mikrotik RouterOS is much more complicated than Merlin on ASUS. We are going to config IPv6 in this aritical.</p><p>Configurations are based on Mikrotik RouterOS 7.6 .</p><h2 id="1-Configure-DHCPv6-Client"><a href="#1-Configure-DHCPv6-Client" class="headerlink" title="1. Configure DHCPv6 Client"></a>1. Configure DHCPv6 Client</h2><p>Login Terminal in RouterOS, with following commands:</p><pre><code># Accept ISP RA, Get IPv6 Address with SLAAC/ipv6 settings set accept-router-advertisements=yes# Configure DHCPv6 client:# - Add default route: yes# - WAN interface: pppoe-ether1# - IPv6 address pool: IPv6 (You can change to whatever you want)# - Prefix length for DHCPv6 server&#39;s offering cascading routers: 60# - Request LAN prefix from ISP/ipv6 dhcp-client add add-default-route=no interface=pppoe-ether1 \     pool-name=IPv6 pool-prefix-length=60 \    request=prefix</code></pre><p>CMCC in Nanjing, Jiangsu provide &#x2F;60 prefix, if prefix length less than &#x2F;63, it’s impossible to use DHCPv6.</p><h2 id="2-Add-necessary-IPv6-firewall-rule"><a href="#2-Add-necessary-IPv6-firewall-rule" class="headerlink" title="2. Add necessary IPv6 firewall rule"></a>2. Add necessary IPv6 firewall rule</h2><pre><code># Accept DHCPv6 client prefix delegation/ipv6 firewall filter add action=accept chain=input \    comment=&quot;Accept DHCPv6 client prefix delegation&quot; \     dst-port=546 protocol=udp src-address=fe80::/10</code></pre><blockquote><p>This rule is default, if you configured your router with default script.</p></blockquote><h2 id="3-Assign-IPv6-address-to-interfaces"><a href="#3-Assign-IPv6-address-to-interfaces" class="headerlink" title="3. Assign IPv6 address to interfaces"></a>3. Assign IPv6 address to interfaces</h2><pre><code>/ipv6 address add address=::1 from-pool=IPv6 interface=bridge</code></pre><h2 id="4-Configure-DHCPv6-PD-server"><a href="#4-Configure-DHCPv6-PD-server" class="headerlink" title="4. Configure DHCPv6-PD server"></a>4. Configure DHCPv6-PD server</h2><pre><code># Delegate IPv6 addresses from pool `delegation`# Lease is valid for 1 day/ipv6 dhcp-server add address-pool=IPv6 \    interface=bridge lease-time=7d name=Home-IPv6</code></pre><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://wu.renjie.im/blog/network/ros-dhcpv6/zh-cn/">https://wu.renjie.im/blog/network/ros-dhcpv6/zh-cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Router </tag>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mount Disk in Linux on Boot</title>
      <link href="/p/a9384d90.html"/>
      <url>/p/a9384d90.html</url>
      
        <content type="html"><![CDATA[<h2 id="Bref"><a href="#Bref" class="headerlink" title="Bref"></a>Bref</h2><p>开机自动挂载硬盘</p><h2 id="1-Check-Partition"><a href="#1-Check-Partition" class="headerlink" title="1. Check Partition."></a>1. Check Partition.</h2><p>在挂载磁盘前，需要知道每个磁盘的路径或<code>UUID</code>，此时主要依靠<code>fdisk</code>和<code>blkid</code>两个指令，前一个指令获取分区信息，后一个指令获取<code>Block device</code>块设备的属性。</p><pre><code>$ sudo blkid/dev/sda1: LABEL=&quot;Win10&quot; UUID=&quot;C4A0E65EA0E65708&quot; TYPE=&quot;ntfs&quot; PARTUUID=&quot;6190c592-01&quot;/dev/sda2: UUID=&quot;AE3C137D3C133FAF&quot; TYPE=&quot;ntfs&quot; PARTUUID=&quot;6190c592-02&quot;/dev/sdb1: LABEL=&quot;Apps&quot; UUID=&quot;0000678400004823&quot; TYPE=&quot;ntfs&quot; PARTLABEL=&quot;Basic data partition&quot; PARTUUID=&quot;45ed07d2-c9e3-4167-8868-3e33f62784e1&quot;/dev/sdb2: LABEL=&quot;Data&quot; UUID=&quot;0000678400004823&quot; TYPE=&quot;ntfs&quot; PARTLABEL=&quot;Basic data partition&quot; PARTUUID=&quot;2a8b4bf1-8357-4d65-bed4-f73f01b96431&quot;/dev/sdb3: LABEL=&quot;Backup&quot; UUID=&quot;0000678400004823&quot; TYPE=&quot;ntfs&quot; PARTLABEL=&quot;Basic data partition&quot; PARTUUID=&quot;a7187083-2820-4eef-83ff-05d8899879a2&quot;</code></pre><p>从上面的输出结果就可以将磁盘对应到具体的块设备路径<code>/dev/sdax</code>，因为电脑含两块磁盘，所以包含<code>sda</code>及<code>sdb</code>。这里的块设备路径和<code>UUID</code>会将下面的配置参数中用到。</p><h2 id="2-Temporary-Mount"><a href="#2-Temporary-Mount" class="headerlink" title="2. Temporary Mount"></a>2. Temporary Mount</h2><p>对于临时解决方案，可以使用以下指令将<code>/dev/sda1</code>挂载到<code>/mnt/c</code>目录</p><pre><code>sudo mkdir /mnt/csudo mount -t ntfs /dev/sda1 /mnt/c</code></pre><h2 id="3-Auto-Mount-on-Boot"><a href="#3-Auto-Mount-on-Boot" class="headerlink" title="3. Auto Mount on Boot"></a>3. Auto Mount on Boot</h2><h3 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="(1). 修改配置文件"></a>(1). 修改配置文件</h3><p>开机启动后自动挂载的方案就需要修改配置文件<code>/etc/fstab</code>,使用编辑器打开后，按以下格式添加新的挂载项</p><pre><code>$ cat /etc/fstab# /etc/fstab: static file system information.## Use &#39;blkid&#39; to print the universally unique identifier for a# device; this may be used with UUID= as a more robust way to name devices# that works even if disks are added and removed. See fstab(5).## &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;# / was on /dev/sdb5 during installationUUID=4d2e5a83-d9fe-47bb-aa02-fee9ac8535e3 /               ext4    errors=remount-ro 0       1# /boot was on /dev/sdb6 during installationUUID=9b521dc2-ad85-4ca6-bb8b-f285b312aa49 /boot           ext4    defaults        0       2# /home was on /dev/sdb7 during installationUUID=f6b796dd-9e59-4f79-b70a-c2c8e5977163 /home           ext4    defaults        0       2# swap was on /dev/sdb4 during installationUUID=9430ea0e-7ff9-4167-9bf7-1f3e08d26d34 none            swap    sw              0       0# /mnt/Data was on /dev/sdb2 during installation/dev/sdb2                                /mnt/Data        ntfs    defaults        0       2# /mnt/Backup was on /dev/sdb3 during installation/dev/sdb3                                /mnt/Backup      ntfs    defaults        0       2</code></pre><p>后面两项就是用来挂载磁盘的，当然每行前面的<code>/dev/sdbx</code>也可以换成<code>UUID=xxxxx</code>，但是由于这两个磁盘的<code>UUID</code>一致，所以可能会有问题，也许可以使用<code>blkid</code>输出的<code>PARTUUID</code>。</p><h3 id="2-挂载测试"><a href="#2-挂载测试" class="headerlink" title="(2). 挂载测试"></a>(2). 挂载测试</h3><pre><code>sudo mkdir /mnt/&#123;Data,Backup&#125;sudo mount -a</code></pre><h2 id="Mount-SMB-x2F-CIFS"><a href="#Mount-SMB-x2F-CIFS" class="headerlink" title="Mount SMB&#x2F;CIFS"></a>Mount SMB&#x2F;CIFS</h2><p>利用systemd 开机自动挂载smb</p><pre><code># This is a sample service script to mount CIFS/SAMBA shares.# Please read carefully the comments in this file. For production usage# you can remove all comments (lines beginning with &quot;#&quot;) from this file.[Unit]# The description should be used to explain what this servicefile is forDescription=nas cifs mount home# if we do network mounts like here we *require* &#39;network-online.service&#39;# which checks if the network is onlineRequires=network-online.target# our scripts must start *after* &#39;network-online.service&#39;, on timeout and if# &#39;network-online.service&#39; fails we can not mount and this scripts fails tooAfter=network-online.target# usually we mount networks shares because we want they avaible *before* XBMC starts.# so XBMC has access to this mounts from beginning. Note: this slows down the boot!#Before=kodi.service[Mount]# The share we want mountWhat=//IP_ADDRESS/Data# Where we want mount this shareWhere=/PATH_TO_MOUNT# Any options you usually use with the &quot;-o&quot; parameter in the mount commandOptions=username=haoran.qi,password=password,rw,vers=3.0,dir_mode=0775,file_mode=0664# filesystem typeType=cifs[Install]WantedBy=multi-user.target</code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h2><p>[1]. <a href="https://www.litreily.top/2019/02/17/mount/">https://www.litreily.top/2019/02/17/mount/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM CPP QT Compiling Environment with VSCode</title>
      <link href="/p/6416e0ea.html"/>
      <url>/p/6416e0ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Pre-requirements"><a href="#1-Pre-requirements" class="headerlink" title="1. Pre-requirements"></a>1. Pre-requirements</h2><h3 id="1-With-Visual-Studio-Code-installed"><a href="#1-With-Visual-Studio-Code-installed" class="headerlink" title="(1). With Visual Studio Code installed"></a>(1). With Visual Studio Code installed</h3><p>First of all, the latest version of VSCode should be installed on one PC running Windows&#x2F;Linux&#x2F;MacOS.</p><p>Secondly, the following Extensions should be installed:</p><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote-SSH</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh-edit">Remote-SSH:Editing-Configuration-Files</a></p><h3 id="2-With-VMWare-Workstation-installed-including-a-Virtual-machine-configured"><a href="#2-With-VMWare-Workstation-installed-including-a-Virtual-machine-configured" class="headerlink" title="(2). With VMWare Workstation installed including a Virtual machine configured."></a>(2). With VMWare Workstation installed including a Virtual machine configured.</h3><p>Firstly, the virtual machine should run properly.</p><p>Also, the network goes OK (PING from host to the VMs, and the reverse).</p><h2 id="2-Connect-the-Remote-Environment"><a href="#2-Connect-the-Remote-Environment" class="headerlink" title="2. Connect the Remote Environment"></a>2. Connect the Remote Environment</h2><h3 id="1-Configure-a-“SSH-TARGETS”"><a href="#1-Configure-a-“SSH-TARGETS”" class="headerlink" title="(1). Configure a “SSH TARGETS”"></a>(1). Configure a “SSH TARGETS”</h3><p>Open “REMOTE EXPLORER” window -&gt; “Add NEW”, and type the following command in the dialog:</p><p><code>ssh USER@192.xxx.xxx.xxx -A</code></p><p>Type in the password and leave the popup options default.</p><blockquote><p><code>USER</code> is the user of VMs’ username</p><p><code>192.xxx.xxx.xxx</code> is the IP address of the VM.</p></blockquote><p>Then choose a proper path as the compiling default path, the <code>Home</code> path is recommended.</p><h3 id="2-Upload-the-Source-Code-to-the-virtual-machine"><a href="#2-Upload-the-Source-Code-to-the-virtual-machine" class="headerlink" title="(2). Upload the Source Code to the virtual machine"></a>(2). Upload the Source Code to the virtual machine</h3><p>In this step, many tools can be applyed, including <code>scp、sftp、xshell</code>.</p><blockquote><p>ATTENTION! You should upload the code with a proper user to avoid the permission error.</p></blockquote><h2 id="3-VSCode-Configuration"><a href="#3-VSCode-Configuration" class="headerlink" title="3.VSCode Configuration"></a>3.VSCode Configuration</h2><p>Step1. Open the path of source code in VSCode.</p><p>Step2. Add a new directory named <code>.vscode</code> if no such directory exist.</p><h3 id="1-Cpp-Configuration"><a href="#1-Cpp-Configuration" class="headerlink" title="(1). Cpp Configuration"></a>(1). Cpp Configuration</h3><p>Add <code>c_cpp_properties.json</code> in the <code>.vscode</code> folder.<br>The content as follow:</p><pre><code>&#123;    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;RHEL7.2-&gt;Linux&quot;,            &quot;includePath&quot;: [                &quot;$&#123;workspaceFolder&#125;/**&quot;,                &quot;/opt/scadacom/current/**&quot;            ],            &quot;forcedInclude&quot;: [],            &quot;defines&quot;: [],            &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;,            &quot;cStandard&quot;: &quot;c11&quot;,            &quot;cppStandard&quot;: &quot;c++11&quot;,            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;,            &quot;compilerArgs&quot;: [ //Release                &quot;-std=c++11&quot;,                &quot;-w&quot;,                &quot;-O2&quot;,                &quot;-pipe&quot;,                &quot;-m64&quot;,                &quot;-D_REENTRANT&quot;,                &quot;-DQT_SHARED&quot;,                &quot;-DQT_NO_DEBUG_OUTPUT&quot;,                &quot;-DQT_NO_DEBUG&quot;,                &quot;-DQT_GUI_LIB&quot;,                &quot;-DQT_NETWORK_LIB&quot;,                &quot;-DQT_CORE_LIB&quot;,                &quot;-DQT_SHARED&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;RHEL7.2-WindowsLocal&quot;,            &quot;includePath&quot;: [                &quot;$&#123;workspaceFolder&#125;/**&quot;,                &quot;~/Documents/Codes/include/RHEL7.2S5.8.10/**&quot;,                &quot;C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/x86_64-w64-mingw32/include&quot;            ],            &quot;forcedInclude&quot;: [],            &quot;defines&quot;: [],            &quot;compilerPath&quot;: &quot;C:/ProgramData/chocolatey/bin/g++.exe&quot;,            &quot;cStandard&quot;: &quot;c11&quot;,            &quot;cppStandard&quot;: &quot;c++11&quot;,            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;,            &quot;compilerArgs&quot;: [ //Release                &quot;-std=c++11&quot;,                &quot;-w&quot;,                &quot;-O2&quot;,                &quot;-pipe&quot;,                &quot;-m64&quot;,                &quot;-D_REENTRANT&quot;,                &quot;-DQT_SHARED&quot;,                &quot;-DQT_NO_DEBUG_OUTPUT&quot;,                &quot;-DQT_NO_DEBUG&quot;,                &quot;-DQT_GUI_LIB&quot;,                &quot;-DQT_NETWORK_LIB&quot;,                &quot;-DQT_CORE_LIB&quot;,                &quot;-DQT_SHARED&quot;            ],            &quot;mergeConfigurations&quot;: false,            &quot;browse&quot;: &#123;                &quot;path&quot;: [                    &quot;$&#123;workspaceFolder&#125;/**&quot;,                    &quot;~/Documents/Codes/include/RHEL7.2S5.8.10/**&quot;                ],                &quot;limitSymbolsToIncludedHeaders&quot;: true            &#125;        &#125;    ],    &quot;version&quot;: 4&#125;</code></pre><h3 id="2-Building-Task-Configuration"><a href="#2-Building-Task-Configuration" class="headerlink" title="(2). Building Task Configuration"></a>(2). Building Task Configuration</h3><p>Qmake and g++ compile configuration need configured in a <code>tasks.json</code> file.<br>The content as follow:</p><pre><code>&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  // &quot;windows&quot;: &#123;  //   &quot;options&quot;: &#123;  //     &quot;shell&quot;: &#123;  //       &quot;executable&quot;: &quot;bash.exe&quot;,  //       &quot;args&quot;: [&quot;-c&quot;]  //     &#125;  //   &#125;  // &#125;,  &quot;tasks&quot;: [    &#123;      &quot;label&quot;: &quot;Qmake&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;/usr/local/Trolltech/Qt-4.8.4/bin/qmake&quot;,      &quot;args&quot;: [],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,    &#123;      &quot;label&quot;: &quot;Clean&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;make&quot;,      &quot;args&quot;: [        &quot;clean&quot;      ],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,    &#123;      &quot;label&quot;: &quot;MakeCompile&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;dependsOrder&quot;: &quot;sequence&quot;,      &quot;dependsOn&quot;: [        &quot;Clean&quot;,        &quot;Qmake&quot;      ],      &quot;command&quot;: &quot;/usr/bin/make&quot;,      &quot;args&quot;: [      ],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        // &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,  ]&#125;</code></pre><p>After task configured, you can launch build task from vscode edit window by press <code>CTRL</code>+<code>Shift</code>+<code>B</code>.</p><p>The manual as follow:</p><blockquote><p><code>Qmake</code>: runing command <code>/usr/local/Trolltech/Qt-4.8.4/bin/qmake</code></p><p><code>Release</code>: running command <code>/usr/bin/make -f Makefile.Release</code> after running <code>Qmake</code> automatically.</p><p><code>Debug</code>: running command <code>/usr/bin/make -f Makefile.Debug</code> after running <code>Qmake</code> automatically.</p><p><code>Clean</code>: delete files generate by Qmake and g++</p><p><code>Clean-Release</code>: running command <code>make -f Makefile.Release clean</code></p><p><code>Clean-Debug</code>: running command <code>make -f Makefile.Debug clean</code></p></blockquote><h3 id="3-Debug-Configuration"><a href="#3-Debug-Configuration" class="headerlink" title="(3). Debug Configuration"></a>(3). Debug Configuration</h3><p>GNU gdb tool will be used as the debug tool, you can debug the code with such <code>launch.json</code> configuration:</p><pre><code>&#123;  &quot;version&quot;: &quot;0.2.0&quot;,  &quot;configurations&quot;: [    &#123;      &quot;name&quot;: &quot;QT-CPPGDB&quot;,      &quot;type&quot;: &quot;cppdbg&quot;,      &quot;request&quot;: &quot;launch&quot;,      &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/wg_modbus_ats&quot;,      &quot;args&quot;: [],      &quot;stopAtEntry&quot;: false,      &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/debug/&quot;,      &quot;environment&quot;: [],      //&quot;symbolSearchPath&quot;: &quot;C:\\Symbols&quot;,      &quot;externalConsole&quot;: false,      &quot;linux&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;windows&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;osx&quot;: &#123;         &quot;miDebuggerPath&quot;: &quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi&quot;,         &quot;MIMode&quot;: &quot;lldb&quot;       &#125;,      // &quot;logging&quot;: &#123;      //     &quot;moduleLoad&quot;: false,      //     &quot;trace&quot;: true      //  &#125;,      &quot;visualizerFile&quot;: &quot;my.natvis&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;CMake-CPPGDB&quot;,      &quot;type&quot;: &quot;cppdbg&quot;,      &quot;request&quot;: &quot;launch&quot;,      &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/build/$&#123;workspaceFolderBasename&#125;&quot;,       &quot;args&quot;: [],      &quot;stopAtEntry&quot;: false,      &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/build&quot;,      &quot;environment&quot;: [],      //&quot;symbolSearchPath&quot;: &quot;C:\\Symbols&quot;,      &quot;externalConsole&quot;: false,      &quot;linux&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;windows&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;osx&quot;: &#123;         &quot;miDebuggerPath&quot;: &quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi&quot;,         &quot;MIMode&quot;: &quot;lldb&quot;       &#125;,      // &quot;logging&quot;: &#123;      //     &quot;moduleLoad&quot;: false,      //     &quot;trace&quot;: true      //  &#125;,      &quot;visualizerFile&quot;: &quot;my.natvis&quot;    &#125;  ]&#125;</code></pre><p>However, the debug can not change the target automatically, the debug flow should be as follow:</p><p>Running <code>Clean</code> or <code>Clean-Debug</code> -&gt; Running <code>Debug</code> -&gt; Change <code>TARGETS</code> -&gt; Set BreakPoint -&gt; press <code>F5</code>.</p><blockquote><p>The <code>TARGETS</code> is the executable file generate by g++.</p></blockquote><p>All Configuration files can be found <a href="https://gitlab.dashdreams.com/Haoran.Qi/include/-/tree/master/.vscode">Here</a>.</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>[1]. <a href="https://blog.dashdreams.com/">https://blog.dashdreams.com</a></p><p>[2]. <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++</a></p><p>[3]. <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote-SSH</a></p><p>[4]. <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh-edit">Remote-SSH:Editing-Configuration-Files</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The-CPP </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode C/CPP Environment</title>
      <link href="/p/a638d5e2.html"/>
      <url>/p/a638d5e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Install-MinGW"><a href="#1-Install-MinGW" class="headerlink" title="1. Install MinGW"></a>1. Install MinGW</h2><p>具体参考<a href="https://www.runoob.com/cplusplus/cpp-environment-setup.html">C++ 环境设置</a></p><h2 id="2-Configure-VSCode"><a href="#2-Configure-VSCode" class="headerlink" title="2. Configure VSCode"></a>2. Configure VSCode</h2><p>在源代码文件夹下创建一个<code>.vscode</code>文件夹，里面包含<code>c_cpp_properties.json</code>,<code>launch.json</code>,<code>tasks.json</code>，各文件的具体含义可以参考<a href="https://zhuanlan.zhihu.com/p/92175757">VScode tasks.json和launch.json的设置</a>，<a href="https://code.visualstudio.com/docs/editor/variables-reference#_predefined-variables">VSCode预定义变量</a></p><h3 id="1-c-cpp-properties-json"><a href="#1-c-cpp-properties-json" class="headerlink" title="(1). c_cpp_properties.json"></a>(1). <code>c_cpp_properties.json</code></h3><p>需要将MinGW路径更改为实际路径</p><pre><code>&#123;    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;RHEL7.2-&gt;Linux&quot;,            &quot;includePath&quot;: [                &quot;$&#123;workspaceFolder&#125;/**&quot;,                &quot;/opt/scadacom/current/**&quot;            ],            &quot;forcedInclude&quot;: [],            &quot;defines&quot;: [],            &quot;compilerPath&quot;: &quot;/usr/bin/g++&quot;,            &quot;cStandard&quot;: &quot;c11&quot;,            &quot;cppStandard&quot;: &quot;c++11&quot;,            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;,            &quot;compilerArgs&quot;: [ //Release                &quot;-std=c++11&quot;,                &quot;-w&quot;,                &quot;-O2&quot;,                &quot;-pipe&quot;,                &quot;-m64&quot;,                &quot;-D_REENTRANT&quot;,                &quot;-DQT_SHARED&quot;,                &quot;-DQT_NO_DEBUG_OUTPUT&quot;,                &quot;-DQT_NO_DEBUG&quot;,                &quot;-DQT_GUI_LIB&quot;,                &quot;-DQT_NETWORK_LIB&quot;,                &quot;-DQT_CORE_LIB&quot;,                &quot;-DQT_SHARED&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;RHEL7.2-WindowsLocal&quot;,            &quot;includePath&quot;: [                &quot;$&#123;workspaceFolder&#125;/**&quot;,                &quot;~/Documents/Codes/include/RHEL7.2S5.8.10/**&quot;,                &quot;C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/x86_64-w64-mingw32/include&quot;            ],            &quot;forcedInclude&quot;: [],            &quot;defines&quot;: [],            &quot;compilerPath&quot;: &quot;C:/ProgramData/chocolatey/bin/g++.exe&quot;,            &quot;cStandard&quot;: &quot;c11&quot;,            &quot;cppStandard&quot;: &quot;c++11&quot;,            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;,            &quot;compilerArgs&quot;: [ //Release                &quot;-std=c++11&quot;,                &quot;-w&quot;,                &quot;-O2&quot;,                &quot;-pipe&quot;,                &quot;-m64&quot;,                &quot;-D_REENTRANT&quot;,                &quot;-DQT_SHARED&quot;,                &quot;-DQT_NO_DEBUG_OUTPUT&quot;,                &quot;-DQT_NO_DEBUG&quot;,                &quot;-DQT_GUI_LIB&quot;,                &quot;-DQT_NETWORK_LIB&quot;,                &quot;-DQT_CORE_LIB&quot;,                &quot;-DQT_SHARED&quot;            ],            &quot;mergeConfigurations&quot;: false,            &quot;browse&quot;: &#123;                &quot;path&quot;: [                    &quot;$&#123;workspaceFolder&#125;/**&quot;,                    &quot;~/Documents/Codes/include/RHEL7.2S5.8.10/**&quot;                ],                &quot;limitSymbolsToIncludedHeaders&quot;: true            &#125;        &#125;    ],    &quot;version&quot;: 4&#125;</code></pre><h3 id="2-launch-json"><a href="#2-launch-json" class="headerlink" title="(2). launch.json"></a>(2). <code>launch.json</code></h3><p>需要将MinGW路径更改为实际路径</p><pre><code>&#123;  &quot;version&quot;: &quot;0.2.0&quot;,  &quot;configurations&quot;: [    &#123;      &quot;name&quot;: &quot;QT-CPPGDB&quot;,      &quot;type&quot;: &quot;cppdbg&quot;,      &quot;request&quot;: &quot;launch&quot;,      &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/wg_modbus_ats&quot;,      &quot;args&quot;: [],      &quot;stopAtEntry&quot;: false,      &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/debug/&quot;,      &quot;environment&quot;: [],      //&quot;symbolSearchPath&quot;: &quot;C:\\Symbols&quot;,      &quot;externalConsole&quot;: false,      &quot;linux&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;windows&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;osx&quot;: &#123;         &quot;miDebuggerPath&quot;: &quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi&quot;,         &quot;MIMode&quot;: &quot;lldb&quot;       &#125;,      // &quot;logging&quot;: &#123;      //     &quot;moduleLoad&quot;: false,      //     &quot;trace&quot;: true      //  &#125;,      &quot;visualizerFile&quot;: &quot;my.natvis&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;CMake-CPPGDB&quot;,      &quot;type&quot;: &quot;cppdbg&quot;,      &quot;request&quot;: &quot;launch&quot;,      &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/build/$&#123;workspaceFolderBasename&#125;&quot;,       &quot;args&quot;: [],      &quot;stopAtEntry&quot;: false,      &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;/build&quot;,      &quot;environment&quot;: [],      //&quot;symbolSearchPath&quot;: &quot;C:\\Symbols&quot;,      &quot;externalConsole&quot;: false,      &quot;linux&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;windows&quot;: &#123;        &quot;MIMode&quot;: &quot;gdb&quot;,        &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;,        &quot;setupCommands&quot;: [          &#123;            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,            &quot;text&quot;: &quot;-enable-pretty-printing&quot;,            &quot;ignoreFailures&quot;: true          &#125;        ]      &#125;,      &quot;osx&quot;: &#123;         &quot;miDebuggerPath&quot;: &quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi&quot;,         &quot;MIMode&quot;: &quot;lldb&quot;       &#125;,      // &quot;logging&quot;: &#123;      //     &quot;moduleLoad&quot;: false,      //     &quot;trace&quot;: true      //  &#125;,      &quot;visualizerFile&quot;: &quot;my.natvis&quot;    &#125;  ]&#125;</code></pre><h3 id="3-tasks-json"><a href="#3-tasks-json" class="headerlink" title="(3). tasks.json"></a>(3). tasks.json</h3><p>该文件直接复制即可</p><pre><code>&#123;  &quot;version&quot;: &quot;2.0.0&quot;,  // &quot;windows&quot;: &#123;  //   &quot;options&quot;: &#123;  //     &quot;shell&quot;: &#123;  //       &quot;executable&quot;: &quot;bash.exe&quot;,  //       &quot;args&quot;: [&quot;-c&quot;]  //     &#125;  //   &#125;  // &#125;,  &quot;tasks&quot;: [    &#123;      &quot;label&quot;: &quot;Qmake&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;/usr/local/Trolltech/Qt-4.8.4/bin/qmake&quot;,      &quot;args&quot;: [],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,    &#123;      &quot;label&quot;: &quot;Clean&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;command&quot;: &quot;make&quot;,      &quot;args&quot;: [        &quot;clean&quot;      ],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,    &#123;      &quot;label&quot;: &quot;MakeCompile&quot;,      &quot;type&quot;: &quot;shell&quot;,      &quot;dependsOrder&quot;: &quot;sequence&quot;,      &quot;dependsOn&quot;: [        &quot;Clean&quot;,        &quot;Qmake&quot;      ],      &quot;command&quot;: &quot;/usr/bin/make&quot;,      &quot;args&quot;: [      ],      &quot;group&quot;: &quot;build&quot;,      &quot;presentation&quot;: &#123;        // &quot;reveal&quot;: &quot;silent&quot;,        &quot;clear&quot;: true      &#125;    &#125;,  ]&#125;</code></pre><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>[1]. <a href="https://www.runoob.com/cplusplus/cpp-environment-setup.html">https://www.runoob.com/cplusplus/cpp-environment-setup.html</a></p><p>[2]. <a href="https://code.visualstudio.com/docs/editor/variables-reference#_predefined-variables">https://code.visualstudio.com/docs/editor/variables-reference#_predefined-variables</a></p><p>[3]. <a href="https://zhuanlan.zhihu.com/p/92175757">https://zhuanlan.zhihu.com/p/92175757</a></p><p>[4]. <a href="https://www.cnblogs.com/bpf-1024/p/11597000.html">https://www.cnblogs.com/bpf-1024/p/11597000.html</a></p><p>[5]. <a href="https://zhuanlan.zhihu.com/p/87864677">https://zhuanlan.zhihu.com/p/87864677</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> The-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 同时使用WIFI和有线网卡</title>
      <link href="/p/b0bc62d.html"/>
      <url>/p/b0bc62d.html</url>
      
        <content type="html"><![CDATA[<p>当有线网卡和无线网卡同时连接两个不同网络时，Windows默认将自动断开无线网络，使用有线网络连接</p><h2 id="1-设置跃点数"><a href="#1-设置跃点数" class="headerlink" title="1. 设置跃点数"></a>1. 设置跃点数</h2><ul><li>什么是跃点数<blockquote><ul><li>跃点数是为用于特殊网络接口的 IP 路由分配的值，用来标识与使用该路由有关的成本。 例如，可以根据链接速度、跃点计数或时间延迟来计算跃点数。 “自动跃点计数”是 Windows 中的一个新增功能，它可以自动为基于链接速度的本地路由配置跃点数。 默认情况下，将启用“自动跃点计数”功能，也可以进行手动配置，为其赋予一个具体的跃点数。</li><li>当路由表中包含用于同一目的地的多个路由时，“自动跃点计数”功能便非常有用。 例如，如果您的计算机具有一个 10 兆位 (Mb) 的网络接口和一个 100 Mb 的网络接口，并且该计算机具有一个在两个网络接口上均已配置的默认网关，那么“自动跃点计数”功能就会为较慢的网络接口分配较高的跃点数。 该功能会强制流向 Internet 的所有流量，例如，使用可用的最快网络接口。</li></ul></blockquote></li></ul><p>具体可以参考：<a href="https://support.microsoft.com/zh-cn/help/299540/an-explanation-of-the-automatic-metric-feature-for-ipv4-routes">有关IPv4路由中的“自动跃点计数”功能的说明</a></p><h2 id="2-设置步骤"><a href="#2-设置步骤" class="headerlink" title="2. 设置步骤"></a>2. 设置步骤</h2><h3 id="1-根据上面的链接，选择合适的跃点数值："><a href="#1-根据上面的链接，选择合适的跃点数值：" class="headerlink" title="1. 根据上面的链接，选择合适的跃点数值："></a>1. 根据上面的链接，选择合适的跃点数值：</h3><h3 id="2-打开-控制面板-网络和-Internet-网络连接，依次设置两个网络接口"><a href="#2-打开-控制面板-网络和-Internet-网络连接，依次设置两个网络接口" class="headerlink" title="2. 打开 控制面板\网络和 Internet\网络连接，依次设置两个网络接口"></a>2. 打开 控制面板\网络和 Internet\网络连接，依次设置两个网络接口</h3><h3 id="Ref："><a href="#Ref：" class="headerlink" title="Ref："></a>Ref：</h3><p>[1] <a href="https://blog.csdn.net/hehehe326/article/details/103547046">https://blog.csdn.net/hehehe326/article/details/103547046</a></p><p>[2] <a href="https://support.microsoft.com/zh-cn/help/299540/an-explanation-of-the-automatic-metric-feature-for-ipv4-routes">https://support.microsoft.com/zh-cn/help/299540/an-explanation-of-the-automatic-metric-feature-for-ipv4-routes</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一个git仓库提交代码到另一个仓库</title>
      <link href="/p/4e70e45f.html"/>
      <url>/p/4e70e45f.html</url>
      
        <content type="html"><![CDATA[<p>实际开发中，将repro_a仓库中的branch_a独立成为一个新的仓库repro_b。主要依靠<code>git remote</code>实现。</p><h2 id="1-把当前代码提交到另一个远程git仓库"><a href="#1-把当前代码提交到另一个远程git仓库" class="headerlink" title="1. 把当前代码提交到另一个远程git仓库"></a>1. 把当前代码提交到另一个远程git仓库</h2><p>假如仓库repo_a当前位于branch_a，要求将branch_a的整个数据（包括提交历史）全部提取出来，并建立一个新的仓库repo_b。这里假设仓库repo_b已经被建立。<br><code>git remote add</code>基本语法如下。name和url是必须的。</p><pre><code>git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</code></pre><h3 id="1-将仓库repo-b的URL添加到工作仓库的remote。"><a href="#1-将仓库repo-b的URL添加到工作仓库的remote。" class="headerlink" title="(1).  将仓库repo_b的URL添加到工作仓库的remote。"></a>(1).  将仓库repo_b的URL添加到工作仓库的remote。</h3><pre><code>git remote add origin_repo_b git@server_ip:/path/repo_b.git</code></pre><p>(origin_repo_b:自己起的名字，只要不与现有的remote名重复即可)</p><p>(git@server_ip:&#x2F;path&#x2F;repo_b.git:repo_b的远程路径)</p><h3 id="2-将代码推送到远程repo-b。"><a href="#2-将代码推送到远程repo-b。" class="headerlink" title="(2). 将代码推送到远程repo_b。"></a>(2). 将代码推送到远程repo_b。</h3><pre><code>git push origin_repo_b branch_a</code></pre><p>(origin_repo_b:远程仓库repo_b的名字)</p><p>(branch_a:仓库repo_a的的branch_a分支)</p><h3 id="3-克隆仓库repo-b，检查是否push成功。"><a href="#3-克隆仓库repo-b，检查是否push成功。" class="headerlink" title="(3). 克隆仓库repo_b，检查是否push成功。"></a>(3). 克隆仓库repo_b，检查是否push成功。</h3><h2 id="2-将一份相同的代码提交到多个不同的git托管服务器（多个git仓库）"><a href="#2-将一份相同的代码提交到多个不同的git托管服务器（多个git仓库）" class="headerlink" title="2. 将一份相同的代码提交到多个不同的git托管服务器（多个git仓库）"></a>2. 将一份相同的代码提交到多个不同的git托管服务器（多个git仓库）</h2><p>方法非常相似，多使用到了命令<code>git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</code><br>假设在远程的git服务器上又新增了一个仓库repo_c，现在要求repo_b、repo_c提交的代码必须一致。</p><h3 id="1-将远程repo-c配置到当前的工作的本地git仓库中"><a href="#1-将远程repo-c配置到当前的工作的本地git仓库中" class="headerlink" title="(1). 将远程repo_c配置到当前的工作的本地git仓库中"></a>(1). 将远程repo_c配置到当前的工作的本地git仓库中</h3><pre><code>git remote set-url --add origin_repo_b git@192.168.1.101:~/project/repo_c.git</code></pre><p>这句话的意思是，将远程仓库<a href="mailto:&#103;&#105;&#116;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#49;&#48;&#x31;">&#103;&#105;&#116;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#49;&#48;&#x31;</a>:~&#x2F;project&#x2F;repo_c.git也加入到origin_repo_b这个名字下面管理</p><h3 id="2-将代码同时提交到远程仓库repo-b和远程仓库repo-c"><a href="#2-将代码同时提交到远程仓库repo-b和远程仓库repo-c" class="headerlink" title="(2). 将代码同时提交到远程仓库repo_b和远程仓库repo_c"></a>(2). 将代码同时提交到远程仓库repo_b和远程仓库repo_c</h3><pre><code>git push origin_repo_b branch_a</code></pre><h3 id="3-fatal-refusing-to-merge-unrelated-histories"><a href="#3-fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="(3). fatal: refusing to merge unrelated histories"></a>(3). fatal: refusing to merge unrelated histories</h3><pre><code>git pull origin master --allow-unrelated-histories</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI-CD with GitLab-Runner</title>
      <link href="/p/841d8c61.html"/>
      <url>/p/841d8c61.html</url>
      
        <content type="html"><![CDATA[<p>Run GitLab-Runner in container for GitLab CI&#x2F;CD.</p><h2 id="1-Run-GitLab-Runner-with-Podman"><a href="#1-Run-GitLab-Runner-with-Podman" class="headerlink" title="1. Run GitLab Runner with Podman"></a>1. Run GitLab Runner with Podman</h2><pre><code>podman run --detach \    --privileged \    --name gitlab-runner \    --network host \    -v $&#123;PWD&#125;/config:/etc/gitlab-runner:z \    docker.io/gitlab/gitlab-runner:latest</code></pre><h2 id="2-Register-Runner-in-container"><a href="#2-Register-Runner-in-container" class="headerlink" title="2. Register Runner in container"></a>2. Register Runner in container</h2><pre><code>podman exec -it gitlab-runner gitlab-runner register</code></pre><p>Config the runner with instructions.</p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://docs.gitlab.com/runner/">https://docs.gitlab.com/runner/</a></p><p>[2]. <a href="https://zhuanlan.zhihu.com/p/385110311">https://zhuanlan.zhihu.com/p/385110311</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVM PCI Passthrough</title>
      <link href="/p/e458ade3.html"/>
      <url>/p/e458ade3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Enable-IOMMU-by-editing-the-grub-configuration-file"><a href="#1-Enable-IOMMU-by-editing-the-grub-configuration-file" class="headerlink" title="1. Enable IOMMU by editing the grub configuration file."></a>1. Enable IOMMU by editing the grub configuration file.</h2><p>For Intel, boot the machine, and append <code>intel_iommu=on</code> to the end of the <code>GRUB_CMDLINE_LINUX</code> line in the grub configuration file.</p><pre><code>vi /etc/default/grub...GRUB_CMDLINE_LINUX=&quot;nofb splash=quiet console=tty0 ... intel_iommu=on...</code></pre><p>For AMD, boot the machine, and append <code>amd_iommu=on</code> to the end of the <code>GRUB_CMDLINE_LINUX</code> line in the grub configuration file.</p><pre><code>vi /etc/default/grub...GRUB_CMDLINE_LINUX=&quot;nofb splash=quiet console=tty0 ... amd_iommu=on...</code></pre><h2 id="2-Refresh-the-grub-cfg-file-and-reboot-the-host-for-these-changes-to-take-effect"><a href="#2-Refresh-the-grub-cfg-file-and-reboot-the-host-for-these-changes-to-take-effect" class="headerlink" title="2. Refresh the grub.cfg file and reboot the host for these changes to take effect:"></a>2. Refresh the grub.cfg file and reboot the host for these changes to take effect:</h2><pre><code>grub2-mkconfig -o /boot/grub2/grub.cfgreboot</code></pre><h2 id="3-Prevent-the-driver-from-binding-to-the-Device"><a href="#3-Prevent-the-driver-from-binding-to-the-Device" class="headerlink" title="3. Prevent the driver from binding to the Device."></a>3. Prevent the driver from binding to the Device.</h2><pre><code>grubby --args=&quot;pci-stub.ids=10de:11fa&quot; --update-kernel DEFAULT</code></pre><blockquote><p>10de:11fa: bus id of device, can be get by <code>lspci -Dnn</code></p></blockquote><h2 id="4-Optional-Function-Passthrough"><a href="#4-Optional-Function-Passthrough" class="headerlink" title="4. Optional: Function Passthrough"></a>4. Optional: Function Passthrough</h2><p>If certain GPU functions, such as audio, cannot be passed through to the VM due to support limitations, you can modify the driver bindings of the endpoints within an IOMMU group to pass through only the necessary GPU functions.</p><ul><li><p>Convert the GPU settings to XML and note the PCI address of the endpoints that you want to prevent from attaching to the host drivers.</p></li><li><p>Prevent the endpoints from attaching to the host driver.</p></li><li><p><code>driverctl set-override 0000:02:00.1 vfio-pci</code></p></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.0/html/installation_guide/appe-configuring_a_hypervisor_host_for_pci_passthrough#Enabling_IOMMU_Manually">https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.0/html/installation_guide/appe-configuring_a_hypervisor_host_for_pci_passthrough#Enabling_IOMMU_Manually</a></p><p>[2]. <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_virtualization/assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization#proc_assigning-a-gpu-to-a-virtual-machine_assembly_managing-gpu-devices-in-virtual-machines">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_virtualization/assembly_managing-gpu-devices-in-virtual-machines_configuring-and-managing-virtualization#proc_assigning-a-gpu-to-a-virtual-machine_assembly_managing-gpu-devices-in-virtual-machines</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle Database Base</title>
      <link href="/p/95e32ac3.html"/>
      <url>/p/95e32ac3.html</url>
      
        <content type="html"><![CDATA[<p>Oracle database basic usage</p><h2 id="1-Create-Table"><a href="#1-Create-Table" class="headerlink" title="1. Create Table"></a>1. Create Table</h2><pre><code>Create Table TABLE_NAME (sequenceno NUMBER(19) not null, \time TIMESTAMP(6) not null，\alarmseverity NUMBER(10), \alarmfield NUMBER(10), \text VARCHAR2(1000), \alarmevent NUMBER(19), \activetype NUMBER(10), \eventid VARCHAR2(1000), \primary key(sequenceno) )</code></pre><ul><li>NUMBER(19): Integer type</li><li>VARCHAR2(1000): Char type</li><li>primary key(sequenceno): Set “sequenceno” as primary key</li></ul><h2 id="2-Insert-Record"><a href="#2-Insert-Record" class="headerlink" title="2. Insert Record"></a>2. Insert Record</h2><pre><code>Insert Into H_ASMEvents(SequenceNo,Description) \Values(1234, DescriptionText,)</code></pre><h2 id="3-Update-Record"><a href="#3-Update-Record" class="headerlink" title="3. Update Record"></a>3. Update Record</h2><pre><code>UPDATE H_ASMEvents SET Description = description_text \WHERE SequenceNo = 1234</code></pre><h2 id="4-Select-Record"><a href="#4-Select-Record" class="headerlink" title="4. Select Record"></a>4. Select Record</h2><pre><code>SELECT * FROM H_ASMEvents WHERE SequenceNo = 1234</code></pre>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy KMS Activation Server with Vlmcsd On Docker</title>
      <link href="/p/42409e3d.html"/>
      <url>/p/42409e3d.html</url>
      
        <content type="html"><![CDATA[<p>Vlmcsd Project: <a href="http://forums.mydigitallife.info/threads/50234-Emulated-KMS-Servers-on-non-Windows-platforms">mydigitallife</a>,<a href="https://github.com/Wind4/vlmcsd">Github</a></p><p>To install Vlmcsd Manually, refer to<a href="https://blog.thirdechelon.org/2019/06/vlmcsd-on-ubuntu-18-04/">Vlmcsd-on-Ubuntu-18.04</a> or <a href="https://sxfblog.com/index.php/archives/137.html">Centos7-搭建KMS服务器以及windows产品秘钥</a></p><h2 id="1-Deploy-Vlmcsd-on-Docker"><a href="#1-Deploy-Vlmcsd-on-Docker" class="headerlink" title="1. Deploy Vlmcsd on Docker"></a>1. Deploy Vlmcsd on Docker</h2><h3 id="1-Compile-docker-compose-yaml-as-below"><a href="#1-Compile-docker-compose-yaml-as-below" class="headerlink" title="(1). Compile docker-compose.yaml, as below"></a>(1). Compile <code>docker-compose.yaml</code>, as below</h3><pre><code>version: &quot;3&quot;services:    kms-docker:        image: teddysun/kms        container_name: kms        restart: always        network_mode: &quot;host&quot;        ports:            - 1688:1688</code></pre><h3 id="2-Run-docker-container-with-docker-compose"><a href="#2-Run-docker-container-with-docker-compose" class="headerlink" title="(2). Run docker container with docker-compose"></a>(2). Run docker container with docker-compose</h3><pre><code>docker-compose up -d</code></pre><h2 id="2-Frpc-Configuration"><a href="#2-Frpc-Configuration" class="headerlink" title="2. Frpc Configuration"></a>2. Frpc Configuration</h2><pre><code>[KMS]type = tcplocal_ip = 127.0.0.1local_port = 1688remote_port = 1688protocol = kcp</code></pre><h2 id="3-Aciticate-Windows"><a href="#3-Aciticate-Windows" class="headerlink" title="3. Aciticate Windows"></a>3. Aciticate Windows</h2><p>Run <code>CMD</code> with Administrator, then run the following scripts:</p><pre><code>slmgr.vbs -upkslmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr.vbs -skms xxx.xxx.xxx.xxx:1688slmgr.vbs -atoslmgr.vbs -dlv</code></pre><h2 id="4-Activate-Office"><a href="#4-Activate-Office" class="headerlink" title="4. Activate Office"></a>4. Activate Office</h2><p>Run <code>CMD</code> with Administrator, then run the following scripts:</p><pre><code>cd C:\Program Files\Microsoft Office\Office16cscript ospp.vbs /unpkey:xxxxxcscript ospp.vbs /inpkey:xxxxxcscript ospp.vbs /sethst:x.x.x.xcscript ospp.vbs /act</code></pre><p>Scripts above refer to <a href="https://ihacksoft.com/ospp-vbs.html">ospp.vbs激活office</a></p><blockquote><p>Notes：KMS activication works for Office VOL version ONLY.</p><p>You can install VOL certificates with <a href="https://otp.landian.vip/en-us/">OfficeTools</a>.</p></blockquote><h2 id="5-常用密钥"><a href="#5-常用密钥" class="headerlink" title="5. 常用密钥"></a>5. 常用密钥</h2><ul><li><h3 id="Windows-10-Professional"><a href="#Windows-10-Professional" class="headerlink" title="Windows-10-Professional"></a>Windows-10-Professional</h3><p>  <code>W269N-WFGWX-YVC9B-4J6C9-T83GX</code></p></li><li><h3 id="Windows-11-Professional"><a href="#Windows-11-Professional" class="headerlink" title="Windows-11-Professional"></a>Windows-11-Professional</h3><p>  <code>NY2G4-WJT7M-7XFMW-B9R79-BKMQB</code></p></li><li><h3 id="Office-Pro-Plus-2021-LTSC"><a href="#Office-Pro-Plus-2021-LTSC" class="headerlink" title="Office-Pro-Plus-2021-LTSC"></a>Office-Pro-Plus-2021-LTSC</h3><p>  <code>FXYTK-NJJ8C-GB6DW-3DYQT-6F7TH</code></p></li><li><h3 id="Visio-Pro-2021-LTSC"><a href="#Visio-Pro-2021-LTSC" class="headerlink" title="Visio-Pro-2021-LTSC"></a>Visio-Pro-2021-LTSC</h3><p>  <code>KNH8D-FGHT4-T8RK3-CTDYJ-K2HT4</code></p></li><li><h3 id="Office-Pro-Plus-2019"><a href="#Office-Pro-Plus-2019" class="headerlink" title="Office-Pro-Plus-2019"></a>Office-Pro-Plus-2019</h3><p>  <code>NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</code></p></li><li><h3 id="Visio-2019-Pro"><a href="#Visio-2019-Pro" class="headerlink" title="Visio-2019-Pro"></a>Visio-2019-Pro</h3><p>  <code>9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</code></p></li></ul><p>For more Activation Key, refer to <a href="https://github.com/YerongAI/Office-Tool/blob/main/doc/Tech%20Articles/Products.md">Office-Products-Information</a>.</p><h2 id="6-Download-Link"><a href="#6-Download-Link" class="headerlink" title="6. Download Link"></a>6. Download Link</h2><p><a href="https://officecdn.microsoft.com/db/492350F6-3A01-4F97-B9C0-C7C6DDF67D60/media/en-US/ProPlus2021Retail.img">Office-2021-Professional-Plus-English</a></p><p><a href="https://officecdn.microsoft.com/db/492350F6-3A01-4F97-B9C0-C7C6DDF67D60/media/en-US/VisioPro2021Retail.img">Visio-2021-Professional-English</a></p><p><a href="https://officecdn.microsoft.com/db/492350F6-3A01-4F97-B9C0-C7C6DDF67D60/media/zh-CN/ProPlus2021Retail.img">Office-2021-Professional-Plus-Chinese-Simplified</a></p><p><a href="https://officecdn.microsoft.com/db/492350F6-3A01-4F97-B9C0-C7C6DDF67D60/media/zh-CN/VisioPro2021Retail.img">Visio-2021-Professional-Chinese-Simplified</a></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p>[1]. <a href="http://forums.mydigitallife.info/threads/50234-Emulated-KMS-Servers-on-non-Windows-platforms">http://forums.mydigitallife.info/threads/50234-Emulated-KMS-Servers-on-non-Windows-platforms</a></p><p>[2]. <a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><p>[3]. <a href="https://jalena.bcsytv.com/archives/1388/comment-page-1">https://jalena.bcsytv.com/archives/1388/comment-page-1</a></p><p>[4]. <a href="https://blog.thirdechelon.org/2019/06/vlmcsd-on-ubuntu-18-04/">https://blog.thirdechelon.org/2019/06/vlmcsd-on-ubuntu-18-04/</a></p><p>[5]. <a href="https://sxfblog.com/index.php/archives/137.html">https://sxfblog.com/index.php/archives/137.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SELinux初探</title>
      <link href="/p/f540b1c9.html"/>
      <url>/p/f540b1c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于SELinux安全上下文设置的一些操作命令"><a href="#关于SELinux安全上下文设置的一些操作命令" class="headerlink" title="关于SELinux安全上下文设置的一些操作命令"></a>关于SELinux安全上下文设置的一些操作命令</h2><h3 id="1-chcon"><a href="#1-chcon" class="headerlink" title="1. chcon"></a>1. chcon</h3><ul><li>语法<pre><code>chcon [选项]... 环境 文件... chcon [选项]... [-u 用户] [-r 角色] [-l 范围] [-t 类型] 文件... chcon [选项]... --reference=参考文件 文件...</code></pre></li><li>选项<pre><code>-h, --no-dereference：影响符号连接而非引用的文件。--reference=参考文件：使用指定参考文件的安全环境，而非指定值。 -R, --recursive：递归处理所有的文件及子目录。 -v, --verbose：为处理的所有文件显示诊断信息。 -u, --user=用户：设置指定用户的目标安全环境。-r, --role=角色：设置指定角色的目标安全环境。-t, --type=类型：设置指定类型的目标安全环境。 -l, --range=范围：设置指定范围的目标安全环境。</code></pre><h3 id="2-restorecon"><a href="#2-restorecon" class="headerlink" title="2. restorecon"></a>2. restorecon</h3></li><li>语法<pre><code>restorecon [-iFnrRv] [-e excludedir ] [-o filename ] [-f filename | pathname...]</code></pre></li><li>选项<pre><code>-i：忽略不存在的文件。 -f：infilename 文件 infilename 中记录要处理的文件。 -e：directory 排除目录。 -R/-r：递归处理目录。 -n：不改变文件标签。 -o/outfilename：保存文件列表到 outfilename，在文件不正确情况下。 -v：将过程显示到屏幕上。 -F：强制恢复文件安全语境。</code></pre></li></ul><h3 id="3-semanage"><a href="#3-semanage" class="headerlink" title="3. semanage"></a>3. semanage</h3><ul><li><p>将某个路径下的后续文件自动标记安全上下文的规则</p><p>  <code>sudo semanage fcontext -a -t samba_share_t &quot;/mnt/shared(/.*)?&quot;</code></p></li><li><p>删除某个路径下的后续文件自动标记安全上下文的规则<br>  <code>sudo semanage fcontext - &quot;/mnt/shared(/.*)?&quot;</code></p></li></ul><h3 id="4-getsebool"><a href="#4-getsebool" class="headerlink" title="4. getsebool"></a>4. getsebool</h3><ul><li><p>查看SELinux的所有bool量开关</p><p>  <code>getsebool -a</code></p></li></ul><h3 id="5-setsebool"><a href="#5-setsebool" class="headerlink" title="5. setsebool"></a>5. setsebool</h3><ul><li><p>修改bool值</p><p>  <code>setsebool -P &lt;boolean_name&gt; on/off</code></p><p>  其中<code>-P</code>用于永久修改。</p></li></ul><h3 id="6-Attention"><a href="#6-Attention" class="headerlink" title="6. Attention"></a>6. Attention</h3><ul><li>需要注意的是，任何一个程序在SElinux下运行，均需要有对应的SElinux安全上下文支撑，否则运行必然造成权限不足。</li></ul><h3 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h3><p>[1].<a href="https://www.linuxprobe.com/restorecon.html">https://www.linuxprobe.com/restorecon.html</a></p><p>[2].<a href="https://www.linuxprobe.com/chcon.html">https://www.linuxprobe.com/chcon.html</a></p><p>[3]. <a href="https://goto-linux.com/zh-cn/2020/6/13/%E5%A6%82%E4%BD%95%E5%9C%A8rhel-8-/-centos-8%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEsamba/">https://goto-linux.com/zh-cn/2020/6/13/%E5%A6%82%E4%BD%95%E5%9C%A8rhel-8-/-centos-8%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEsamba/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SELinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenPGP初探</title>
      <link href="/p/95337d6c.html"/>
      <url>/p/95337d6c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-GPG生成密钥"><a href="#1-GPG生成密钥" class="headerlink" title="1. GPG生成密钥"></a>1. GPG生成密钥</h2><blockquote><p><code>gpg --expert --full-gen-key</code></p><ul><li><code>--expert</code>          专家模式</li><li><code>--full-gen-key</code>    生成key</li></ul></blockquote><h2 id="2-生成撤销证书"><a href="#2-生成撤销证书" class="headerlink" title="2. 生成撤销证书"></a>2. 生成撤销证书</h2><blockquote><p><code>gpg --gen-revoke -so revoke.gpg USERID</code></p></blockquote><h2 id="3-GPG显示密钥"><a href="#3-GPG显示密钥" class="headerlink" title="3. GPG显示密钥"></a>3. GPG显示密钥</h2><blockquote><p><code>gpg --list-secret-keys </code> 或简化命令 <code>gpg -K</code></p><ul><li><p><code>--keyid-format long</code>   输出长ID</p></li><li><p><code>--fingerprint</code>         输出指纹信息</p></li></ul></blockquote><h2 id="4-GPG导入密钥"><a href="#4-GPG导入密钥" class="headerlink" title="4. GPG导入密钥"></a>4. GPG导入密钥</h2><blockquote><p>从文件导入</p><p><code>gpg --import [file]</code></p></blockquote><h2 id="5-GPG导出密钥"><a href="#5-GPG导出密钥" class="headerlink" title="5. GPG导出密钥"></a>5. GPG导出密钥</h2><h3 id="1-导出公钥"><a href="#1-导出公钥" class="headerlink" title="(1). 导出公钥"></a>(1). 导出公钥</h3><blockquote><p><code>gpg -ao public-key.txt --export USERID</code></p></blockquote><h3 id="2-导出私钥"><a href="#2-导出私钥" class="headerlink" title="(2). 导出私钥"></a>(2). 导出私钥</h3><blockquote><p>导出主私钥</p><p><code>gpg  -ao secret-key --export-secret-key 99F583599B7E31F1!</code></p></blockquote><blockquote><p>导出子密钥</p><p><code>gpg  -ao sign-subkey --export-secret-subkeys FDB960B857D397F6!  </code></p></blockquote><ul><li>“!”表示仅导出该密钥</li></ul><h2 id="6-GPG删除密钥"><a href="#6-GPG删除密钥" class="headerlink" title="6. GPG删除密钥"></a>6. GPG删除密钥</h2><blockquote><p>删除私钥</p><p><code>gpg --delete-secret-keys USERID</code></p></blockquote><blockquote><p>删除公钥</p><p><code>gpg --delete-keys USERID</code></p></blockquote><h2 id="7-签名和验证"><a href="#7-签名和验证" class="headerlink" title="7. 签名和验证"></a>7. 签名和验证</h2><h3 id="1-生成"><a href="#1-生成" class="headerlink" title="(1). 生成"></a>(1). 生成</h3><blockquote><p>-生成二进制签名文件</p><p><code>gpg --sign input.txt</code></p><p>生成ASCII格式签名</p><p><code>gpg --clearsign input.txt</code></p><p>签名和原文本分开<br><code>gpg --armor --detach-sign input.txt</code></p></blockquote><ul><li>增加 <code>--output</code>参数，可以输出到文件</li></ul><h3 id="2-验证"><a href="#2-验证" class="headerlink" title="(2). 验证"></a>(2). 验证</h3><blockquote><p>验证签名文件</p><p><code>gpg --verify demo.txt.asc demo.txt</code></p></blockquote><h2 id="8-加密和解密"><a href="#8-加密和解密" class="headerlink" title="8. 加密和解密"></a>8. 加密和解密</h2><h3 id="1-加密"><a href="#1-加密" class="headerlink" title="(1). 加密"></a>(1). 加密</h3><blockquote><p><code>gpg --recipient &#123;keyid/uid&#125; --output encrypt.txt --encrypt input.txt</code></p><p><code>gpg  -se  -o  encrypt.txt  -r  &#123;keyid/uid&#125;   input.txt</code></p></blockquote><h3 id="2-解密"><a href="#2-解密" class="headerlink" title="(2). 解密"></a>(2). 解密</h3><blockquote><p><code>gpg --decrypt encrypt.txt --output decrypt.txt</code></p><p><code>gpg -d encrypt.txt</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GnuPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Git Server Using GitLab with Podman</title>
      <link href="/p/d709f5ae.html"/>
      <url>/p/d709f5ae.html</url>
      
        <content type="html"><![CDATA[<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><ul><li>Running GitLab Server on Linux with Podman</li></ul><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Linux Server with Podman</li></ul><h2 id="1-Config-github-rb"><a href="#1-Config-github-rb" class="headerlink" title="1. Config github.rb"></a>1. Config github.rb</h2><p>Config <code>github.rb</code> file with following options</p><pre><code>external_url &#39;http://127.0.0.1:8929&#39;gitlab_rails[&#39;gitlab_ssh_host&#39;] = &#39;gitlab.yourdomain.com&#39;gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 22nginx[&#39;listen_addresses&#39;] = [&#39;*&#39;, &#39;[::]&#39;]nginx[&#39;listen_port&#39;] = 8929</code></pre><h2 id="2-Install-GitLab-with-Podman"><a href="#2-Install-GitLab-with-Podman" class="headerlink" title="2. Install GitLab with Podman"></a>2. Install GitLab with Podman</h2><h3 id="1-Download-dockerhub-image"><a href="#1-Download-dockerhub-image" class="headerlink" title="(1). Download dockerhub image"></a>(1). Download dockerhub image</h3><pre><code>podman pull docker.io/gitlab/gitlab-ce:latest</code></pre><h3 id="2-Run-Container"><a href="#2-Run-Container" class="headerlink" title="(2). Run Container"></a>(2). Run Container</h3><pre><code>podman run --detach --privileged \    --name gitlab \    --restart always \    --hostname gitlab.yourdomain.com \    --user $(id -u):$(id -g) \    -p 8929:8929 \    -p 22022:22 \    -v ./config:/etc/gitlab:z \    -v ./logs:/var/log/gitlab:z \    -v ./data:/var/opt/gitlab:z \    --shm-size 256m \    --group-add keep-groups \    docker.io/gitlab/gitlab-ce:latest</code></pre><ul><li>22022:22-&gt;将本机10022端口映射到docker内的22</li><li>8929:8929-&gt;将本机13000端口映射到docker内的3000</li><li>&#x2F;data&#x2F;gogs是本机存放数据的位置</li></ul><h2 id="3-Update-GitLab"><a href="#3-Update-GitLab" class="headerlink" title="3. Update GitLab"></a>3. Update GitLab</h2><h3 id="1-BackUp"><a href="#1-BackUp" class="headerlink" title="(1). BackUp"></a>(1). BackUp</h3><p>Backup Repository with following command</p><pre><code>gitlab-rake gitlab:backup:create</code></pre><h2 id="ref"><a href="#ref" class="headerlink" title="ref."></a>ref.</h2><p>[1]. <a href="https://zhuanlan.zhihu.com/p/531244799">https://zhuanlan.zhihu.com/p/531244799</a></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netstat常用参数</title>
      <link href="/p/7730ea63.html"/>
      <url>/p/7730ea63.html</url>
      
        <content type="html"><![CDATA[<h1 id="NetStat-连接状态常用参数"><a href="#NetStat-连接状态常用参数" class="headerlink" title="NetStat 连接状态常用参数"></a>NetStat 连接状态常用参数</h1><h2 id="1-命令行运行netstat命令"><a href="#1-命令行运行netstat命令" class="headerlink" title="1. 命令行运行netstat命令"></a>1. 命令行运行netstat命令</h2><p><code>netstat -ntlpa</code></p><blockquote><p>-a 显示所有选项，默认不显示listen相关</p><p>-t （tcp）仅显示tcp相关</p><p>-u （udp）仅显示udp相关选项</p><p>-n 拒绝显示别名， 能显示数字的全部转化成数字</p><p>-l 仅列出有在listen（监听）的服务状态</p><p>-p 显示建立相关连接的程序名</p><p>-r显示路由信息， 路由表</p><p>-e 显示扩展信息， 例如uid等</p><p>-s 按每个协议进行统计</p><p>-c 每隔一个固定时间， 执行该netstat命令</p></blockquote><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>[1]. <a href="https://blog.csdn.net/qq_42991025/article/details/83547525">https://blog.csdn.net/qq_42991025/article/details/83547525</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCPDump常用参数</title>
      <link href="/p/48a04658.html"/>
      <url>/p/48a04658.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCPDump-抓包常用参数"><a href="#TCPDump-抓包常用参数" class="headerlink" title="TCPDump 抓包常用参数"></a>TCPDump 抓包常用参数</h1><h2 id="1-以管理员权运行tcpdump"><a href="#1-以管理员权运行tcpdump" class="headerlink" title="1. 以管理员权运行tcpdump"></a>1. 以管理员权运行tcpdump</h2><p><code>sudo tcpdump -n -t -S -i enp0s3  port 80 </code></p><blockquote><p>-i : 指定抓包的网卡是enp0s3</p><p>-n: 把域名转成IP显示</p><p>-t: 不显示时间</p><p>-S: 序列号使用绝对数值，不指定-S的话，序列号会使用相对的数值</p><p>port: 指定监听端口是80</p><p>host:指定监听的主机名</p></blockquote><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>[1]. <a href="https://www.cnblogs.com/onesea/p/13053697.html">https://www.cnblogs.com/onesea/p/13053697.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Systemd初识</title>
      <link href="/p/bad6e10f.html"/>
      <url>/p/bad6e10f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Systemd初步认识"><a href="#Systemd初步认识" class="headerlink" title="Systemd初步认识"></a>Systemd初步认识</h1><h2 id="1-Systemd目录"><a href="#1-Systemd目录" class="headerlink" title="1. Systemd目录"></a>1. Systemd目录</h2><p>Unit 文件按照 Systemd 约定，应该被放置指定的三个系统目录之一中。这三个目录是有优先级的，如下所示，越靠上的优先级越高。因此，在三个目录中有同名文件的时候，只有优先级最高的目录里的那个文件会被使用。</p><ul><li>&#x2F;etc&#x2F;systemd&#x2F;system：系统或用户自定义的配置文件</li><li>&#x2F;run&#x2F;systemd&#x2F;system：软件运行时生成的配置文件</li><li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system：系统或第三方软件安装时添加的配置文件。</li></ul><p>Systemd 默认从目录 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F; 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;，真正的配置文件存放在那个目录。</p><h2 id="2-Unit-amp-Target"><a href="#2-Unit-amp-Target" class="headerlink" title="2. Unit &amp; Target"></a>2. Unit &amp; Target</h2><p>Unit 是 Systemd 管理系统资源的基本单元，可以认为每个系统资源就是一个 Unit，并使用一个 Unit 文件定义。在 Unit 文件中需要包含相应服务的描述、属性以及需要运行的命令。</p><p>Target 是 Systemd 中用于指定系统资源启动组的方式，相当于 SysV-init 中的运行级别。</p><p>简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点”，启动某个 Target 就好比启动到某种状态。</p><h3 id="2-1-Systemd-Service-Unit"><a href="#2-1-Systemd-Service-Unit" class="headerlink" title="2.1 Systemd Service Unit"></a>2.1 Systemd Service Unit</h3><pre><code>[Unit]Description=Hello WorldAfter=docker.serviceRequires=docker.service[Service]TimeoutStartSec=0ExecStartPre=-/usr/bin/docker kill busybox1ExecStartPre=-/usr/bin/docker rm busybox1ExecStartPre=/usr/bin/docker pull busyboxExecStart=/usr/bin/docker run --name busybox1 busybox /bin/sh -cExecStop=&quot;/usr/bin/docker stop busybox1&quot;ExecStopPost=&quot;/usr/bin/docker rm busybox1&quot;[Install]WantedBy=multi-user.target</code></pre><ul><li>Unit 和 Install 段：所有 Unit 文件通用，用于配置服务（或其它系统资源）的描述、依赖和随系统启动的方式</li><li>Service 段：服务（Service）类型的 Unit 文件（后缀为 .service）特有的，用于定义服务的具体管理和操作方法</li></ul><h3 id="2-2-Unit"><a href="#2-2-Unit" class="headerlink" title="2.2 Unit"></a>2.2 Unit</h3><ul><li>Description：描述这个 Unit 文件的信息</li><li>Documentation：指定服务的文档，可以是一个或多个文档的 URL 路径</li><li>Requires：依赖的其它 Unit 列表，列在其中的 Unit 模板会在这个服务启动时的同时被启动。并且，如果其中任意一个服务启动失败，这个服务也会被终止</li><li>Wants：与 Requires 相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模板启动是否成功</li><li>After：与 Requires 相似，但是在后面列出的所有模块全部启动完成以后，才会启动当前的服务</li><li>Before：与 After 相反，在启动指定的任务一个模块之间，都会首先确证当前服务已经运行</li><li>Binds To：与 Requires 相似，失败时失败，成功时成功，但是在这些模板中有任意一个出现意外结束或重启时，这个服务也会跟着终止或重启</li><li>Part Of：一个 Bind To 作用的子集，仅在列出的任务模块失败或重启时，终止或重启当前服务，而不会随列出模板的启动而启动</li><li>OnFailure：当这个模板启动失败时，就会自动启动列出的每个模块</li><li>Conflicts：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，这个服务就不能启动，反之亦然</li></ul><h3 id="2-3-Service"><a href="#2-3-Service" class="headerlink" title="2.3 Service"></a>2.3 Service</h3><p>用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段分为服务生命周期和服务上下文配置两个方面。</p><blockquote><h4 id="a-服务生命周期控制相关"><a href="#a-服务生命周期控制相关" class="headerlink" title="a 服务生命周期控制相关"></a>a 服务生命周期控制相关</h4></blockquote><ul><li>Type：定义启动时的进程行为，它有以下几种值：<pre><code>Type=simple：默认值，执行ExecStart指定的命令，启动主进程Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行Type=dbus：当前服务通过D-Bus启动Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行Type=idle：若有其他任务执行完毕，当前服务才会运行</code></pre></li><li>RemainAfterExit：值为 true 或 false（默认）。当配置为 true 时，Systemd 只会负责启动服务进程，之后即便服务进程退出了，Systemd 也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</li><li>ExecStart：启动当前服务的命令</li><li>ExecStartPre：启动当前服务之前执行的命令</li><li>ExecStartPos：启动当前服务之后执行的命令</li><li>ExecReload：重启当前服务时执行的命令</li><li>ExecStop：停止当前服务时执行的命令</li><li>ExecStopPost：停止当其服务之后执行的命令</li><li>RestartSec：自动重启当前服务间隔的秒数</li><li>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括 always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</li><li>TimeoutStartSec：启动服务时等待的秒数，这一配置对于使用 Docker 容器而言显得尤为重要，因其第一次运行时可能需要下载镜像，严重延时会容易被 Systemd 误判为启动失败杀死。通常，对于这种服务，将此值指定为 0，从而关闭超时检测</li><li>TimeoutStopSec：停止服务时的等待秒数，如果超过这个时间仍然没有停止，Systemd 会使用 SIGKILL 信号强行杀死服务的进程</li></ul><blockquote><h4 id="b-服务上下文配置相关"><a href="#b-服务上下文配置相关" class="headerlink" title="b 服务上下文配置相关"></a>b 服务上下文配置相关</h4></blockquote><ul><li>Environment：为服务指定环境变量</li><li>EnvironmentFile：指定加载一个包含服务所需的环境变量的列表的文件，文件中的每一行都是一个环境变量的定义</li><li>Nice：服务的进程优先级，值越小优先级越高，默认为 0。其中 -20 为最高优先级，19 为最低优先级</li><li>WorkingDirectory：指定服务的工作目录</li><li>RootDirectory：指定服务进程的根目录（&#x2F; 目录）。如果配置了这个参数，服务将无法访问指定目录以外的任何文件</li><li>User：指定运行服务的用户</li><li>Group：指定运行服务的用户组</li><li>MountFlags：服务的 Mount Namespace 配置，会影响进程上下文中挂载点的信息，即服务是否会继承主机上已有挂载点，以及如果服务运行执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为 shared、slaved 或 private<pre><code>shared：服务与主机共用一个 Mount Namespace，继承主机挂载点，且服务挂载或卸载设备会真实地反映到主机上slave：服务使用独立的 Mount Namespace，它会继承主机挂载点，但服务对挂载点的操作只有在自己的 Namespace 内生效，不会反映到主机上private：服务使用独立的 Mount Namespace，它在启动时没有任何任何挂载点，服务对挂载点的操作也不会反映到主机上</code></pre></li><li>LimitCPU &#x2F; LimitSTACK &#x2F; LimitNOFILE &#x2F; LimitNPROC 等：限制特定服务的系统资源量，例如 CPU、程序堆栈、文件句柄数量、子进程数量等</li></ul><h3 id="2-4-Install"><a href="#2-4-Install" class="headerlink" title="2.4 Install"></a>2.4 Install</h3><p>这部分配置的目标模块通常是特定运行目标的 .target 文件，用来使得服务在系统启动时自动运行。这个区段可以包含三种启动约束：</p><ul><li>WantedBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入 &#x2F;etc&#x2F;systemd&#x2F;system 目录下面以 &lt;Target 名&gt; + .wants 后缀构成的子目录中，如 “&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;“</li><li>RequiredBy：和 Unit 段的 Wants 作用相似，只有后面列出的不是服务所依赖的模块，而是依赖当前服务的模块。它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入 &#x2F;etc&#x2F;systemd&#x2F;system 目录下面以 &lt;Target 名&gt; + .required 后缀构成的子目录中</li><li>Also：当前 Unit enable&#x2F;disable 时，同时 enable&#x2F;disable 的其他 Unit</li><li>Alias：当前 Unit 可用于启动的别名</li></ul><h3 id="2-5-Unit-文件占位符"><a href="#2-5-Unit-文件占位符" class="headerlink" title="2.5 Unit 文件占位符"></a>2.5 Unit 文件占位符</h3><p>在 Unit 文件中，有时会需要使用到一些与运行环境有关的信息，例如节点 ID、运行服务的用户等。这些信息可以使用占位符来表示，然后在实际运行被动态地替换实际的值。</p><ul><li>%n：完整的 Unit 文件名字，包括 .service 后缀名</li><li>%p：Unit 模板文件名中 @ 符号之前的部分，不包括 @ 符号</li><li>%i：Unit 模板文件名中 @ 符号之后的部分，不包括 @ 符号和 .service 后缀名</li><li>%t：存放系统运行文件的目录，通常是 “run”</li><li>%u：运行服务的用户，如果 Unit 文件中没有指定，则默认为 root</li><li>%U：运行服务的用户 ID</li><li>%h：运行服务的用户 Home 目录，即 %{HOME} 环境变量的值</li><li>%s：运行服务的用户默认 Shell 类型，即 %{SHELL} 环境变量的值</li><li>%m：实际运行节点的 Machine ID，对于运行位置每个的服务比较有用</li><li>%b：Boot ID，这是一个随机数，每个节点各不相同，并且每次节点重启时都会改变</li><li>%H：实际运行节点的主机名</li><li>%v：内核版本，即 “uname -r” 命令输出的内容</li><li>%%：在 Unit 模板文件中表示一个普通的百分号</li></ul><h2 id="3-Systemd资源管理"><a href="#3-Systemd资源管理" class="headerlink" title="3. Systemd资源管理"></a>3. Systemd资源管理</h2><h3 id="3-1-Systemctl-命令"><a href="#3-1-Systemctl-命令" class="headerlink" title="3.1 Systemctl 命令"></a>3.1 Systemctl 命令</h3><h3 id="3-2-Unit-管理"><a href="#3-2-Unit-管理" class="headerlink" title="3.2 Unit 管理"></a>3.2 Unit 管理</h3><blockquote><h4 id="a-查看当前系统的所有Unit"><a href="#a-查看当前系统的所有Unit" class="headerlink" title="a 查看当前系统的所有Unit"></a>a 查看当前系统的所有Unit</h4></blockquote><p><code>systemctl list-units</code> # 列出正在运行的 Unit</p><p><code>systemctl list-units --all</code> # 列出所有Unit，包括没有找到配置文件的或者启动失败的</p><p><code>systemctl list-units --all --state=inactive</code> # 列出所有没有运行的 Unit</p><p><code>systemctl list-units --failed</code> # 列出所有加载失败的 Unit</p><p><code>systemctl list-units --type=service</code> # 列出所有正在运行的、类型为 service 的 Unit</p><p><code>systemctl cat docker.service</code> # 查看 Unit 配置文件的内容</p><blockquote><h4 id="b-查看-Unit-的状态"><a href="#b-查看-Unit-的状态" class="headerlink" title="b 查看 Unit 的状态"></a>b 查看 Unit 的状态</h4><p><code>systemctl status</code> # 显示系统状态</p></blockquote><p><code>systemctl status bluetooth.service</code> # 显示单个 Unit 的状态</p><p><code>systemctl -H root@rhel7.example.com status httpd.service</code> # 显示远程主机的某个 Unit 的状态</p><blockquote><h4 id="c-Unit-的管理"><a href="#c-Unit-的管理" class="headerlink" title="c Unit 的管理"></a>c Unit 的管理</h4><p><code>sudo systemctl start apache.service</code> # 立即启动一个服务</p></blockquote><p><code>sudo systemctl stop apache.service</code> # 立即停止一个服务</p><p><code>sudo systemctl restart apache.service</code> # 重启一个服务</p><p><code>sudo systemctl kill apache.service</code> # 杀死一个服务的所有子进程</p><p><code>sudo systemctl reload apache.service</code> # 重新加载一个服务的配置文件</p><p><code>sudo systemctl daemon-reload</code> # 重载所有修改过的配置文件</p><p><code>systemctl show httpd.service</code> # 显示某个 Unit 的所有底层参数</p><p><code>systemctl show -p CPUShares httpd.service</code> # 显示某个 Unit 的指定属性的值</p><p><code>sudo systemctl set-property httpd.service CPUShares=500</code> # 设置某个 Unit 的指定属性</p><blockquote><h4 id="d-查看-Unit-的依赖关系"><a href="#d-查看-Unit-的依赖关系" class="headerlink" title="d 查看 Unit 的依赖关系"></a>d 查看 Unit 的依赖关系</h4><p><code>systemctl list-dependencies nginx.service</code> # 列出一个 Unit 的所有依赖，默认不会列出 target 类型</p></blockquote><p><code>systemctl list-dependencies --all nginx.service</code> # 列出一个 Unit 的所有依赖，包括 target 类型</p><h3 id="3-3-服务的生命周期"><a href="#3-3-服务的生命周期" class="headerlink" title="3.3 服务的生命周期"></a>3.3 服务的生命周期</h3><p>当一个新的 Unit 文件被放入 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F; 或 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F; 目录中时，它是不会被自识识别的。</p><blockquote><h4 id="a-服务的激活"><a href="#a-服务的激活" class="headerlink" title="a 服务的激活"></a>a 服务的激活</h4></blockquote><ul><li>systemctl enable：在 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F; 建立服务的符号链接，指向 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F; 中</li><li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和ExecStartPost 命令<blockquote><h4 id="b-服务的启动和停止"><a href="#b-服务的启动和停止" class="headerlink" title="b 服务的启动和停止"></a>b 服务的启动和停止</h4></blockquote></li><li>systemctl start：依次启动定义在 Unit 文件中的 ExecStartPre、ExecStart 和 ExecStartPost 命令</li><li>systemctl stop：依次停止定义在 Unit 文件中的 ExecStopPre、ExecStop 和 ExecStopPost 命令</li><li>systemctl restart：重启服务</li><li>systemctl kill：立即杀死服务<blockquote><h4 id="c-服务的开机启动和取消"><a href="#c-服务的开机启动和取消" class="headerlink" title="c 服务的开机启动和取消"></a>c 服务的开机启动和取消</h4></blockquote></li><li>systemctl enable：除了激活服务以外，也可以置服务为开机启动</li><li>systemctl disable：取消服务的开机启动<blockquote><h4 id="d-服务的修改和移除"><a href="#d-服务的修改和移除" class="headerlink" title="d 服务的修改和移除"></a>d 服务的修改和移除</h4></blockquote></li><li>systemctl daemon-reload：Systemd 会将 Unit 文件的内容写到缓存中，因此当 Unit 文件被更新时，需要告诉 Systemd 重新读取所有的 Unit 文件</li><li>systemctl reset-failed：移除标记为丢失的 Unit 文件。在删除 Unit 文件后，由于缓存的关系，即使通过 daemon-reload 更新了缓存，在 list-units 中依然会显示标记为 not-found 的 Unit。</li></ul><h3 id="3-4-Target-管理"><a href="#3-4-Target-管理" class="headerlink" title="3.4 Target 管理"></a>3.4 Target 管理</h3><p>Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。</p><p>在传统的 SysV-init 启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。</p><p><code>systemctl list-unit-files --type=target</code> # 查看当前系统的所有 Target</p><p><code>systemctl list-dependencies multi-user.target</code> # 查看一个 Target 包含的所有 Unit</p><p><code>systemctl get-default</code> # 查看启动时的默认 Target</p><p><code>sudo systemctl set-default multi-user.target</code> # 设置启动时的默认 Target</p><p><code>sudo systemctl isolate multi-user.target</code> # 切换 Target 时，默认不关闭前一个 Target 启动的进程，systemctl isolate 命令改变这种行为，关闭前一个 Target 里面所有不属于后一个 Target 的进程</p><h3 id="3-5-日志管理"><a href="#3-5-日志管理" class="headerlink" title="3.5 日志管理"></a>3.5 日志管理</h3><p>Systemd 通过其标准日志服务 Journald 提供的配套程序 journalctl 将其管理的所有后台进程打印到 std:out（即控制台）的输出重定向到了日志文件。</p><p>Systemd 的日志文件是二进制格式的，必须使用 Journald 提供的 journalctl 来查看，默认不带任何参数时会输出系统和所有后台进程的混合日志。</p><p>默认日志最大限制为所在文件系统容量的 10%，可以修改 &#x2F;etc&#x2F;systemd&#x2F;journald.conf 中的 SystemMaxUse 来指定该最大限制。</p><h2 id="4-Systemd-工具集"><a href="#4-Systemd-工具集" class="headerlink" title="4 Systemd 工具集"></a>4 Systemd 工具集</h2><ul><li>systemctl：用于检查和控制各种系统服务和资源的状态</li><li>bootctl：用于查看和管理系统启动分区</li><li>hostnamectl：用于查看和修改系统的主机名和主机信息</li><li>journalctl：用于查看系统日志和各类应用服务日志</li><li>localectl：用于查看和管理系统的地区信息</li><li>loginctl：用于管理系统已登录用户和 Session 的信息</li><li>machinectl：用于操作 Systemd 容器</li><li>timedatectl：用于查看和管理系统的时间和时区信息</li><li>systemd-analyze 显示此次系统启动时运行每个服务所消耗的时间，可以用于分析系统启动过程中的性能瓶颈</li><li>systemd-ask-password：辅助性工具，用星号屏蔽用户的任意输入，然后返回实际输入的内容</li><li>systemd-cat：用于将其他命令的输出重定向到系统日志</li><li>systemd-cgls：递归地显示指定 CGroup 的继承链</li><li>systemd-cgtop：显示系统当前最耗资源的 CGroup 单元</li><li>systemd-escape：辅助性工具，用于去除指定字符串中不能作为 Unit 文件名的字符</li><li>systemd-hwdb：Systemd 的内部工具，用于更新硬件数据库</li><li>systemd-delta：对比当前系统配置与默认系统配置的差异</li><li>systemd-detect-virt：显示主机的虚拟化类型</li><li>systemd-inhibit：用于强制延迟或禁止系统的关闭、睡眠和待机事件</li><li>systemd-machine-id-setup：Systemd 的内部工具，用于给 Systemd 容器生成 ID</li><li>systemd-notify：Systemd 的内部工具，用于通知服务的状态变化</li><li>systemd-nspawn：用于创建 Systemd 容器</li><li>systemd-path：Systemd 的内部工具，用于显示系统上下文中的各种路径配置</li><li>systemd-run：用于将任意指定的命令包装成一个临时的后台服务运行</li><li>systemd-stdio- bridge：Systemd 的内部 工具，用于将程序的标准输入输出重定向到系统总线</li><li>systemd-tmpfiles：Systemd 的内部工具，用于创建和管理临时文件目录</li><li>systemd-tty-ask-password-agent：用于响应后台服务进程发出的输入密码请求<h3 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h3>[1].<a href="https://cloud.tencent.com/developer/article/1516125">https://cloud.tencent.com/developer/article/1516125</a></li></ul><p>[2].<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/chap-managing_services_with_systemd">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/chap-managing_services_with_systemd</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RHEL9 RPM Fusion Repo</title>
      <link href="/p/37b5c1cf.html"/>
      <url>/p/37b5c1cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Install-RPM-Fusion-for-RHEL9"><a href="#1-Install-RPM-Fusion-for-RHEL9" class="headerlink" title="1. Install RPM Fusion for RHEL9"></a>1. Install RPM Fusion for RHEL9</h2><pre><code> yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm  yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-9.noarch.rpm</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RHEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Podman Volumes and SELinux</title>
      <link href="/p/bc1c9a7a.html"/>
      <url>/p/bc1c9a7a.html</url>
      
        <content type="html"><![CDATA[<h2 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h2><p>Security-Enhanced Linux(SELinux)是一种适用于Linux系统的安全架构，它允许管理员更好地控制谁可以访问系统<a href="https://www.redhat.com/en/topics/linux/what-is-selinux">WhatisSELinux?</a>。详细有关SELinux的叙述参考<a href="https://m-zhoujie2.gitbooks.io/-linux-devops-2/content/chapter3-10.html">SELinux策略与规则</a>。</p><h2 id="1-Problem-Intro"><a href="#1-Problem-Intro" class="headerlink" title="1. Problem Intro"></a>1. Problem Intro</h2><p>当Podman运行在启用了SELinux的系统上，且需要映射Volumes时，将会遇到权限问题。</p><p>在以非root账户运行podman容器时，<code>/home/user/</code>目录下的文件可能存在以下的上下文权限：<code>unconfined_u:object_r:data_home_t:s0</code>，但是podman volumes需要这样的权限<code>system_u:object_r:container_file_t:s0</code>才能正常运行。</p><p>podman在运行时创建的容器卷将自动设置适当的上下文。 但是，对于<code>/home/user/</code>目录卷，podman默认不会更改上下文。</p><h2 id="2-Auto-Lables"><a href="#2-Auto-Lables" class="headerlink" title="2. Auto Lables"></a>2. Auto Lables</h2><p>podman提供了两种lables用于运行时修改安全上下文：<code>:z</code>和<code>:Z</code></p><ul><li>Shared Lables</li><li>Private Lables</li></ul><p>Shared Lables 允许多个容器同时访问一个volume；</p><p>Private labels 只允许特定的容器访问该volum。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h2><p>[1]. <a href="https://blog.christophersmart.com/2021/01/31/podman-volumes-and-selinux/">https://blog.christophersmart.com/2021/01/31/podman-volumes-and-selinux/</a></p><p>[2]. <a href="https://m-zhoujie2.gitbooks.io/-linux-devops-2/content/chapter3-10.html">https://m-zhoujie2.gitbooks.io/-linux-devops-2/content/chapter3-10.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SELinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于docker和podman安装后的一些操作</title>
      <link href="/p/4d2b55e8.html"/>
      <url>/p/4d2b55e8.html</url>
      
        <content type="html"><![CDATA[<p>Docker安装之后总会有一些操作，这里提供一个AIO解决方案。</p><h2 id="1-不加sudo执行docker命令"><a href="#1-不加sudo执行docker命令" class="headerlink" title="1. 不加sudo执行docker命令"></a>1. 不加sudo执行docker命令</h2><p>加用户到 docker 用户组</p><pre><code>cat /etc/group | grep docker # 查找 docker 组，确认其是否存在groups # 列出自己的用户组，确认自己在不在 docker 组中# 如果 docker 组不存在，则添加之：sudo groupadd docker# 将当前用户添加到 docker 组sudo gpasswd -a $&#123;USER&#125; docker# 重启服务sudo service docker restart# 切换一下用户组（刷新缓存）newgrp - docker;# 必须逐行执行，不知道为什么，批量执行时第二条不会生效newgrp - `groups $&#123;USER&#125; | cut -d&#39; &#39; -f1`;# 或者，注销并重新登录pkill X</code></pre><h2 id="2-配置加速地址"><a href="#2-配置加速地址" class="headerlink" title="2. 配置加速地址"></a>2. 配置加速地址</h2><h3 id="1-docker-配置镜像"><a href="#1-docker-配置镜像" class="headerlink" title="(1). docker 配置镜像"></a>(1). docker 配置镜像</h3><p>创建或修改 <code>/etc/docker/daemon.json</code>：</p><pre><code>    &#123;        &quot;registry-mirrors&quot;: [            &quot;https://1nj0zren.mirror.aliyuncs.com&quot;,            &quot;https://docker.mirrors.ustc.edu.cn&quot;,            &quot;http://f1361db2.m.daocloud.io&quot;,            &quot;https://registry.docker-cn.com&quot;        ]    &#125;</code></pre><ul><li>镜像地址可以换成其他的</li></ul><h3 id="2-podman-配置镜像加速"><a href="#2-podman-配置镜像加速" class="headerlink" title="(2). podman 配置镜像加速"></a>(2). podman 配置镜像加速</h3><p>修改文件<code>/etc/containers/registries.conf</code><br>修改为以下内容：</p><pre><code>[[registry]]prefix = &quot;docker.io&quot;location = &quot;xxxxxxxx.mirror.aliyuncs.com&quot;</code></pre><h2 id="3-修改docker默认的存储位置"><a href="#3-修改docker默认的存储位置" class="headerlink" title="3. 修改docker默认的存储位置"></a>3. 修改docker默认的存储位置</h2><h3 id="1-首先暂停docker-服务"><a href="#1-首先暂停docker-服务" class="headerlink" title="(1). 首先暂停docker 服务"></a>(1). 首先暂停docker 服务</h3><p><code>sudo systemctl stop docker</code></p><h3 id="2-将文件移到指定目录"><a href="#2-将文件移到指定目录" class="headerlink" title="(2). 将文件移到指定目录"></a>(2). 将文件移到指定目录</h3><p><code>mv /var/lib/docker/ /home/dockerdata</code></p><h3 id="3-创建软连接"><a href="#3-创建软连接" class="headerlink" title="(3). 创建软连接"></a>(3). 创建软连接</h3><p><code>ln -s /home/dockerdata/ /var/lib/docker</code></p><h3 id="4-重启docker"><a href="#4-重启docker" class="headerlink" title="(4). 重启docker"></a>(4). 重启docker</h3><p><code>sudo systemctl restart docker</code></p><h2 id="4-docker-io-国内镜像"><a href="#4-docker-io-国内镜像" class="headerlink" title="4. docker.io 国内镜像"></a>4. docker.io 国内镜像</h2><p>docker官方中国区 <code>https://registry.docker-cn.com</code></p><p>网易 <code>http://hub-mirror.c.163.com</code></p><p>USTC <code>http://docker.mirrors.ustc.edu.cn</code></p><p>阿里云 <code>http://&lt;你的ID&gt;.mirror.aliyuncs.com</code></p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1].<a href="http://www.markjour.com/article/docker-no-root.html">http://www.markjour.com/article/docker-no-root.html</a></p><p>[2].<a href="https://juejin.cn/post/6844903840303546376">https://juejin.cn/post/6844903840303546376</a></p><p>[3].<a href="https://blog.csdn.net/glongljl/article/details/80158297">https://blog.csdn.net/glongljl/article/details/80158297</a></p><p>[4].<a href="https://blog.csdn.net/qq_21933797/article/details/115186907">https://blog.csdn.net/qq_21933797/article/details/115186907</a></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Podman </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Upgrade Introduction</title>
      <link href="/p/33f9c26.html"/>
      <url>/p/33f9c26.html</url>
      
        <content type="html"><![CDATA[<h2 id="Bref"><a href="#Bref" class="headerlink" title="Bref"></a>Bref</h2><p>低版本的Hexo存在modules不兼容的问题，故需要升级至最新版。</p><h2 id="1-Install-NPM-Modules"><a href="#1-Install-NPM-Modules" class="headerlink" title="1. Install NPM Modules"></a>1. Install NPM Modules</h2><p>分别安装<code>npm-check</code> 和 <code>npm-upgrade</code></p><pre><code>npm install npm-check -gnpm install npm-upgrade -g</code></pre><h2 id="2-Upgrade"><a href="#2-Upgrade" class="headerlink" title="2. Upgrade"></a>2. Upgrade</h2><p>依次运行<code>npm-check</code> 和 <code>npm-update</code></p><pre><code>npm-checknpm update -g</code></pre><ul><li><code>-g</code>的作用：表示全局。</li></ul><h2 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h2><p>[1]. <a href="https://www.jianshu.com/p/802182c01b59">https://www.jianshu.com/p/802182c01b59</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Container Image with Podman and Push to DockerHub</title>
      <link href="/p/b5e1d87d.html"/>
      <url>/p/b5e1d87d.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Build-Images"><a href="#1-Build-Images" class="headerlink" title="1. Build Images."></a>1. Build Images.</h2><p>使用命令</p><p><code>podman build -t TAGS .</code></p><ul><li>对于docker，只需要将<code>podman</code>换成<code>docker</code>。<h2 id="2-将Image推送到DockerHub"><a href="#2-将Image推送到DockerHub" class="headerlink" title="2. 将Image推送到DockerHub"></a>2. 将Image推送到DockerHub</h2>使用下列命令，将<code>username</code>和<code>password</code>替换为实际的用户名和密码<pre><code>podman push --creds username:password  \docker.io/library/IMAGENAME:latest \docker.io://ACCOUNT/IMAGENAME:latest</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Podman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH Configuration On Server</title>
      <link href="/p/5ce8a03b.html"/>
      <url>/p/5ce8a03b.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h1><h2 id="1-首先我们打开SSHD服务配置，打开指定认证用配置"><a href="#1-首先我们打开SSHD服务配置，打开指定认证用配置" class="headerlink" title="1. 首先我们打开SSHD服务配置，打开指定认证用配置"></a>1. 首先我们打开SSHD服务配置，打开指定认证用配置</h2><pre><code>$ vim /etc/ssh/sshd_config</code></pre><p>将默认注释符（#）去掉即可,内容如下</p><pre><code>Protocol 2PermitRootLogin yesRSAAuthentication yes PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys</code></pre><blockquote><p>Port：指定端口号为22</p><p>Protocol：指定ssh协议版本为2</p><p>PermitRootLogin：允许root账号登录</p><p>RSAAuthentication：开启rsa安全验证</p><p>PubkeyAuthentication：开启公钥认证</p><p>AuthorizedKeysFile：设置用户公钥文件存储位置</p></blockquote><h2 id="2-接着保存并重启SSHD服务，让配置生效"><a href="#2-接着保存并重启SSHD服务，让配置生效" class="headerlink" title="2. 接着保存并重启SSHD服务，让配置生效"></a>2. 接着保存并重启SSHD服务，让配置生效</h2><pre><code>$ service sshd restart</code></pre><p>由于AuthorizedKeysFile设置的公钥存放路径是.ssh&#x2F;authorized_keys，实际上是home目录下用户目录，而我们是用git用户，所以目标目录应该是&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys</p><pre><code>$ mkdir /home/git/.ssh</code></pre><h2 id="3-创建完成后将拥有者修改为git"><a href="#3-创建完成后将拥有者修改为git" class="headerlink" title="3. 创建完成后将拥有者修改为git"></a>3. 创建完成后将拥有者修改为git</h2><pre><code>$ chown -R git:root /home/git/.ssh</code></pre><h1 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h1><h2 id="1-首先，在客户端创建一个SSH连接密钥，指定验证方式是RSA-默认为DSA加密算法"><a href="#1-首先，在客户端创建一个SSH连接密钥，指定验证方式是RSA-默认为DSA加密算法" class="headerlink" title="1. 首先，在客户端创建一个SSH连接密钥，指定验证方式是RSA (默认为DSA加密算法)"></a>1. 首先，在客户端创建一个SSH连接密钥，指定验证方式是RSA (默认为DSA加密算法)</h2><pre><code>$ ssh-keygen -t rsa </code></pre><p>创建了公钥和私钥，会提示保存位置，如不想改变密钥位置且无密码，几次确认后，和Linux类似，会保存到当前用户下的.ssh目录，默认为id_rsa和id_rsa.pub文件。</p><h2 id="2-接着，将客户端公钥导入服务器端（将IP替换为服务器IP地址）"><a href="#2-接着，将客户端公钥导入服务器端（将IP替换为服务器IP地址）" class="headerlink" title="2. 接着，将客户端公钥导入服务器端（将IP替换为服务器IP地址）"></a>2. 接着，将客户端公钥导入服务器端（将IP替换为服务器IP地址）</h2><pre><code>$ ssh git@IP &#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></pre><h2 id="3-确认时还需要输入git用户密码，成功后回到服务器端查看是否存在authorized-keys文件，并修改权限"><a href="#3-确认时还需要输入git用户密码，成功后回到服务器端查看是否存在authorized-keys文件，并修改权限" class="headerlink" title="3. 确认时还需要输入git用户密码，成功后回到服务器端查看是否存在authorized_keys文件，并修改权限"></a>3. 确认时还需要输入git用户密码，成功后回到服务器端查看是否存在authorized_keys文件，并修改权限</h2><pre><code>$ chmod 700 /home/git/.ssh$ chmod 600 /home/git/.ssh/authorized_keys</code></pre><h2 id="4-客户端上再次clone仓库-将IP替换为服务器IP地址-仓库目录改成指定仓库目录-，测试是否成功"><a href="#4-客户端上再次clone仓库-将IP替换为服务器IP地址-仓库目录改成指定仓库目录-，测试是否成功" class="headerlink" title="4. 客户端上再次clone仓库(将IP替换为服务器IP地址,仓库目录改成指定仓库目录)，测试是否成功"></a>4. 客户端上再次clone仓库(将IP替换为服务器IP地址,仓库目录改成指定仓库目录)，测试是否成功</h2><pre><code>$ git clone git@IP:/opt/code/test.git</code></pre><h2 id="5-成功后，限制git用户通过SSH登录服务器-编辑-x2F-etc-x2F-passwd文件"><a href="#5-成功后，限制git用户通过SSH登录服务器-编辑-x2F-etc-x2F-passwd文件" class="headerlink" title="5. 成功后，限制git用户通过SSH登录服务器,编辑&#x2F;etc&#x2F;passwd文件"></a>5. 成功后，限制git用户通过SSH登录服务器,编辑&#x2F;etc&#x2F;passwd文件</h2><pre><code>$ vim /etc/passwd</code></pre><p>找到git用户的记录，将其中默认的&#x2F;bin&#x2F;bash改更为&#x2F;bin&#x2F;git-shell,实际如下</p><pre><code>git:x:1001:1001::/home/git:/usr/bin/git-shell</code></pre><h2 id="6-SSH修改端口号"><a href="#6-SSH修改端口号" class="headerlink" title="6. SSH修改端口号"></a>6. SSH修改端口号</h2><p>使用ssh默认的端口号存在不安全，被暴力破解的风险，为提高安全性，考虑修改ssh端口号。</p><h3 id="1-修改-etc-ssh-sshd-config"><a href="#1-修改-etc-ssh-sshd-config" class="headerlink" title="(1). 修改/etc/ssh/sshd_config"></a>(1). 修改<code>/etc/ssh/sshd_config</code></h3><p>参考第一步，修改文件中<code>Port</code> 后面的端口号为<code>XXX</code>,切勿与其他服务冲突</p><h3 id="2-打开防火墙"><a href="#2-打开防火墙" class="headerlink" title="(2). 打开防火墙"></a>(2). 打开防火墙</h3><p>防火墙默认阻断所有端口，需要打开ssh的新端口<br><code>firewall-cmd --zone=public --add-port=XXX/tcp --permanent</code></p><h3 id="3-设置SELinux"><a href="#3-设置SELinux" class="headerlink" title="(3). 设置SELinux"></a>(3). 设置SELinux</h3><p>在启用SELinux的系统上，未正确配置SELinux将导致sshd服务因权限不足无法正常开启。<br><code>semanage port -a -t ssh_port_t -p tcp XXX</code></p><ul><li>上述<code>XXX</code>均为端口号</li></ul><h2 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h2><p>[1]. <a href="https://zhuanlan.zhihu.com/p/40371444">https://zhuanlan.zhihu.com/p/40371444</a></p><p>[2]. <a href="https://liqimore.com/2020/change-default-ssh-port-for-centos/">https://liqimore.com/2020/change-default-ssh-port-for-centos/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The C Learning Notes</title>
      <link href="/p/8c29673c.html"/>
      <url>/p/8c29673c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-GCC-指定编译标准"><a href="#1-GCC-指定编译标准" class="headerlink" title="1. GCC 指定编译标准"></a>1. GCC 指定编译标准</h2><p><code>gcc -std=c99 filename.c</code></p><blockquote><ul><li>c99 c1x c11 为包括但不限定的其他标准</li></ul></blockquote><h2 id="2-GCC-指定输出文件"><a href="#2-GCC-指定输出文件" class="headerlink" title="2. GCC 指定输出文件"></a>2. GCC 指定输出文件</h2><p><code>gcc -o output_file filename.c</code></p><h2 id="3-GCC-包含库"><a href="#3-GCC-包含库" class="headerlink" title="3. GCC 包含库"></a>3. GCC 包含库</h2><p><code>gcc filename.c -I/usr/local/include</code></p><h2 id="4-GCC-链接库文件"><a href="#4-GCC-链接库文件" class="headerlink" title="4. GCC 链接库文件"></a>4. GCC 链接库文件</h2><p><code>gcc filename.c -lssl</code></p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> The-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装hexo环境</title>
      <link href="/p/2b9b8c2e.html"/>
      <url>/p/2b9b8c2e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><pre><code>sudo apt-get install npm -y</code></pre><h2 id="2-安装hexo框架"><a href="#2-安装hexo框架" class="headerlink" title="2. 安装hexo框架"></a>2. 安装hexo框架</h2><p>进入博客所在的文件夹，安装hexo</p><pre><code>sudo npm i hexo-cli -g</code></pre><p>安装必备组件</p><pre><code>sudo npm install</code></pre><p>检查hexo是否安装完成</p><pre><code>hexo -v</code></pre><h2 id="3-新建一个post"><a href="#3-新建一个post" class="headerlink" title="3. 新建一个post"></a>3. 新建一个post</h2><pre><code>hexo new post &quot;__Post_Name&quot;</code></pre><h2 id="4-发布博客"><a href="#4-发布博客" class="headerlink" title="4. 发布博客"></a>4. 发布博客</h2><pre><code>hexo d -g</code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activate RHEL9</title>
      <link href="/p/ea7a4905.html"/>
      <url>/p/ea7a4905.html</url>
      
        <content type="html"><![CDATA[<p>Cannot Activate RHEL Server with Free Developer Subscription, it can be fixed by the following commands:</p><pre><code>sudo subscription-manager remove --allsudo subscription-manager unregistersudo subscription-manager cleansudo subscription-manager registersudo subscription-manager refreshsudo subscription-manager attach --auto</code></pre><p>You should do the commands one by one.</p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1].<a href="https://access.redhat.com/discussions/3312101">https://access.redhat.com/discussions/3312101</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux批量修改文件权限</title>
      <link href="/p/6e94a30b.html"/>
      <url>/p/6e94a30b.html</url>
      
        <content type="html"><![CDATA[<p>在使用过程中，经常会遇到如下情况：</p><p>需要修改某个目录下的文件夹权限为：0755，所有者为root，文件权限为：0644，所有者为root</p><h2 id="1-单独设置某个目录下所有文件夹的权限"><a href="#1-单独设置某个目录下所有文件夹的权限" class="headerlink" title="1. 单独设置某个目录下所有文件夹的权限"></a>1. 单独设置某个目录下所有文件夹的权限</h2><pre><code>find -type d -exec chmod 0755 &#123;&#125; \;</code></pre><h2 id="2-单独设置某个目录下所有文件的权限"><a href="#2-单独设置某个目录下所有文件的权限" class="headerlink" title="2. 单独设置某个目录下所有文件的权限"></a>2. 单独设置某个目录下所有文件的权限</h2><pre><code>find -not -type d -exec chmod 644 &#123;&#125; \;</code></pre><h2 id="3-如果要单独设置文件夹的所有者，只需要将命令改成如下即可："><a href="#3-如果要单独设置文件夹的所有者，只需要将命令改成如下即可：" class="headerlink" title="3. 如果要单独设置文件夹的所有者，只需要将命令改成如下即可："></a>3. 如果要单独设置文件夹的所有者，只需要将命令改成如下即可：</h2><pre><code>find -type d -exec chown root.root &#123;&#125; \;</code></pre><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><ul><li>权限范围：<pre><code>    u ：目录或者文件的当前的用户    g ：目录或者文件的当前的群组    o ：除了目录或者文件的当前用户或群组之外的用户或者群组    a ：所有的用户及群组</code></pre></li><li>权限代号：<pre><code>    r ：读权限，用数字4表示    w ：写权限，用数字2表示    x ：执行权限，用数字1表示    – ：删除权限，用数字0表示    s ：特殊权限</code></pre></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1].<a href="https://justcode.ikeepstudying.com/2018/01/linux-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85chmod-chown/">https://justcode.ikeepstudying.com/2018/01/linux-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%92%8C%E6%89%80%E6%9C%89%E8%80%85chmod-chown/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Firewall 初探</title>
      <link href="/p/116d5314.html"/>
      <url>/p/116d5314.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-Firewall-规则相关命令"><a href="#Linux-Firewall-规则相关命令" class="headerlink" title="Linux Firewall 规则相关命令"></a>Linux Firewall 规则相关命令</h2><h3 id="1-添加放行端口"><a href="#1-添加放行端口" class="headerlink" title="1. 添加放行端口"></a>1. 添加放行端口</h3><p><code>sudo firewall-cmd --permanent --add-port=443/tcp</code></p><h3 id="2-删除放行端口"><a href="#2-删除放行端口" class="headerlink" title="2. 删除放行端口"></a>2. 删除放行端口</h3><p><code>sudo firewall-cmd --permanent --remove-port=443/tcp</code></p><h3 id="3-添加放行服务"><a href="#3-添加放行服务" class="headerlink" title="3. 添加放行服务"></a>3. 添加放行服务</h3><p><code>sudo firewall-cmd --permanent --add-service=http</code></p><h3 id="4-删除放行服务"><a href="#4-删除放行服务" class="headerlink" title="4. 删除放行服务"></a>4. 删除放行服务</h3><p><code>sudo firewall-cmd --permanent --remove-service=http</code></p><h3 id="重载防火墙"><a href="#重载防火墙" class="headerlink" title="重载防火墙"></a>重载防火墙</h3><p><code>sudo firewall-cmd --reload</code></p><h2 id="REF"><a href="#REF" class="headerlink" title="REF"></a>REF</h2><p>[1]. <a href="https://goto-linux.com/zh-cn/2020/6/13/%E5%A6%82%E4%BD%95%E5%9C%A8rhel-8-/-centos-8%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEsamba/">https://goto-linux.com/zh-cn/2020/6/13/%E5%A6%82%E4%BD%95%E5%9C%A8rhel-8-/-centos-8%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AEsamba/</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL Certificates with Certbot</title>
      <link href="/p/95d04bf.html"/>
      <url>/p/95d04bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="利用Certbot自动申请Let’s-Encrypt自签名SSL证书"><a href="#利用Certbot自动申请Let’s-Encrypt自签名SSL证书" class="headerlink" title="利用Certbot自动申请Let’s Encrypt自签名SSL证书"></a>利用Certbot自动申请Let’s Encrypt自签名SSL证书</h2><h2 id="1-Requirements"><a href="#1-Requirements" class="headerlink" title="1. Requirements"></a>1. Requirements</h2><ul><li>一个有公网IPv4&#x2F;IPv6的VPS</li><li>一个解析到VPS IP地址的子域名</li></ul><h2 id="2-Install-Certbot"><a href="#2-Install-Certbot" class="headerlink" title="2. Install Certbot"></a>2. Install Certbot</h2><p>CentOS&#x2F;RHEL:</p><pre><code>sudo yum install -y certbot.noarch</code></pre><p>Ubuntu&#x2F;Debian:</p><pre><code>sudo apt-get install -y certbot</code></pre><h2 id="3-Using-Certbot"><a href="#3-Using-Certbot" class="headerlink" title="3. Using Certbot"></a>3. Using Certbot</h2><h3 id="1-停止所有的WEB服务"><a href="#1-停止所有的WEB服务" class="headerlink" title="(1). 停止所有的WEB服务"></a>(1). 停止所有的WEB服务</h3><p>在Certbot申请证书过程中，会用到VPS的80和443端口，当有程序占用该端口时，程序会报错。</p><h3 id="2-Applying-for-SSL-Certifications"><a href="#2-Applying-for-SSL-Certifications" class="headerlink" title="(2). Applying for SSL Certifications"></a>(2). Applying for SSL Certifications</h3><pre><code>certbot certonly --standalone --email EMAIL_ADDRESS@example.com -d TEXT.example.com</code></pre><p>在交互确认界面确认验证信息。</p><p>完成申请后会显示证书存放的地址，一般为<br><code>/etc/letsencrypt/live/example.com/privkey.pem</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行安装KVM虚拟化系统</title>
      <link href="/p/b934e0d3.html"/>
      <url>/p/b934e0d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h2><pre><code>virt-install \    --name=openwrt \    --vcpus=1 \    --ram=512 \    --os-type=linux \    --disk path=/kvm/disk/openwrt.img,bus=ide \    --autostart \    --network bridge=br0,model=e1000 \    --network bridge=br0,model=e1000 \    --import \    --noautoconsole \    --graphics vnc,listen=0.0.0.0,password=000000</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> KVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文本处理命令浅析</title>
      <link href="/p/c3f19864.html"/>
      <url>/p/c3f19864.html</url>
      
        <content type="html"><![CDATA[<p>本文简单介绍Linux的三个文本处理命令-&gt;<code>grep</code>,<code>ask</code>,<code>sed</code></p><h2 id="1-grep"><a href="#1-grep" class="headerlink" title="1. grep"></a>1. grep</h2><p><code>grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</code></p><ul><li>参数：<pre><code>-a 或 --text : 不要忽略二进制的数据。-A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。-B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。-c 或 --count : 计算符合样式的列数。-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。-d &lt;动作&gt; 或 --directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。-e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。-f&lt;规则文件&gt; 或 --file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。-F 或 --fixed-regexp : 将样式视为固定字符串的列表。-G 或 --basic-regexp : 将样式视为普通的表示法来使用。-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。-i 或 --ignore-case : 忽略字符大小写的差别。-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。-o 或 --only-matching : 只显示匹配PATTERN 部分。-q 或 --quiet或--silent : 不显示任何信息。-r 或 --recursive : 此参数的效果和指定&quot;-d recurse&quot;参数相同。-s 或 --no-messages : 不显示错误信息。-v 或 --invert-match : 显示不包含匹配文本的所有行。-V 或 --version : 显示版本信息。-w 或 --word-regexp : 只显示全字符合的列。-x --line-regexp : 只显示全列符合的列。-y : 此参数的效果和指定&quot;-i&quot;参数相同。</code></pre></li></ul><h2 id="2-awk"><a href="#2-awk" class="headerlink" title="2. awk"></a>2. awk</h2><pre><code>awk [选项参数] &#39;script&#39; var=value file(s)或awk [选项参数] -f scriptfile var=value file(s)</code></pre><ul><li>参数说明：<pre><code>-F fs or --field-separator fs指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。-v var=value or --asign var=value赋值一个用户定义变量。-f scripfile or --file scriptfile从脚本文件中读取awk命令。-mf nnn and -mr nnn对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。-W compact or --compat, -W traditional or --traditional在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。-W copyleft or --copyleft, -W copyright or --copyright打印简短的版权信息。-W help or --help, -W usage or --usage打印全部awk选项和每个选项的简短说明。-W lint or --lint打印不能向传统unix平台移植的结构的警告。-W lint-old or --lint-old打印关于不能向传统unix平台移植的结构的警告。-W posix打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。-W re-interval or --re-inerval允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。-W source program-text or --source program-text使用program-text作为源代码，可与-f命令混用。-W version or --version打印bug报告信息的版本。</code></pre></li></ul><h2 id="3-sed"><a href="#3-sed" class="headerlink" title="3. sed"></a>3. sed</h2><p><code>sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</code></p><ul><li><p>参数说明：</p><pre><code>-e&lt;script&gt;或--expression=&lt;script&gt; 以选项中指定的script来处理输入的文本文件。-f&lt;script文件&gt;或--file=&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。-h或--help 显示帮助。-n或--quiet或--silent 仅显示script处理后的结果。-V或--version 显示版本信息。</code></pre></li><li><p>动作说明：</p><pre><code>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</code></pre><p>例：</p><pre><code>sed &#39;s/\&quot;//g;s/,//g;&#39;</code></pre></li></ul><h2 id="REF"><a href="#REF" class="headerlink" title="REF:"></a>REF:</h2><p>[1].<a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install FRP</title>
      <link href="/p/d16ee06d.html"/>
      <url>/p/d16ee06d.html</url>
      
        <content type="html"><![CDATA[<p>本文发布时的最新frp版本为<code>v0.36.2</code>，服务器以<code>x64</code>架构为例，客户端以<code>arm</code>架构为例</p><h2 id="Config-on-Server"><a href="#Config-on-Server" class="headerlink" title="Config on Server"></a>Config on Server</h2><h3 id="1-Download-FRP"><a href="#1-Download-FRP" class="headerlink" title="1. Download FRP"></a>1. Download FRP</h3><p>从<a href="https://github.com/fatedier/frp">fatedier&#x2F;frp</a>的<a href="https://github.com/fatedier/frp/releases">release</a>页面下载相应平台最新的预编译程序包。</p><p>在服务器的任意位置下载并解压</p><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.36.2/frp_0.36.2_linux_amd64.tar.gztar -zxvf frp*.tar.gz </code></pre><h3 id="2-Install-FRPS"><a href="#2-Install-FRPS" class="headerlink" title="2. Install FRPS"></a>2. Install FRPS</h3><pre><code>cd frp*mv frps /usr/bin/frpsmkdir /etc/frpmv frps.ini /etc/frp/frps.ini</code></pre><blockquote><p>From Step2 to Step4 need ROOT authority, you need add <code>sudo</code> before each command if NOT a ROOT user.</p></blockquote><h3 id="3-Configuration-of-FRPS"><a href="#3-Configuration-of-FRPS" class="headerlink" title="3. Configuration of FRPS"></a>3. Configuration of FRPS</h3><p>编辑frp的config文件<code>vim /etc/frps.ini</code>，按照如下的格式填写</p><pre><code>[common]bind_port = [your_port1]token =  [your_token]vhost_http_port = [your_port2]bing_udp_port = [your_port3]vhost_https_port = [your_port4]dashboard_port = [your_port5]dashboard_user = [User_name]dashboard_pwd = [your_Password]</code></pre><blockquote><p><code>[common]</code>之下的<code>bind_port</code>和<code>token</code>为必须项，其他均为可选项</p><p>在较新的版本中，<code>bind_port</code>、<code>vhost_http_port</code>、<code>vhost_https_port</code>可以设置为同一端口</p></blockquote><h3 id="4-Register-Service-and-Start-On-boot"><a href="#4-Register-Service-and-Start-On-boot" class="headerlink" title="4. Register Service and Start On boot"></a>4. Register Service and Start On boot</h3><pre><code>mv systemd/frps.service /etc/systemd/system/frps.servicesystemctl daemon-reloadsystemctl start frpssystemctl enable frps</code></pre><h2 id="Config-on-Client"><a href="#Config-on-Client" class="headerlink" title="Config on Client"></a>Config on Client</h2><blockquote><p>客户端的安装方式与服务器安装方式完全一致，仅在配置文件上有所不同，因此只对与服务器安装不同之处做出说明。</p></blockquote><h3 id="1-Download-FRP-for-Client"><a href="#1-Download-FRP-for-Client" class="headerlink" title="1. Download FRP for Client"></a>1. Download FRP for Client</h3><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.34.0/frp_0.34.0_linux_arm.tar.gz</code></pre><h3 id="2-Replace-all-frps-with-frpc"><a href="#2-Replace-all-frps-with-frpc" class="headerlink" title="2. Replace all frps with frpc"></a>2. Replace all <code>frps</code> with <code>frpc</code></h3><h3 id="3-Configuration-of-FRPC"><a href="#3-Configuration-of-FRPC" class="headerlink" title="3. Configuration of FRPC"></a>3. Configuration of FRPC</h3><p>编辑frp的config文件<code>vim /etc/frpc.ini</code>，按照如下的格式填写</p><pre><code>[common]server_addr = [your_ip]server_port = [your_port]token = [your_token][Service]type = [tcp,http,https...]local_ip = 127.0.0.1local_port = [your_local_service_port]remote_port = [your_remote_service_port]</code></pre><ul><li><code>server_addr</code>填写FRPS的ipv4地址</li><li><code>server_port</code>为服务器的<code>bind_port</code>对应的端口</li><li><code>token</code>为服务器对应的<code>token</code></li></ul><h2 id="Config-HTTP-Connection-for-Client"><a href="#Config-HTTP-Connection-for-Client" class="headerlink" title="Config HTTP Connection for Client"></a>Config HTTP Connection for Client</h2><h3 id="1-在域名网站设置好域名解析"><a href="#1-在域名网站设置好域名解析" class="headerlink" title="1. 在域名网站设置好域名解析"></a>1. 在域名网站设置好域名解析</h3><ul><li>将某个自定义域名的A&#x2F;AAAA记录解析到FRP服务器的公网IP地址</li></ul><h3 id="2-添加客户端设置"><a href="#2-添加客户端设置" class="headerlink" title="2. 添加客户端设置"></a>2. 添加客户端设置</h3><pre><code>[SERVICE_NAME]type = httplocal_ip = 127.0.0.1local_port = 0000custom_domains = CUSTOM_DOMAIN.com</code></pre><ul><li>CUSTOM_DOMAIN填入上一步设置好的域名<h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><blockquote><p>FRP一键安装脚本</p><ul><li>linux平台，amd64架构</li><li>默认服务端口<code>7000</code>，</li><li>dashboard用户名、密码均为admin</li><li>Token 为随机</li></ul></blockquote><h3 id="1-下载一键安装脚本"><a href="#1-下载一键安装脚本" class="headerlink" title="1. 下载一键安装脚本"></a>1. 下载一键安装脚本</h3><pre><code>wget https://gitlab.dashdreams.com/Haoran.Qi/RaspberryPi/-/blob/master/FRP_OneKey/install_frp.sh</code></pre><h3 id="2-运行脚本"><a href="#2-运行脚本" class="headerlink" title="2. 运行脚本"></a>2. 运行脚本</h3><p><code>./install_frp.sh</code></p><blockquote><p>ROOT authority needed, add <code>sudo</code> before each command if NOT a ROOT user.</p></blockquote></li></ul><h2 id="REF-https-github-com-fatedier-frp"><a href="#REF-https-github-com-fatedier-frp" class="headerlink" title="REF: https://github.com/fatedier/frp"></a>REF: <a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></h2>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FRP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基本语句</title>
      <link href="/p/95144f8a.html"/>
      <url>/p/95144f8a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接MySQL"><a href="#1-连接MySQL" class="headerlink" title="1. 连接MySQL"></a>1. 连接MySQL</h2><p><code>mysql -u root -p</code></p><blockquote><p>linux 下需要用管理员运行 <code>sudo</code>，原因未知。</p></blockquote><h2 id="2-MySQL管理"><a href="#2-MySQL管理" class="headerlink" title="2. MySQL管理"></a>2. MySQL管理</h2><h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="(1). 添加用户"></a>(1). 添加用户</h3><pre><code>GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP    -&gt; ON DATABASE.*    -&gt; TO &#39;user&#39;@&#39;localhost&#39;    -&gt; IDENTIFIED BY &#39;password&#39;;</code></pre><blockquote><p>上述命令为向<code>DATABASE</code>的数据库添加<code>user</code>的用户，密码为<code>password</code><br>MySQL语句以<code>;</code>结束</p></blockquote><h3 id="2-USE-DATABASES"><a href="#2-USE-DATABASES" class="headerlink" title="(2). USE DATABASES :"></a>(2). USE DATABASES :</h3><p>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</p><p><code>mysql&gt; use DATABASE;</code></p><h3 id="3-SHOW-DATABASES"><a href="#3-SHOW-DATABASES" class="headerlink" title="(3). SHOW DATABASES :"></a>(3). SHOW DATABASES :</h3><p>列出 MySQL 数据库管理系统的数据库列表。</p><h3 id="4-SHOW-TABLES"><a href="#4-SHOW-TABLES" class="headerlink" title="(4). SHOW TABLES:"></a>(4). SHOW TABLES:</h3><p>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p><h3 id="5-SHOW-COLUMNS-FROM-数据表"><a href="#5-SHOW-COLUMNS-FROM-数据表" class="headerlink" title="(5). SHOW COLUMNS FROM 数据表:"></a>(5). SHOW COLUMNS FROM 数据表:</h3><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p><h3 id="6-SHOW-INDEX-FROM-数据表"><a href="#6-SHOW-INDEX-FROM-数据表" class="headerlink" title="(6). SHOW INDEX FROM 数据表:"></a>(6). SHOW INDEX FROM 数据表:</h3><p>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p><h2 id="3-MySQL创建数据库"><a href="#3-MySQL创建数据库" class="headerlink" title="3. MySQL创建数据库"></a>3. MySQL创建数据库</h2><h3 id="1-CREATE-DATABASE-数据库名"><a href="#1-CREATE-DATABASE-数据库名" class="headerlink" title="(1). CREATE DATABASE 数据库名;"></a>(1). CREATE DATABASE 数据库名;</h3><h3 id="2-使用-mysqladmin-创建数据库"><a href="#2-使用-mysqladmin-创建数据库" class="headerlink" title="(2). 使用 mysqladmin 创建数据库"></a>(2). 使用 mysqladmin 创建数据库</h3><p><code>mysqladmin -u root -p create 数据库名</code></p><h2 id="4-MySQL删除数据库"><a href="#4-MySQL删除数据库" class="headerlink" title="4. MySQL删除数据库"></a>4. MySQL删除数据库</h2><h3 id="1-drop-database-数据库名"><a href="#1-drop-database-数据库名" class="headerlink" title="(1). drop database 数据库名;"></a>(1). drop database 数据库名;</h3><h3 id="2-使用-mysqladmin-删除数据库"><a href="#2-使用-mysqladmin-删除数据库" class="headerlink" title="(2). 使用 mysqladmin 删除数据库"></a>(2). 使用 mysqladmin 删除数据库</h3><p><code>mysqladmin -u root -p drop 数据库名</code></p><h2 id="5-MySQL选择数据库"><a href="#5-MySQL选择数据库" class="headerlink" title="5. MySQL选择数据库"></a>5. MySQL选择数据库</h2><p><code>use 数据库名；</code></p><h2 id="6-MySQL-创建数据表"><a href="#6-MySQL-创建数据表" class="headerlink" title="6. MySQL 创建数据表"></a>6. MySQL 创建数据表</h2><pre><code>CREATE TABLE table_name(   -&gt; id INT NOT NULL AUTO_INCREMENT,   -&gt; title VARCHAR(100) NOT NULL,   -&gt; author VARCHAR(40) NOT NULL,   -&gt; date DATE,   -&gt; PRIMARY KEY ( id )   -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><blockquote><ul><li>如果你不想字段为 NULL 可以设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。</li><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li><li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul></blockquote><h2 id="7-MySQL-删除数据表"><a href="#7-MySQL-删除数据表" class="headerlink" title="7. MySQL 删除数据表"></a>7. MySQL 删除数据表</h2><p><code>DROP TABLE table_name;</code></p><h2 id="8-MySQL-插入数据"><a href="#8-MySQL-插入数据" class="headerlink" title="8. MySQL 插入数据"></a>8. MySQL 插入数据</h2><pre><code>INSERT INTO table_name ( field1, field2,...fieldN )                       VALUES                       ( value1, value2,...valueN );</code></pre><ul><li>读取数据表：<code>select * from table_name;</code></li></ul><h2 id="9-MySQL-查询数据"><a href="#9-MySQL-查询数据" class="headerlink" title="9. MySQL 查询数据"></a>9. MySQL 查询数据</h2><pre><code>SELECT column_name,column_nameFROM table_name[WHERE Clause][LIMIT N][ OFFSET M]</code></pre><h2 id="10-MySQL-WHERE子句"><a href="#10-MySQL-WHERE子句" class="headerlink" title="10 . MySQL WHERE子句"></a>10 . MySQL WHERE子句</h2><pre><code>SELECT field1, field2,...fieldN FROM table_name1, table_name2...[WHERE condition1 [AND [OR]] condition2.....</code></pre><blockquote><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul></blockquote><h2 id="11-MySQL-UPDATE-更新"><a href="#11-MySQL-UPDATE-更新" class="headerlink" title="11. MySQL UPDATE 更新"></a>11. MySQL UPDATE 更新</h2><pre><code>UPDATE table_name SET field1=new-value1, field2=new-value2[WHERE Clause]</code></pre><h2 id="12-MySQL-DELETE-语句"><a href="#12-MySQL-DELETE-语句" class="headerlink" title="12. MySQL DELETE 语句"></a>12. MySQL DELETE 语句</h2><p><code>DELETE FROM table_name [WHERE Clause]</code></p><blockquote><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul></blockquote><h2 id="13-MySQL-LIKE-子句"><a href="#13-MySQL-LIKE-子句" class="headerlink" title="13. MySQL LIKE 子句"></a>13. MySQL LIKE 子句</h2><pre><code>SELECT field1, field2,...fieldN FROM table_nameWHERE field1 LIKE condition1 [AND [OR]] filed2 = &#39;somevalue&#39;</code></pre><blockquote><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE子句代替等号 &#x3D;。</li><li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li></ul></blockquote><h2 id="14-MySQL-UNION"><a href="#14-MySQL-UNION" class="headerlink" title="14. MySQL UNION"></a>14. MySQL UNION</h2><pre><code>SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions]UNION [ALL | DISTINCT]SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions];</code></pre><blockquote><ul><li>expression1, expression2, … expression_n: 要检索的列。</li><li>tables: 要检索的数据表。</li><li>WHERE conditions: 可选， 检索条件。</li><li>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li>ALL: 可选，返回所有结果集，包含重复数据。</li></ul></blockquote><h2 id="15-MySQL-排序"><a href="#15-MySQL-排序" class="headerlink" title="15. MySQL 排序"></a>15. MySQL 排序</h2><pre><code>SELECT field1, field2,...fieldN FROM table_name1, table_name2...ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</code></pre><p><code>SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</code></p><blockquote><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul></blockquote><h2 id="16-MySQL-分组"><a href="#16-MySQL-分组" class="headerlink" title="16. MySQL 分组"></a>16. MySQL 分组</h2><pre><code>SELECT column_name, function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name;</code></pre><h2 id="17-MySQL-连接的使用"><a href="#17-MySQL-连接的使用" class="headerlink" title="17. MySQL 连接的使用"></a>17. MySQL 连接的使用</h2><blockquote><ul><li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li><li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li><li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul></blockquote><pre><code>SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a     INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</code></pre><pre><code>SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a     LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</code></pre><pre><code>SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a     RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</code></pre><h2 id="18-MySQL-NULL-值处理"><a href="#18-MySQL-NULL-值处理" class="headerlink" title="18. MySQL NULL 值处理"></a>18. MySQL NULL 值处理</h2><p>我们已经知道 MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p><p>为了处理这种情况，MySQL提供了三大运算符:</p><p>IS NULL: 当列的值是 NULL,此运算符返回 true。</p><p>IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。</p><p>&lt;&#x3D;&gt;: 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</p><p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 &#x3D; NULL 或 !&#x3D; NULL 在列中查找 NULL 值 。</p><p>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 NULL，即 NULL &#x3D; NULL 返回 NULL 。</p><p>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p><h2 id="19-MySQL-正则表达式"><a href="#19-MySQL-正则表达式" class="headerlink" title="19. MySQL 正则表达式"></a>19. MySQL 正则表达式</h2><h2 id="20-MySQL-事务"><a href="#20-MySQL-事务" class="headerlink" title="20. MySQL 事务"></a>20. MySQL 事务</h2><h2 id="21-MySQL-ALTER命令"><a href="#21-MySQL-ALTER命令" class="headerlink" title="21. MySQL ALTER命令"></a>21. MySQL ALTER命令</h2><h2 id="22-MySQL-索引"><a href="#22-MySQL-索引" class="headerlink" title="22. MySQL 索引"></a>22. MySQL 索引</h2><h2 id="23-MySQL-临时表"><a href="#23-MySQL-临时表" class="headerlink" title="23. MySQL 临时表"></a>23. MySQL 临时表</h2><h2 id="24-MySQL-复制表"><a href="#24-MySQL-复制表" class="headerlink" title="24. MySQL 复制表"></a>24. MySQL 复制表</h2><h2 id="25-MySQL-元数据"><a href="#25-MySQL-元数据" class="headerlink" title="25. MySQL 元数据"></a>25. MySQL 元数据</h2><h2 id="26-MySQL-序列使用"><a href="#26-MySQL-序列使用" class="headerlink" title="26. MySQL 序列使用"></a>26. MySQL 序列使用</h2><h2 id="27-MySQL-处理重复数据"><a href="#27-MySQL-处理重复数据" class="headerlink" title="27. MySQL 处理重复数据"></a>27. MySQL 处理重复数据</h2><h2 id="28-MySQL-及-SQL-注入"><a href="#28-MySQL-及-SQL-注入" class="headerlink" title="28. MySQL 及 SQL 注入"></a>28. MySQL 及 SQL 注入</h2><h2 id="29-MySQL-导出数据"><a href="#29-MySQL-导出数据" class="headerlink" title="29. MySQL 导出数据"></a>29. MySQL 导出数据</h2><h2 id="30-MySQL-导入数据"><a href="#30-MySQL-导入数据" class="headerlink" title="30. MySQL 导入数据"></a>30. MySQL 导入数据</h2><h2 id="31-MySQL-函数"><a href="#31-MySQL-函数" class="headerlink" title="31. MySQL 函数"></a>31. MySQL 函数</h2><h2 id="32-MySQL-运算符"><a href="#32-MySQL-运算符" class="headerlink" title="32. MySQL 运算符"></a>32. MySQL 运算符</h2><h2 id="REF-https-www-runoob-com-mysql"><a href="#REF-https-www-runoob-com-mysql" class="headerlink" title="REF: https://www.runoob.com/mysql/"></a>REF: <a href="https://www.runoob.com/mysql/">https://www.runoob.com/mysql/</a></h2>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPPOE with RaspberryPi</title>
      <link href="/p/de718867.html"/>
      <url>/p/de718867.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装pppoe、pppoeconf和pppstatus"><a href="#1-安装pppoe、pppoeconf和pppstatus" class="headerlink" title="1. 安装pppoe、pppoeconf和pppstatus"></a>1. 安装pppoe、pppoeconf和pppstatus</h2><p><code>sudo apt-get install pppoe pppoeconf pppstatus</code></p><h2 id="2-配置pppoe"><a href="#2-配置pppoe" class="headerlink" title="2. 配置pppoe"></a>2. 配置pppoe</h2><p><code>pppoeconf</code></p><p>运行<code>pppoeconf</code>命令，然后，一路点击“是”就可以了，当然中间会提示你输入你的PPPOE上网帐号和密码。</p><h2 id="3-查看是否有生成ppp0"><a href="#3-查看是否有生成ppp0" class="headerlink" title="3. 查看是否有生成ppp0"></a>3. 查看是否有生成ppp0</h2><p><code>ifconfig</code></p><h2 id="4-将ppp0的网络分享给wlan0实现热点"><a href="#4-将ppp0的网络分享给wlan0实现热点" class="headerlink" title="4. 将ppp0的网络分享给wlan0实现热点"></a>4. 将ppp0的网络分享给wlan0实现热点</h2><p>在<a href="https://gitlab.dashdreams.com/Haoran.Qi/RaspberryPi/-/blob/master/WIFI/pi-setup-wifi.sh">Haoran.Qi&#x2F;RaspberryPi</a>中，将71~74行的<code>eth0</code>改成<code>ppp0</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本控制PWM风扇</title>
      <link href="/p/13c5d772.html"/>
      <url>/p/13c5d772.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于shell脚本的树莓派pwm风扇扇热控制"><a href="#基于shell脚本的树莓派pwm风扇扇热控制" class="headerlink" title="基于shell脚本的树莓派pwm风扇扇热控制"></a>基于shell脚本的树莓派pwm风扇扇热控制</h2><p>直接引用别人的<a href="https://github.com/tankririri/RaspberryPi_CPU_PWM">tankririri&#x2F;RaspberryPi_CPU_PWM</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI模型</title>
      <link href="/p/a204a128.html"/>
      <url>/p/a204a128.html</url>
      
        <content type="html"><![CDATA[<p><strong>开放式系统互联模型-Open System Interconnection Model(OSI)</strong> 是一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。</p><p>根据建议X.200，OSI将计算机网络体系结构划分为以下七层，标有1～7，第1层在底部。 现“OSI&#x2F;RM”是英文“Open Systems Interconnection Reference Model”的缩写。</p><h2 id="层次划分"><a href="#层次划分" class="headerlink" title="层次划分"></a>层次划分</h2><p><a href="#%E7%AC%AC7%E5%B1%82-%E5%BA%94%E7%94%A8%E5%B1%82">第7层 应用层</a></p><p><a href="#%E7%AC%AC6%E5%B1%82-%E8%A1%A8%E8%BE%BE%E5%B1%82">第6层 表达层</a></p><p><a href="#%E7%AC%AC5%E5%B1%82-%E4%BC%9A%E8%AF%9D%E5%B1%82">第5层 会话层</a></p><p><a href="#%E7%AC%AC4%E5%B1%82-%E4%BC%A0%E8%BE%93%E5%B1%82">第4层-传输层</a></p><p><a href="#%E7%AC%AC3%E5%B1%82-%E7%BD%91%E7%BB%9C%E5%B1%82">第3层 网络层</a></p><p><a href="#%E7%AC%AC2%E5%B1%82-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">第2层 数据链路层</a></p><p><a href="#%E7%AC%AC1%E5%B1%82-%E7%89%A9%E7%90%86%E5%B1%82">第1层 物理层</a></p><h3 id="第7层-应用层"><a href="#第7层-应用层" class="headerlink" title="第7层 应用层"></a>第7层 应用层</h3><p>主条目：应用层<br>应用层（Application Layer）提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。</p><h3 id="第6层-表达层"><a href="#第6层-表达层" class="headerlink" title="第6层 表达层"></a>第6层 表达层</h3><p>主条目：表达层<br>表达层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p><h3 id="第5层-会话层"><a href="#第5层-会话层" class="headerlink" title="第5层 会话层"></a>第5层 会话层</h3><p>主条目：会话层<br>会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</p><h3 id="第4层-传输层"><a href="#第4层-传输层" class="headerlink" title="第4层 传输层"></a>第4层 传输层</h3><p>主条目：传输层<br>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。</p><h3 id="第3层-网络层"><a href="#第3层-网络层" class="headerlink" title="第3层 网络层"></a>第3层 网络层</h3><p>主条目：网络层<br>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络资料。例如:互联网协议（IP）等。</p><h3 id="第2层-数据链路层"><a href="#第2层-数据链路层" class="headerlink" title="第2层 数据链路层"></a>第2层 数据链路层</h3><p>主条目：数据链路层<br>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成信息框（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</p><p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</p><h3 id="第1层-物理层"><a href="#第1层-物理层" class="headerlink" title="第1层 物理层"></a>第1层 物理层</h3><p>主条目：物理层<br>物理层（Physical Layer）在局部局域网上传送数据帧（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gogs配置详解</title>
      <link href="/p/7dd2a61d.html"/>
      <url>/p/7dd2a61d.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置与运行"><a href="#配置与运行" class="headerlink" title="配置与运行"></a>配置与运行</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h4><p>默认配置都保存在<code>conf/app.ini</code>，您永远不需要编辑它。该文件从<code>v0.6.0</code>版本开始被嵌入到二进制中。</p><h4 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h4><p>那么，在不允许修改默认配置文件<code>conf/app.ini</code>的情况下，怎么才能自定义配置呢？很简单，只要创建<code>custom/conf/app.ini</code>就可以！在<code>custom/conf/app.ini</code>文件中修改相应选项的值即可。</p><p>例如，需要改变仓库根目录的路径：</p><pre><code>[repository]ROOT = /home/jiahuachen/gogs-repositories</code></pre><p>当然，您也可以修改数据库配置：</p><pre><code>[database]PASSWD = root</code></pre><h4 id="为什么要这么做？"><a href="#为什么要这么做？" class="headerlink" title="为什么要这么做？"></a>为什么要这么做？</h4><p>乍一看，这么做有些复杂，但是这么做可以有效地保护您的自定义配置不被破坏：</p><ul><li>从二进制安装的用户，可以直接替换二进制及其它文件而不至于重新编写自定义配置。</li><li>从源码安装的用户，可以避免由于版本管理系统导致的文件修改冲突。</li></ul><h3 id="运行-Gogs-服务"><a href="#运行-Gogs-服务" class="headerlink" title="运行 Gogs 服务"></a>运行 Gogs 服务</h3><h4 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h4><ul><li><p>您需要在<code>custom/conf/app.ini</code>文件中将选项<code>security -&gt; INSTALL_LOCK</code>的值设置为<code>true</code>。</p></li><li><p>您可以使用超能的<code>make</code>命令：</p><pre><code>$ make$ ./gogs web</code></pre><h3 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h3><p>脚本均放置在<code>scripts</code>目录，但请在仓库根目录执行它们</p></li><li><p>Gogs 支持多种方式的启动：</p><ul><li>普通：只需执行 <code>./gogs web</code></li><li>守护进程：详见 <code>scripts</code> 文件夹</li></ul></li><li><p>然后访问 <code>/install</code> 来完成首次运行的配置工作</p></li></ul><h2 id="配置文件手册"><a href="#配置文件手册" class="headerlink" title="配置文件手册"></a>配置文件手册</h2><p>本手册会详尽地描述有关 Gogs 配置文件的选项，帮助您更好地理解和使用 Gogs。</p><p>请记住，任何修改都是发生在 <code>custom/conf/app.ini</code> 自定义配置文件中，该文件的具体位置与您的设置有关。</p><p>完整的默认设置可以通过 <code>app.ini</code> 文件查看。如果您看到类似<code>%(X)s</code>字符，这是由 <code>ini </code>提供的递归取值的特性。</p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>APP_NAME</td><td>应用名称，可以改成您的组织或公司名称</td></tr><tr><td>RUN_USER</td><td>运行应用的用户名称，我们建议您使用 git，但如果您在个人计算机上运行 Gogs，请修改为您的系统用户名称。如果没有正确设置这个值，很可能导致您的应用崩溃</td></tr><tr><td>RUN_MODE</td><td>鉴于性能和其它考虑，建议在部署环境下修改为 prod 模式。在您完成安装操作时，该值也会被设置为 prod</td></tr></tbody></table><h4 id="服务器-server"><a href="#服务器-server" class="headerlink" title="服务器 (server)"></a>服务器 (<code>server</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>PROTOCOL</td><td>http 或 https</td></tr><tr><td>DOMAIN</td><td>服务器域名</td></tr><tr><td>ROOT_URL</td><td>公开的完整 URL 路径</td></tr><tr><td>HTTP_ADDR</td><td>应用 HTTP 监听地址</td></tr><tr><td>HTTP_PORT</td><td>应用 HTTP 监听端口号</td></tr><tr><td>UNIX_SOCKET_PERMISSION</td><td>Unix 套接字文件的权限</td></tr><tr><td>LOCAL_ROOT_URL</td><td>用于 Gogs 工作进程（如：SSH）回访应用的本地（DMZ）URL，一般情况下请保持默认值，除非您的 SSH 服务器节点与 HTTP 并不是同一个节点入口</td></tr><tr><td>DISABLE_SSH</td><td>当 SSH 功能不可用时可以禁用</td></tr><tr><td>START_SSH_SERVER</td><td>启用该选项来启动内置 SSH 服务器</td></tr><tr><td>SSH_DOMAIN</td><td>允许公用网络访问 SSH 的域名</td></tr><tr><td>SSH_PORT</td><td>SSH 端口号，如果不为 22 的话可以在此修改</td></tr><tr><td>SSH_LISTEN_HOST</td><td>内置 SSH 服务器监听的地址</td></tr><tr><td>SSH_LISTEN_PORT</td><td>内置 SSH 服务器监听的端口</td></tr><tr><td>SSH_ROOT_PATH</td><td>SSH 根目录，一般为 ~&#x2F;.ssh，但必须填写为 &#x2F;home&#x2F;git&#x2F;.ssh</td></tr><tr><td>REWRITE_AUTHORIZED_KEYS_AT_START</td><td>激活该选项以在应用启动时自动重写 authorized_keys 文件，该选项在使用内置 SSH 服务器时将会被自动禁用</td></tr><tr><td>SSH_KEY_TEST_PATH</td><td>用于测试 SSH 公钥的临时目录</td></tr><tr><td>SSH_KEYGEN_PATHssh-keygen</td><td>程序的路径，默认为 ssh-keygen 即通过系统路径查找</td></tr><tr><td>MINIMUM_KEY_SIZE_CHECK</td><td>指定不同类型的公钥的最小密钥大小</td></tr><tr><td>OFFLINE_MODE</td><td>激活该选项来禁止从 CDN 获取静态资源，同时 Gravatar 服务也将被自动禁用</td></tr><tr><td>DISABLE_ROUTER_LOG</td><td>激活该选项来禁止打印路由日志</td></tr><tr><td>CERT_FILE</td><td>HTTPS 授权文件路径</td></tr><tr><td>KEY_FILE</td><td>HTTPS 的密钥文件路径</td></tr><tr><td>STATIC_ROOT_PATH</td><td>模板文件和静态文件的上级目录，默认为应用二进制所在的位置</td></tr><tr><td>APP_DATA_PATH</td><td>应用内部数据的存放目录</td></tr><tr><td>ENABLE_GZIP</td><td>激活该选项来启用应用级别 GZIP 支持</td></tr><tr><td>LANDING_PAGE</td><td>未登录用户的默认首页，可以是 home 或 explore（探索页）</td></tr></tbody></table><h4 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库 (repository)"></a>仓库 (repository)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ROOT</td><td>用户仓库存储根目录，必须为绝对路径，默认为 ~&#x2F;<user name>&#x2F;gogs-repositories</td></tr><tr><td>SCRIPT_TYPE</td><td>系统脚本类型，一般情况下均为 bash，但有些用户反应只能使用 sh</td></tr><tr><td>ANSI_CHARSET</td><td>当遇到无法识别的字符集时使用的默认字符集</td></tr><tr><td>FORCE_PRIVATE</td><td>强制要求所有新建的仓库都是私有的</td></tr><tr><td>MAX_CREATION_LIMIT</td><td>全局默认的每个用户可创建创建仓库上限，-1 表示无限制</td></tr><tr><td>PREFERRED_LICENSES</td><td>建议用户首选的授权类型</td></tr><tr><td>DISABLE_HTTP_GIT</td><td>激活该选项来禁止用户通过 HTTP 对 Git 仓库进行交互操作，即用户只能通过 SSH 操作</td></tr><tr><td>ENABLE_LOCAL_PATH_MIGRATION</td><td>激活该选项来启用本地路径迁移仓库功能。启动后默认只有管理员可以使用，普通用户必须经由管理员授权</td></tr><tr><td>ENABLE_RAW_FILE_RENDER_MODE</td><td>激活该选项来启用在查看原始数据时对页面进行真实渲染，例如渲染实际的 HTML 页面，有潜在安全隐患</td></tr></tbody></table><h4 id="仓库-编辑器-repository-editor"><a href="#仓库-编辑器-repository-editor" class="headerlink" title="仓库 - 编辑器 (repository.editor)"></a>仓库 - 编辑器 (repository.editor)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>LINE_WRAP_EXTENSIONS</td><td>需要显示为行包装的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：<code>.txt,</code></td></tr></tbody></table><h4 id="仓库-文件上传-repository-upload"><a href="#仓库-文件上传-repository-upload" class="headerlink" title="仓库 - 文件上传 (repository.upload)"></a>仓库 - 文件上传 (repository.upload)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>激活该选项来启用仓库文件上传功能</td></tr><tr><td>TEMP_PATH</td><td>文件上传的临时存放目录</td></tr><tr><td>ALLOWED_TYPES</td><td>允许上传的文件类型（例如：”image&#x2F;jpeg</td></tr><tr><td>FILE_MAX_SIZE</td><td>单个上传的文件的最大体积，以 MB 为单位</td></tr><tr><td>MAX_FILES</td><td>单次同时上传的最多文件个数</td></tr></tbody></table><h4 id="版本发布-附件-release-attachment"><a href="#版本发布-附件-release-attachment" class="headerlink" title="版本发布 - 附件 (release.attachment)"></a>版本发布 - 附件 (release.attachment)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>激活该选项来启用版本发布附件功能</td></tr><tr><td>PATH</td><td>存放附件的路径</td></tr><tr><td>ALLOWED_TYPES</td><td>允许上传的 MIME 类型，例如 “image&#x2F;jpeg</td></tr><tr><td>MAX_SIZE</td><td>最大允许上传的附件体积，单位为 MB，例如 32</td></tr><tr><td>MAX_FILES</td><td>最大允许一次性上传的附件个数，例如 10</td></tr></tbody></table><h4 id="Markdown-markdown"><a href="#Markdown-markdown" class="headerlink" title="Markdown (markdown)"></a>Markdown (markdown)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLE_HARD_LINE_BREAK</td><td>指示是否启用硬性换行扩展</td></tr><tr><td>CUSTOM_URL_SCHEMES</td><td>允许被解析为链接的自定义 URL 方案，例如 git（用于 git:&#x2F;&#x2F;）和magnet（用于 magnet:&#x2F;&#x2F;）</td></tr><tr><td>FILE_EXTENSIONS</td><td>需要被渲染为 Markdown 格式的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：<code>.markdown,</code></td></tr></tbody></table><h4 id="Smartypants-smartypants"><a href="#Smartypants-smartypants" class="headerlink" title="Smartypants (smartypants)"></a>Smartypants (smartypants)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>指示是否启用 Smartypants 扩展</td></tr></tbody></table><h4 id="HTTP-http"><a href="#HTTP-http" class="headerlink" title="HTTP (http)"></a>HTTP (http)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ACCESS_CONTROL_ALLOW_ORIGIN</td><td>头信息 Access-Control-Allow-Origin 的自定义值，默认为空，即不响应此头信息</td></tr></tbody></table><h4 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库 (database)"></a>数据库 (database)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>DB_TYPE</td><td>数据库类型，可以是 mysql、postgres、mssql 或 sqlite3</td></tr><tr><td>HOST</td><td>数据库主机地址与端口</td></tr><tr><td>NAME</td><td>数据库名称</td></tr><tr><td>USER</td><td>数据库用户名</td></tr><tr><td>PASSWD</td><td>数据库用户密码</td></tr><tr><td>SSL_MODE</td><td>仅限 PostgreSQL 使用</td></tr><tr><td>PATH</td><td>仅限 SQLite3 使用，数据库文件路径</td></tr></tbody></table><h4 id="应用管理-admin"><a href="#应用管理-admin" class="headerlink" title="应用管理 (admin)"></a>应用管理 (admin)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>DISABLE_REGULAR_ORG_CREATION激活该选项来禁止普通用户（非管理员）创建组织</td><td></td></tr></tbody></table><h4 id="安全-security"><a href="#安全-security" class="headerlink" title="安全 (security)"></a>安全 (security)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>INSTALL_LOCK</td><td>用于指示是否允许访问安装页面（该页面可以设置管理员帐号，因此该选项非常重要）</td></tr><tr><td>SECRET_KEY</td><td>全局的加密密钥，务必修改该值以确保您的服务器安全（会在每次安装时自动生成随机字符串）</td></tr><tr><td>LOGIN_REMEMBER_DAYS</td><td>记住登录的天数</td></tr><tr><td>COOKIE_USERNAME</td><td>记录用户名的 Cookie 名称</td></tr><tr><td>COOKIE_REMEMBER_NAME</td><td>记录用户自动登录信息的 Cookie 名称</td></tr><tr><td>REVERSE_PROXY_AUTHENTICATION_USER</td><td>反向代理认证用户的 Header 字段名</td></tr></tbody></table><h4 id="服务-service"><a href="#服务-service" class="headerlink" title="服务 (service)"></a>服务 (service)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ACTIVE_CODE_LIVE_MINUTES</td><td>激活码的有效期，单位为分钟</td></tr><tr><td>RESET_PASSWD_CODE_LIVE_MINUTES</td><td>重置密码的有效期，单位为分钟</td></tr><tr><td>REGISTER_EMAIL_CONFIRM</td><td>激活该选项来要求注册用户必须验证邮箱，要求已启用 Mailer</td></tr><tr><td>DISABLE_REGISTRATION</td><td>激活该选项来禁止用户注册功能，只能由管理员创建帐号</td></tr><tr><td>SHOW_REGISTRATION_BUTTON</td><td>用于指示是否显示注册按钮</td></tr><tr><td>REQUIRE_SIGNIN_VIEW</td><td>激活该选项来要求用户必须登录才能浏览任何页面</td></tr><tr><td>ENABLE_CACHE_AVATAR</td><td>激活该选项来缓存 Gravatar 的头像</td></tr><tr><td>ENABLE_NOTIFY_MAIL</td><td>激活该选项来发送通知邮件给关注者，例如创建 issue 时，要求已启用 Mailer</td></tr><tr><td>ENABLE_REVERSE_PROXY_AUTHENTICATION</td><td>激活该选项来开启反向代理用户认证，请从 #165 了解更多信息</td></tr><tr><td>ENABLE_REVERSE_PROXY_AUTO_REGISTRATION</td><td>激活该选项来开启反向代理用户认证的自动注册功能</td></tr><tr><td>DISABLE_MINIMUM_KEY_SIZE_CHECK</td><td>激活该选项来禁止检查响应类型的密钥最小长度</td></tr><tr><td>ENABLE_CAPTCHA</td><td>激活该选项以在用户注册时要求输入验证码</td></tr></tbody></table><h4 id="Web-钩子-webhook"><a href="#Web-钩子-webhook" class="headerlink" title="Web 钩子 (webhook)"></a>Web 钩子 (webhook)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>TYPES</td><td>启动的 Web 钩子类型，可以是 gogs、slack、discord或dingtalk</td></tr><tr><td>QUEUE_LENGTH</td><td>Web钩子队列长度，如果发现部分Webhook未能成功触发，可考虑增加该值</td></tr><tr><td>DELIVER_TIMEOUT</td><td>发送通知的超时时间，以秒为单位</td></tr><tr><td>SKIP_TLS_VERIFY</td><td>指示是否允许向具有非信任证书的地址发送通知</td></tr><tr><td>PAGING_NUM</td><td>Web 钩子历史页面每页显示记录条数</td></tr></tbody></table><h4 id="邮件-mailer"><a href="#邮件-mailer" class="headerlink" title="邮件 (mailer)"></a>邮件 (mailer)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>启用该选项以激活邮件服务</td></tr><tr><td>SUBJECT_PREFIX</td><td>邮件标题的前缀</td></tr><tr><td>HOST</td><td>SMTP 主机地址与端口</td></tr><tr><td>DISABLE_HELO</td><td>禁用 HELO 操作</td></tr><tr><td>HELO_HOSTNAME</td><td>HELO 操作的自定义主机名</td></tr><tr><td>SKIP_VERIFY</td><td>不验证自签发证书的有效性</td></tr><tr><td>FROM</td><td>邮箱的来自地址，遵循 RFC 5322规范，可以是一个单纯的邮箱地址或者 “名字” <a href="mailto:&#101;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;">&#101;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;</a> 的形式</td></tr><tr><td>USER</td><td>邮箱用户名</td></tr><tr><td>PASSWD</td><td>邮箱密码</td></tr><tr><td>USE_PLAIN_TEXT</td><td>使用 text&#x2F;plain 作为邮件内容格式</td></tr><tr><td>备注：Gogs 仅支持使用 STARTTLS 的 SMTP 协议</td><td></td></tr></tbody></table><h4 id="缓存-cache"><a href="#缓存-cache" class="headerlink" title="缓存 (cache)"></a>缓存 (cache)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ADAPTER</td><td>缓存引擎适配器，可以为 memory、redis 或 memcache。如果您使用 redis 或 memcache，请确保使用 -tags 选项重新构建所有依赖，例如：go build -tags&#x3D;’redis’</td></tr><tr><td>INTERVAL</td><td>仅限内存缓存使用，GC 周期，单位为秒</td></tr><tr><td>HOST</td><td>仅限 redis 和 memcache 使用，主机地址和端口号</td></tr><tr><td>-</td><td>Redis：network&#x3D;tcp,addr&#x3D;127.0.0.1:6379,password&#x3D;macaron,db&#x3D;0,pool_size&#x3D;100,idle_timeout&#x3D;180</td></tr><tr><td>-</td><td>Memache：127.0.0.1:9090;127.0.0.1:9091</td></tr></tbody></table><h4 id="会话-session"><a href="#会话-session" class="headerlink" title="会话 (session)"></a>会话 (session)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>PROVIDER</td><td>Session 引擎提供者，可以是 memory、file、redis 或 mysql</td></tr><tr><td>PROVIDER_CONFIG</td><td>如果提供者为 file，则为文件根目录；如果为其它提供者，则为主机地址和端口号</td></tr><tr><td>COOKIE_SECURE</td><td>激活该选项以要求所有 session 操作均通过 HTTPS</td></tr><tr><td>GC_INTERVAL_TIME</td><td>GC 周期，单位为秒</td></tr></tbody></table><h4 id="图片-picture"><a href="#图片-picture" class="headerlink" title="图片 (picture)"></a>图片 (picture)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>AVATAR_UPLOAD_PATH</td><td>存放用户上传头像的目录</td></tr><tr><td>GRAVATAR_SOURCE</td><td>可以是 gravatar、duoshuo 或任何 URL，例如：<a href="http://cn.gravatar.com/avatar/">http://cn.gravatar.com/avatar/</a></td></tr><tr><td>DISABLE_GRAVATAR</td><td>激活该选项来仅使用本地头像</td></tr><tr><td>ENABLE_FEDERATED_AVATAR</td><td>激活该选项来启用 Federated 头像服务（<a href="http://www.libravatar.org),当/">http://www.libravatar.org），当</a> Gravatar 被禁用时此选项无法生效</td></tr></tbody></table><h4 id="附件-attachment"><a href="#附件-attachment" class="headerlink" title="附件 (attachment)"></a>附件 (attachment)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>激活该选项以允许用户上传附件</td></tr><tr><td>PATH</td><td>存放附件的路径</td></tr><tr><td>ALLOWED_TYPES</td><td>允许上传的 MIME 类型，例如 “image&#x2F;jpeg</td></tr><tr><td>MAX_SIZE</td><td>最大允许上传的附件体积，单位为 MB，例如 4</td></tr><tr><td>MAX_FILES</td><td>最大允许一次性上传的附件个数，例如 5</td></tr></tbody></table><h4 id="时间-time"><a href="#时间-time" class="headerlink" title="时间 (time)"></a>时间 (time)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>FORMAT</td><td>指定日期的输出格式，默认为 RFC1123，其它可选的格式为 ANSIC、UnixDate、RubyDate、RFC822、RFC822Z、RFC850、RFC1123、RFC1123Z、RFC3339、RFC3339Nano、Kitchen、Stamp、StampMilli、StampMicro 和 StampNano。访问 <a href="http://golang.org/pkg/time/#pkg-constants">http://golang.org/pkg/time/#pkg-constants</a> 查看详情</td></tr></tbody></table><h4 id="日志-log"><a href="#日志-log" class="headerlink" title="日志 (log)"></a>日志 (log)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ROOT_PATH</td><td>日志文件的根目录</td></tr><tr><td>MODE</td><td>日志记录模式，默认为 console。如果想要开启多模式，请使用逗号分割，例如：”console, file”</td></tr><tr><td>LEVEL</td><td>基本日志级别，默认为 Trace</td></tr></tbody></table><h4 id="日志-控制台-log-console"><a href="#日志-控制台-log-console" class="headerlink" title="日志 - 控制台 (log.console)"></a>日志 - 控制台 (log.console)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>LEVEL</td><td>控制台日志级别，留空则继承父值</td></tr></tbody></table><h4 id="日志-文件-log-file"><a href="#日志-文件-log-file" class="headerlink" title="日志 - 文件 (log.file)"></a>日志 - 文件 (log.file)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>LEVEL</td><td>文件日志级别，留空则继承父值</td></tr><tr><td>LOG_ROTATE</td><td>激活该选项以启用日志文件自转</td></tr><tr><td>DAILY_ROTATE</td><td>激活该选项以进行日常自转</td></tr><tr><td>MAX_SIZE_SHIFT</td><td>自转需要达到的最大文件体积，使用位左移，默认为 28 即 1 &lt;&lt; 28，表示 256MB</td></tr><tr><td>MAX_LINES</td><td>自转需要达到的最大文件行数，默认为 1000000</td></tr><tr><td>MAX_DAYS</td><td>保留自转文件的最长期限，默认为 7 天后删除</td></tr></tbody></table><h4 id="日志-Slack-log-slack"><a href="#日志-Slack-log-slack" class="headerlink" title="日志 - Slack (log.slack)"></a>日志 - Slack (log.slack)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>LEVEL</td><td>Slack 日志级别，留空则继承父值</td></tr><tr><td>URL</td><td>Slack Web 钩子 URL</td></tr></tbody></table><h4 id="日志-Discord-log-discord"><a href="#日志-Discord-log-discord" class="headerlink" title="日志 - Discord (log.discord)"></a>日志 - Discord (log.discord)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>LEVEL</td><td>Discord 日志级别，留空则继承父值</td></tr><tr><td>URL</td><td>Discord Web 钩子 URL</td></tr><tr><td>USERNAME</td><td>在 Web 钩子中显示的用户名</td></tr></tbody></table><h4 id="Cron-cron"><a href="#Cron-cron" class="headerlink" title="Cron (cron)"></a>Cron (cron)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>激活该选项以允许周期性运行 Cron 任务</td></tr><tr><td>RUN_AT_START</td><td>激活该选项以允许在启动时执行 Cron 任务</td></tr></tbody></table><h4 id="Cron-更新镜像-cron-update-mirrors"><a href="#Cron-更新镜像-cron-update-mirrors" class="headerlink" title="Cron - 更新镜像 (cron.update_mirrors)"></a>Cron - 更新镜像 (cron.update_mirrors)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SCHEDULE</td><td>定时更新仓库镜像的 Cron 语法，例如：@every 1h</td></tr></tbody></table><h4 id="Cron-仓库健康检查-cron-repo-health-check"><a href="#Cron-仓库健康检查-cron-repo-health-check" class="headerlink" title="Cron - 仓库健康检查 (cron.repo_health_check)"></a>Cron - 仓库健康检查 (cron.repo_health_check)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SCHEDULE</td><td>定时进行仓库健康检查的 Cron 语法，例如：@every 24h</td></tr><tr><td>TIMEOUT</td><td>仓库健康检查超时的定义语法，例如：60s</td></tr><tr><td>ARGS</td><td>git fsck 命令的参数，例如：–unreachable –tags</td></tr></tbody></table><h4 id="Cron-仓库统计检查-cron-check-repo-stats"><a href="#Cron-仓库统计检查-cron-check-repo-stats" class="headerlink" title="Cron - 仓库统计检查 (cron.check_repo_stats)"></a>Cron - 仓库统计检查 (cron.check_repo_stats)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>RUN_AT_START</td><td>激活该选项以在启动时执行仓库统计检查</td></tr><tr><td>SCHEDULE</td><td>定时进行仓库统计检查的 Cron 语法，例如：@every 24h</td></tr></tbody></table><h4 id="Cron-仓库归档清理-cron-repo-archive-cleanup"><a href="#Cron-仓库归档清理-cron-repo-archive-cleanup" class="headerlink" title="Cron - 仓库归档清理 (cron.repo_archive_cleanup)"></a>Cron - 仓库归档清理 (cron.repo_archive_cleanup)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>RUN_AT_START</td><td>激活该选项以在启动时执行仓库归档清理</td></tr><tr><td>SCHEDULE</td><td>定时进行仓库归档清理的 Cron 语法，例如：@every 24h</td></tr><tr><td>OLDER_THAN</td><td>仓库归档的文件有效期，过期的归档将被清理，例如：24h</td></tr></tbody></table><h4 id="Git-git"><a href="#Git-git" class="headerlink" title="Git (git)"></a>Git (git)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>DISABLE_DIFF_HIGHLIGHT</td><td>激活该选项以禁用行内差异高亮</td></tr><tr><td>MAX_GIT_DIFF_LINES</td><td>差异对比页面单个文件显示的最大行数</td></tr><tr><td>MAX_GIT_DIFF_LINE_CHARACTERS</td><td>差异对比页面单行显示的最大字符数</td></tr><tr><td>MAX_GIT_DIFF_FILES</td><td>差异对比页面文件显示的最多个数</td></tr><tr><td>GC_ARGS</td><td>git gc 命令的参数，例如：–aggressive –auto</td></tr></tbody></table><h4 id="Git-超时-git-timeout"><a href="#Git-超时-git-timeout" class="headerlink" title="Git - 超时 (git.timeout)"></a>Git - 超时 (git.timeout)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>MIGRATE</td><td>仓库迁移操作超时，默认为 600 秒</td></tr><tr><td>MIRROR</td><td>仓库镜像同步操作超时，默认为 300 秒</td></tr><tr><td>CLONE</td><td>仓库克隆操作超时，默认为 300 秒</td></tr><tr><td>PULL</td><td>仓库拉取操作超时，默认为 300 秒</td></tr><tr><td>GC</td><td>仓库垃圾回收操作超时，默认为 60 秒</td></tr></tbody></table><h4 id="UI-ui"><a href="#UI-ui" class="headerlink" title="UI (ui)"></a>UI (ui)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>EXPLORE_PAGING_NUM</td><td>探索页面每页显示仓库的数量</td></tr><tr><td>ISSUE_PAGING_NUM</td><td>每页显示工单（Issue）的数量（应用到所有以列表形式显示工单的页面）</td></tr><tr><td>FEED_MAX_COMMIT_NUM</td><td>一条最新活动中显示代码提交（Commit）的最大数量</td></tr><tr><td>THEME_COLOR_META_TAG</td><td>被用于 Android &gt;&#x3D; 5.0 版本 “theme-color” 标记的值，无效的值将被忽略并使用默认值（查看详情）</td></tr><tr><td>MAX_DISPLAY_FILE_SIZE</td><td>显示到页面的最大文件体积（Byte）</td></tr></tbody></table><h4 id="UI-Admin-ui-admin"><a href="#UI-Admin-ui-admin" class="headerlink" title="UI - Admin (ui.admin)"></a>UI - Admin (ui.admin)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>USER_PAGING_NUM</td><td>用户管理页面每页显示记录条数</td></tr><tr><td>REPO_PAGING_NUM</td><td>仓库管理页面每页显示记录条数</td></tr><tr><td>NOTICE_PAGING_NUM</td><td>系统提示管理页面每页显示记录条数</td></tr><tr><td>ORG_PAGING_NUM</td><td>组织管理页面每页显示记录条数</td></tr></tbody></table><h4 id="Prometheus-prometheus"><a href="#Prometheus-prometheus" class="headerlink" title="Prometheus (prometheus)"></a>Prometheus (prometheus)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>ENABLED</td><td>激活该选项以启用 Prometheus 监控信息，默认为 true</td></tr><tr><td>ENABLE_BASIC_AUTH</td><td>激活该选项以启用 HTTP 基本认证保护监控信息数据，默认为 false</td></tr><tr><td>BASIC_AUTH_USERNAME</td><td>HTTP 基本认证的用户名</td></tr><tr><td>BASIC_AUTH_PASSWORD</td><td>HTTP 基本认证的密码</td></tr></tbody></table><h4 id="其他-other"><a href="#其他-other" class="headerlink" title="其他 (other)"></a>其他 (other)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>SHOW_FOOTER_BRANDING</td><td>激活该选项以在页脚显示 Gogs 推广信息</td></tr><tr><td>SHOW_FOOTER_VERSION</td><td>激活该选项以在页脚显示 Gogs 版本信息</td></tr><tr><td>SHOW_FOOTER_TEMPLATE_LOAD_TIME</td><td>激活该选项以在页脚显示 Gogs 模板加载时间</td></tr></tbody></table><h4 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h4><p>[1] <a href="https://www.cnblogs.com/sanduzxcvbnm/p/11351991.html">https://www.cnblogs.com/sanduzxcvbnm/p/11351991.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build a Git Using Gogs On RaspberryPi with Docker Employ Frp with Caddy Proxy and CDN in Cloudflare</title>
      <link href="/p/ea0e48ad.html"/>
      <url>/p/ea0e48ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><ul><li>在树莓派上运行Gogs，并且使用Docker部署</li><li>由于树莓派在内网，需要使用Frp进行内网穿透</li><li>使用Caddy+CDN代理，加速对Gogs的访问速度</li></ul><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>Raspberry 3B+</li><li>Domain</li><li>Cloudflare Account</li><li>VPS with Public IPv4 Address</li></ul><h2 id="1-Install-Docker-on-RaspberryPi-3B"><a href="#1-Install-Docker-on-RaspberryPi-3B" class="headerlink" title="1.  Install Docker on RaspberryPi 3B+"></a>1.  Install Docker on RaspberryPi 3B+</h2><h4 id="1-使用docker官方的一键安装脚本"><a href="#1-使用docker官方的一键安装脚本" class="headerlink" title="(1). 使用docker官方的一键安装脚本:"></a>(1). 使用docker官方的一键安装脚本:</h4><pre><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><h4 id="2-将当前用户加入docker组"><a href="#2-将当前用户加入docker组" class="headerlink" title="(2). 将当前用户加入docker组:"></a>(2). 将当前用户加入<code>docker</code>组:</h4><pre><code>sudo groupadd dockersudo usermod -aG docker $USER</code></pre><h4 id="3-为docker设置镜像加速：sudo-vim-etc-docker-daemon-json"><a href="#3-为docker设置镜像加速：sudo-vim-etc-docker-daemon-json" class="headerlink" title="(3). 为docker设置镜像加速：sudo vim /etc/docker/daemon.json"></a>(3). 为docker设置镜像加速：<code>sudo vim /etc/docker/daemon.json</code></h4><pre><code>&#123;    &quot;registry-mirrors&quot;: [        &quot;https://1nj0zren.mirror.aliyuncs.com&quot;,        &quot;https://docker.mirrors.ustc.edu.cn&quot;,        &quot;http://f1361db2.m.daocloud.io&quot;,        &quot;https://registry.docker-cn.com&quot;    ]&#125;</code></pre><p><code>sudo systemctl daemon-reload</code><br><code>sudo systemctl restart docker</code></p><h2 id="2-Install-Gogs-with-Docker"><a href="#2-Install-Gogs-with-Docker" class="headerlink" title="2. Install Gogs with Docker"></a>2. Install Gogs with Docker</h2><h4 id="1-下载镜像文件"><a href="#1-下载镜像文件" class="headerlink" title="(1). 下载镜像文件"></a>(1). 下载镜像文件</h4><p><code>docker pull gogs/gogs-rpi</code></p><h4 id="2-运行镜像"><a href="#2-运行镜像" class="headerlink" title="(2). 运行镜像"></a>(2). 运行镜像</h4><pre><code>docker run  \--name=gogs-rpi -d \--restart=always \-p 10022:22 -p 13000:3000 \-v /data/gogs:/data gogs/gogs-rpi</code></pre><ul><li>10022:22-&gt;将本机10022端口映射到docker内的22</li><li>13000:3000-&gt;将本机13000端口映射到docker内的3000</li><li>&#x2F;data&#x2F;gogs是本机存放数据的位置</li></ul><h2 id="3-Install-Gogs-with-docker-compose-Orchestration-using-MySQL-可选"><a href="#3-Install-Gogs-with-docker-compose-Orchestration-using-MySQL-可选" class="headerlink" title="3. Install Gogs with docker-compose Orchestration using MySQL(可选)"></a>3. Install Gogs with docker-compose Orchestration using MySQL(可选)</h2><h4 id="1-Install-docker-compose"><a href="#1-Install-docker-compose" class="headerlink" title="(1). Install docker-compose"></a>(1). Install docker-compose</h4><pre><code>sudo apt-get install docker-compose</code></pre><h4 id="2-编排docker-compose-yaml-内容"><a href="#2-编排docker-compose-yaml-内容" class="headerlink" title="(2). 编排docker-compose.yaml 内容"></a>(2). 编排docker-compose.yaml 内容</h4><pre><code>version: &quot;3&quot;services:    db:        image: mysql:5.7        container_name: MySQL5.7        restart: always        ports:            - &quot;13306:3306&quot;        volumes:            - $&#123;pwd_DB&#125;/gogs_DB:/var/lib/mysql        environment:            MYSQL_ROOT_PASSWORD: AdminMySQL            MYSQL_DATABASE: gogs            MYSQL_USER: gogs            MYSQL_PASSWORD: passwordgogs            TZ: Asia/Shanghai    docker-gogs:        depends_on:            - db        image: gogs/gogs        container_name: docker-gogs        restart: always        ports:            - &quot;10022:22&quot;            - &quot;13000:3000&quot;        volumes:            - $&#123;pwd_gogs&#125;/data:/data</code></pre><h4 id="3-运行docker容器"><a href="#3-运行docker容器" class="headerlink" title="(3). 运行docker容器"></a>(3). 运行docker容器</h4><p>进入<code>docker-compose.yaml</code>所在路径，运行：</p><pre><code>docker-compose up -d</code></pre><blockquote><h4 id="当使用MySQL作为数据存储时，在gogs的设置页面，需要将数据库地址设置为db-3306"><a href="#当使用MySQL作为数据存储时，在gogs的设置页面，需要将数据库地址设置为db-3306" class="headerlink" title="当使用MySQL作为数据存储时，在gogs的设置页面，需要将数据库地址设置为db:3306"></a>当使用MySQL作为数据存储时，在gogs的设置页面，需要将数据库地址设置为<code>db:3306</code></h4><h4 id="提供2中的docker脚本，和3中的docker-compose-yaml文件"><a href="#提供2中的docker脚本，和3中的docker-compose-yaml文件" class="headerlink" title="提供2中的docker脚本，和3中的docker-compose.yaml文件"></a>提供2中的<a href="https://gogs.dashdream.cn/haoran_qi/RaspberryPi/src/master/Gogs_MySQL/run_gogs.sh">docker</a>脚本，和3中的<a href="https://gogs.dashdream.cn/haoran_qi/RaspberryPi/src/master/Gogs_MySQL/docker-compose.yaml">docker-compose.yaml</a>文件</h4></blockquote><h2 id="4-Configuration-of-Domain"><a href="#4-Configuration-of-Domain" class="headerlink" title="4. Configuration of Domain"></a>4. Configuration of Domain</h2><h4 id="1-先将域名的nameservers改到cloudflare，参考Change-nameservers-to-cloudflare"><a href="#1-先将域名的nameservers改到cloudflare，参考Change-nameservers-to-cloudflare" class="headerlink" title="(1). 先将域名的nameservers改到cloudflare，参考Change nameservers to cloudflare"></a>(1). 先将域名的nameservers改到cloudflare，参考<a href="https://support.cloudflare.com/hc/en-us/articles/205195708-Step-3-Change-your-domain-name-servers-to-Cloudflare">Change nameservers to cloudflare</a></h4><h4 id="2-在Cloudflare中将域名解析到VPS的IP地址-并且将PrivateDNS关闭，橙色云-gt-灰色"><a href="#2-在Cloudflare中将域名解析到VPS的IP地址-并且将PrivateDNS关闭，橙色云-gt-灰色" class="headerlink" title="(2). 在Cloudflare中将域名解析到VPS的IP地址,并且将PrivateDNS关闭，橙色云-&gt;灰色"></a>(2). 在Cloudflare中将域名解析到VPS的IP地址,并且将PrivateDNS关闭，橙色云-&gt;灰色</h4><h4 id="3-在gogs配置完成后，将PrivateDNS打开"><a href="#3-在gogs配置完成后，将PrivateDNS打开" class="headerlink" title="(3). 在gogs配置完成后，将PrivateDNS打开"></a>(3). 在gogs配置完成后，将PrivateDNS打开</h4><h2 id="5-Configuration-of-FRP"><a href="#5-Configuration-of-FRP" class="headerlink" title="5. Configuration of FRP"></a>5. Configuration of FRP</h2><h3 id="Server-Config"><a href="#Server-Config" class="headerlink" title="Server Config"></a>Server Config</h3><pre><code>[common]bind_port = [your port1]token =  [your token]vhost_http_port = [your port2]bing_udp_port = [your port3]vhost_https_port = [your port4]</code></pre><h3 id="Client-Config"><a href="#Client-Config" class="headerlink" title="Client Config"></a>Client Config</h3><pre><code>[common]server_addr = [your ip]server_port = [your port]token = [your token][Gogs]type = tcplocal_ip = 127.0.0.1local_port = 13000remote_port = 8888</code></pre><blockquote><ul><li>此处需要注意<code>13000</code>端口为gogs容器在树莓派上映射的端口,要与之前docker上运行的端口对应</li></ul></blockquote><h2 id="6-Configuration-of-Caddy-On-VPS"><a href="#6-Configuration-of-Caddy-On-VPS" class="headerlink" title="6. Configuration of Caddy On VPS"></a>6. Configuration of Caddy On VPS</h2><h4 id="1-安装Caddy，参考用RaspberryPi搭建Aria2-Caddy2下载站"><a href="#1-安装Caddy，参考用RaspberryPi搭建Aria2-Caddy2下载站" class="headerlink" title="(1). 安装Caddy，参考用RaspberryPi搭建Aria2+Caddy2下载站"></a>(1). 安装Caddy，参考<a href="https://www.wannaexpresso.com/2020/04/21/aria-pi/">用RaspberryPi搭建Aria2+Caddy2下载站</a></h4><h4 id="2-配置Caddyfile-sudo-vim-etc-caddy-Caddyfile"><a href="#2-配置Caddyfile-sudo-vim-etc-caddy-Caddyfile" class="headerlink" title="(2). 配置Caddyfile:sudo vim /etc/caddy/Caddyfile"></a>(2). 配置Caddyfile:<code>sudo vim /etc/caddy/Caddyfile</code></h4><pre><code>gogs.yourdomain: &#123;        tls address@mail.com        proxy / 127.0.0.1:8888         proxy /captcha 127.0.0.1:8888&#125;</code></pre><ul><li>proxy &#x2F; 127.0.0.1:8888 表示将访问gogs.yourdomain:443的流量转发到本机的8888端口</li><li><a href="mailto:&#97;&#100;&#100;&#x72;&#101;&#115;&#x73;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#97;&#100;&#100;&#x72;&#101;&#115;&#x73;&#x40;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a>表示用户邮箱</li></ul><h4 id="3-重启Caddy-sudo-systemctl-restart-caddy"><a href="#3-重启Caddy-sudo-systemctl-restart-caddy" class="headerlink" title="(3). 重启Caddy:sudo systemctl restart caddy"></a>(3). 重启Caddy:<code>sudo systemctl restart caddy</code></h4><h2 id="7-Configuration-of-Gogs"><a href="#7-Configuration-of-Gogs" class="headerlink" title="7. Configuration of Gogs"></a>7. Configuration of Gogs</h2><h4 id="1-在浏览器中访问树莓派的-IPv4-13000-进行设置"><a href="#1-在浏览器中访问树莓派的-IPv4-13000-进行设置" class="headerlink" title="(1). 在浏览器中访问树莓派的 IPv4:13000 进行设置"></a>(1). 在浏览器中访问树莓派的 <code>IPv4:13000</code> 进行设置</h4><h4 id="2-在Domain中输入-yourdomain"><a href="#2-在Domain中输入-yourdomain" class="headerlink" title="(2). 在Domain中输入 yourdomain"></a>(2). 在Domain中输入 <code>yourdomain</code></h4><h4 id="3-EXTERNAL-URL-设置为https-gogs-yourdomain-443"><a href="#3-EXTERNAL-URL-设置为https-gogs-yourdomain-443" class="headerlink" title="(3). EXTERNAL_URL 设置为https://gogs.yourdomain:443/"></a>(3). <code>EXTERNAL_URL</code> 设置为<code>https://gogs.yourdomain:443/</code></h4><h4 id="4-完成安装后跳回第3-3，将Cloudflare的PrivateDNS打开。"><a href="#4-完成安装后跳回第3-3，将Cloudflare的PrivateDNS打开。" class="headerlink" title="(4). 完成安装后跳回第3.3，将Cloudflare的PrivateDNS打开。"></a>(4). 完成安装后跳回第3.3，将Cloudflare的PrivateDNS打开。</h4><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>通过该方式安装的gogs只能够通过https或者http协议进行git操作</li><li>通过将SSH端口进行FRP穿透可以实现SSH方式的操作，但是PrivateDNS无法支持SSH，所以需要关闭PrivateDNS。</li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h2><p>[1]. <a href="https://blog.ximcloud.cn/1199/%E6%A0%91%E8%8E%93%E6%B4%BE4b-ubuntu19-10-%E5%AE%89%E8%A3%85docker-gogs.html">Docker安装Gogs</a></p><p>[2]. <a href="https://li-aaron.github.io/2019/07/nas-frp-caddy-cloudfare/">Caddy配置</a></p><p>[3]. <a href="https://asdasd.page/2019/04/14/Local-Service-Tunneling-with-FRP-and-Caddy/">Local Service Tunneling with FRP and Caddy</a></p><p>[4]. <a href="https://github.com/fatedier/frp">fatedier&#x2F;frp</a></p>]]></content>
      
      
      <categories>
          
          <category> Container </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gogs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP Over DNS 实现绕过校园网计费</title>
      <link href="/p/dd98b78e.html"/>
      <url>/p/dd98b78e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Requirements"><a href="#1-Requirements" class="headerlink" title="1. Requirements"></a>1. Requirements</h2><ul><li>VPS -&gt; 以CentOS为例<br>-&gt; IP用123.123.123.123表示</li><li>域名 -&gt; 用domain.com 表示<br> -&gt; 子域名用tunnel表示</li></ul><h2 id="2-设置域名解析"><a href="#2-设置域名解析" class="headerlink" title="2. 设置域名解析"></a>2. 设置域名解析</h2><table><thead><tr><th>主机记录</th><th>记录</th><th>值</th></tr></thead><tbody><tr><td>NS</td><td>d2t</td><td>tunnel.domain.com</td></tr><tr><td>A</td><td>tunnel</td><td>123.123.123.123</td></tr></tbody></table><h2 id="3-伪装程序-iodine"><a href="#3-伪装程序-iodine" class="headerlink" title="3. 伪装程序(iodine)"></a>3. 伪装程序(iodine)</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><h4 id="1-安装iodine"><a href="#1-安装iodine" class="headerlink" title="(1). 安装iodine"></a>(1). 安装iodine</h4><pre><code>git clone https://github.com/yarrick/iodine.gitcd iodinemakemake install</code></pre><ul><li>编译安装需要GCC环境</li></ul><h4 id="2-运行iodine"><a href="#2-运行iodine" class="headerlink" title="(2). 运行iodine"></a>(2). 运行iodine</h4><p><code>iodined -f -c -P password 10.0.0.1 d2t.domain.com</code></p><ul><li>注释：<blockquote><p> -f 前台运行<br> -c 禁用检查所有传入请求的客户端IP地址；默认情况，来自不匹配IP请求将被拒绝。<br> -P 设置认证密码<br> 10.0.0.1 为保留地址</p></blockquote></li></ul><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>客户端为WSL2中Ubuntu20.04 LTS</p><h4 id="1-安装iodine-1"><a href="#1-安装iodine-1" class="headerlink" title="(1). 安装iodine"></a>(1). 安装iodine</h4><p><code>sudo apt-get install iodine</code></p><h4 id="2-运行iodine-1"><a href="#2-运行iodine-1" class="headerlink" title="(2). 运行iodine"></a>(2). 运行iodine</h4><p><code>sudo iodine -f -P password d2t.domain.com</code></p><h4 id="3-新开一个Terminal，通过SSH连接服务器，使用9999作为转发端口"><a href="#3-新开一个Terminal，通过SSH连接服务器，使用9999作为转发端口" class="headerlink" title="(3). 新开一个Terminal，通过SSH连接服务器，使用9999作为转发端口"></a>(3). 新开一个Terminal，通过SSH连接服务器，使用9999作为转发端口</h4><p><code>ssh USER@10.0.0.1 -p1234 -D 9999</code></p><ul><li>注释：<blockquote><p> USER 表示VPS的用户名<br> 1234 表示VPS上SSH的端口</p></blockquote></li></ul><h3 id="使用代理上网"><a href="#使用代理上网" class="headerlink" title="使用代理上网"></a>使用代理上网</h3><h4 id="1-浏览器中安装插件-SwitchyOmega"><a href="#1-浏览器中安装插件-SwitchyOmega" class="headerlink" title="(1). 浏览器中安装插件 SwitchyOmega"></a>(1). 浏览器中安装插件 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a></h4><h4 id="2-新建一个-Proxy-Profile"><a href="#2-新建一个-Proxy-Profile" class="headerlink" title="(2). 新建一个 Proxy Profile"></a>(2). 新建一个 Proxy Profile</h4><table><thead><tr><th>Protocol</th><th>Server</th><th>Port</th></tr></thead><tbody><tr><td>Socks5</td><td>localhost</td><td>9999</td></tr></tbody></table><h4 id="3-浏览器右上角的SwitchyOmega点击选择上一步新建的代理，即可上网"><a href="#3-浏览器右上角的SwitchyOmega点击选择上一步新建的代理，即可上网" class="headerlink" title="(3). 浏览器右上角的SwitchyOmega点击选择上一步新建的代理，即可上网"></a>(3). 浏览器右上角的SwitchyOmega点击选择上一步新建的代理，即可上网</h4><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ol><li><a href="https://fanqxu.github.io/2019/03/20/Bypass-campusNet/">https://fanqxu.github.io/2019/03/20/Bypass-campusNet/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> NetWork </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux PAC自动代理</title>
      <link href="/p/44caa7e6.html"/>
      <url>/p/44caa7e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装genpac"><a href="#1-安装genpac" class="headerlink" title="1. 安装genpac"></a>1. 安装genpac</h2><p>如果没有安装pip，先安装pip<br><code>sudo apt-get install python-pip</code><br><code>pip install genpac</code></p><h2 id="2-生成配置文件"><a href="#2-生成配置文件" class="headerlink" title="2. 生成配置文件"></a>2. 生成配置文件</h2><pre><code>mkdir ~/shadowsockscd shadowsocksgenpac --proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; -o autoproxy.pac --gfwlist-url=&quot;https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&quot;</code></pre><ul><li>其中1080表示代理的端口号</li></ul><h2 id="3-配置系统网络Proxy"><a href="#3-配置系统网络Proxy" class="headerlink" title="3. 配置系统网络Proxy"></a>3. 配置系统网络Proxy</h2><h3 id="GUI界面"><a href="#GUI界面" class="headerlink" title="GUI界面"></a>GUI界面</h3><p>打开下列路径<br>[system] settings -&gt; network -&gt; network proxy<br>选择代理方式为automatic, 配置url填写为</p><p><code>file:///PATH_TO_PAC/autoproxy.pac</code></p><ul><li>按照实际情况填写pac文件的路径</li></ul><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ol><li><a href="https://stackoverflow.club/using-pac-in-linux/">https://stackoverflow.club/using-pac-in-linux/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set Raspberry as WiFi Router</title>
      <link href="/p/120afac6.html"/>
      <url>/p/120afac6.html</url>
      
        <content type="html"><![CDATA[<p>将树莓派3B+改成一个wifi无线路由器</p><p>实现以下功能：</p><pre><code>1. WiFi工作在802.11ac模式，433Mbps的Link Speed2. WiFi共享以太网口的网络，IPv4采用NAT3. 外接USB免驱网卡作为LAN口</code></pre><h2 id="1-更新并安装必要软件"><a href="#1-更新并安装必要软件" class="headerlink" title="1. 更新并安装必要软件"></a>1. 更新并安装必要软件</h2><pre><code>sudo apt-get update &amp;&amp; upgradesudo apt-get install hostapd dnsmasq</code></pre><h2 id="2-打开IPv4转发"><a href="#2-打开IPv4转发" class="headerlink" title="2. 打开IPv4转发"></a>2. 打开IPv4转发</h2><pre><code>echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.confsysctl -p</code></pre><h2 id="3-为网卡配置静态IP"><a href="#3-为网卡配置静态IP" class="headerlink" title="3. 为网卡配置静态IP"></a>3. 为网卡配置静态IP</h2><p>需要确保没有使用&#x2F;etc&#x2F;network&#x2F;interface配置网卡</p><h3 id="1-打开-x2F-etc-x2F-dhcpcd-conf"><a href="#1-打开-x2F-etc-x2F-dhcpcd-conf" class="headerlink" title="(1) 打开&#x2F;etc&#x2F;dhcpcd.conf"></a>(1) 打开&#x2F;etc&#x2F;dhcpcd.conf</h3><pre><code>sudo vim /etc/dhcpcd.conf</code></pre><h3 id="2-在文件最后添加以下内容，保存退出"><a href="#2-在文件最后添加以下内容，保存退出" class="headerlink" title="(2) 在文件最后添加以下内容，保存退出"></a>(2) 在文件最后添加以下内容，保存退出</h3><pre><code>interface eth0interface wlan0static ip_address=192.168.3.1/24nohook wpa_supplicantinterface eth1static ip_address=192.168.4.1/24nohook wpa_supplicant</code></pre><h3 id="3-重启dhcpcd服务"><a href="#3-重启dhcpcd服务" class="headerlink" title="(3) 重启dhcpcd服务"></a>(3) 重启dhcpcd服务</h3><pre><code>sudo systemctl restart dhcpcd.service</code></pre><ul><li>eth0自动获取IP地址，wlan0和eth1分别设置为192.168.3.1，192.168.4.1</li></ul><h2 id="4-配置DHCP服务器"><a href="#4-配置DHCP服务器" class="headerlink" title="4. 配置DHCP服务器"></a>4. 配置DHCP服务器</h2><h3 id="1-打开-x2F-etc-x2F-dnsmasq-conf"><a href="#1-打开-x2F-etc-x2F-dnsmasq-conf" class="headerlink" title="(1) 打开&#x2F;etc&#x2F;dnsmasq.conf"></a>(1) 打开&#x2F;etc&#x2F;dnsmasq.conf</h3><pre><code>sudo vim /etc/dnsmasq.conf</code></pre><h3 id="2-在文件最后添加以下内容，保存退出-1"><a href="#2-在文件最后添加以下内容，保存退出-1" class="headerlink" title="(2) 在文件最后添加以下内容，保存退出"></a>(2) 在文件最后添加以下内容，保存退出</h3><pre><code>interface=wlan0dhcp-range=192.168.3.100,192.168.3.200,255.255.255.0,24hinterface=eht1dhcp-range=192.168.4.100,192.168.4.200,255.255.255.0,24h</code></pre><h2 id="5-配置hostapd"><a href="#5-配置hostapd" class="headerlink" title="5. 配置hostapd"></a>5. 配置hostapd</h2><h3 id="1-打开-x2F-etc-x2F-hostapd-x2F-hostapd-conf"><a href="#1-打开-x2F-etc-x2F-hostapd-x2F-hostapd-conf" class="headerlink" title="(1) 打开&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf"></a>(1) 打开&#x2F;etc&#x2F;hostapd&#x2F;hostapd.conf</h3><pre><code>sudo vim /etc/hostapd/hostapd.conf</code></pre><h3 id="2-输入以下内容，保存退出"><a href="#2-输入以下内容，保存退出" class="headerlink" title="(2) 输入以下内容，保存退出"></a>(2) 输入以下内容，保存退出</h3><pre><code>interface=wlan0driver=nl80211hw_mode=aieee80211n=1ieee80211ac=1ieee80211d=1ieee80211h=1require_ht=1require_vht=1wmm_enabled=1country_code=USvht_oper_chwidth=1channel=149vht_oper_centr_freq_seg0_idx=155ht_capab=[HT40-][HT40+][SHORT-GI-40][DSSS_CCK-40]wpa=2wpa_key_mgmt=WPA-PSKrsn_pairwise=CCMPssid=PI_WIFIwpa_passphrase=password</code></pre><ul><li><p>ssid通俗来说就是Wi-Fi的网络名</p></li><li><p>wpa_passphrase就是Wi-Fi的密码</p></li><li><p>ssid和wpa_passphrase可以随意更改，但要注意wpa_passphrase在8字节以上</p></li><li><p>channel一般来说不必改，因为中国可用的频段想要连续80MHz频宽，无论怎么调都没法满足两个AP毫无频段重叠。</p></li><li><p>country_code一定要有且必须是US，曾经试过改成CN无法启动。</p></li></ul><h3 id="3-将配置文件路径写入服务配置文件"><a href="#3-将配置文件路径写入服务配置文件" class="headerlink" title="(3) 将配置文件路径写入服务配置文件"></a>(3) 将配置文件路径写入服务配置文件</h3><pre><code>echo &quot;DAEMON_CONF=\&quot;/etc/hostapd/hostapd.conf\&quot;&quot; &gt;&gt; /etc/default/hostapd</code></pre><h3 id="4-启动hostapd和dnsmasq"><a href="#4-启动hostapd和dnsmasq" class="headerlink" title="(4) 启动hostapd和dnsmasq"></a>(4) 启动hostapd和dnsmasq</h3><pre><code>sudo systemctl start hostapdsudo systemctl start dnsmasq</code></pre><h2 id="6-在iptables中开启IPv4-NAT"><a href="#6-在iptables中开启IPv4-NAT" class="headerlink" title="6. 在iptables中开启IPv4 NAT"></a>6. 在iptables中开启IPv4 NAT</h2><h3 id="1-打开-x2F-etc-x2F-rc-local"><a href="#1-打开-x2F-etc-x2F-rc-local" class="headerlink" title="(1) 打开&#x2F;etc&#x2F;rc.local"></a>(1) 打开&#x2F;etc&#x2F;rc.local</h3><pre><code>sudo vim /etc/rc.local</code></pre><h3 id="2-在Exit-0之前加入下列内容，保存退出"><a href="#2-在Exit-0之前加入下列内容，保存退出" class="headerlink" title="(2) 在Exit 0之前加入下列内容，保存退出"></a>(2) 在<code>Exit 0</code>之前加入下列内容，保存退出</h3><pre><code>iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE  iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT  iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPTiptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPTiptables -A FORWARD -i eth1 -o eth0 -j ACCEPT</code></pre><h3 id="3-执行rc-local脚本"><a href="#3-执行rc-local脚本" class="headerlink" title="(3) 执行rc.local脚本"></a>(3) 执行rc.local脚本</h3><pre><code>sudo /etc/rc.local</code></pre><h2 id="7-关于IPv6"><a href="#7-关于IPv6" class="headerlink" title="7. 关于IPv6"></a>7. 关于IPv6</h2><h3 id="（1）额外需要安装软件"><a href="#（1）额外需要安装软件" class="headerlink" title="（1）额外需要安装软件"></a>（1）额外需要安装软件</h3><pre><code>sudo apt-get install bridge-utils ebtables radvd -y</code></pre><h3 id="2-设置IPv6转发"><a href="#2-设置IPv6转发" class="headerlink" title="(2)设置IPv6转发"></a>(2)设置IPv6转发</h3><p>编辑配置文件&#x2F;etc&#x2F;sysctl.conf，把下面一行的注释去掉</p><p><code>net.ipv6.conf.all.forwarding=1</code></p><h3 id="3-根据实际网口获得的全局唯一IPv6，编写配置文件"><a href="#3-根据实际网口获得的全局唯一IPv6，编写配置文件" class="headerlink" title="(3)根据实际网口获得的全局唯一IPv6，编写配置文件"></a>(3)根据实际网口获得的全局唯一IPv6，编写配置文件</h3><p><code>vim /etc/radvd.conf</code></p><pre><code>interface wlan0&#123;    AdvSendAdvert on;    prefix 2001:da8:7001:251::/64    &#123;        AdvOnLink on;        AdvAutonomous on;        AdvRouterAddr on;    &#125;;&#125;;</code></pre><ul><li><code>2001:da8:7001:251::/64</code>为通过<code>ifconfig</code>获取的<code>Scope:Global</code>对应的IPv6地址</li></ul><h3 id="4-配置开机自启动"><a href="#4-配置开机自启动" class="headerlink" title="(4)配置开机自启动"></a>(4)配置开机自启动</h3><p>编辑<code>/etc/rc.local</code></p><pre><code>iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -o ppp0 -j MASQUERADEservice radvd startebtables -t broute -A BROUTING -p ! ipv6 -j DROP brctl addbr br0ifconfig br0 upbrctl addif br0 eth0brctl addif br0 wlan0</code></pre><ul><li>此处存在一个兼容性问题<a href="https://github.com/netblue30/firejail/issues/2232">ebtables</a>,需要对ebtables进行设置</li></ul><p>在命令行中输入<code>update-alternatives --set ebtables /usr/sbin/ebtables-legacy</code>，主要问题在于新版本的ebtalbes对命令的不兼容，需要切换到老版本程序</p><h3 id="5-WARNING"><a href="#5-WARNING" class="headerlink" title="(5)WARNING!"></a>(5)WARNING!</h3><p>开启IPv6透传后，存在有网络问题，问题原因未知</p><p>现象主要为docker网络全挂（可能因为采用Host的网络设置，可能使用Bridge就好了）</p><h2 id="8-一键安装教程-IPv4-Only"><a href="#8-一键安装教程-IPv4-Only" class="headerlink" title="8. 一键安装教程 IPv4 Only"></a>8. 一键安装教程 IPv4 Only</h2><p>参考<a href="https://gitlab.dashdreams.com/Haoran.Qi/RaspberryPi/-/blob/master/WIFI/pi-setup-wifi.sh">Haoran.Qi&#x2F;RaspberryPi</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英文操作系统中MATLAB中文乱码的解决方法</title>
      <link href="/p/d21ef46d.html"/>
      <url>/p/d21ef46d.html</url>
      
        <content type="html"><![CDATA[<p>英文操作环境下MATLAB编辑器里的中文会显示成乱码</p><p>按照网上的教程更改系统环境配置</p><pre><code>Control Panel,Region,Administrative,Language for non-Unicode Option Set as Chinese(Simplified,China)Control Panel,Region,Formats,Format Option Set as Chinese(Simplified,China).</code></pre><p>这样设置后系统格式变成中文，matlab显示语言也变成中文，但是在plot画图时，还是会显示乱码。</p><p>主要的原因在于字符集不匹配。</p><p>找到MATLAB目录下lcdata.xml文件，当该文件为空时，MATLAB自动调用系统默认字符集。因此，复制MATLAB目录下lcdata_utf8.xml，并重命名为lcdata.xml。将其中的内容用以下代替</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!-- MathWorks Locale Database --&gt;&lt;!-- File Name: lcdata_utf8.xml --&gt;&lt;!-- Copyright 2007-2016 The MathWorks, Inc. --&gt;&lt;lcdata xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;lcdata.xsd&quot;&gt;    &lt;!-- Codeset entry --&gt;    &lt;codeset&gt;        &lt;encoding name=&quot;UTF-8&quot;&gt;            &lt;encoding_alias name=&quot;utf8&quot;/&gt;            &lt;encoding_alias name=&quot;EUC-CN&quot;/&gt;            &lt;encoding_alias name=&quot;euccn&quot;/&gt;            &lt;encoding_alias name=&quot;1252&quot;/&gt;            &lt;encoding_alias name=&quot;ISO8859-15&quot;/&gt;            &lt;encoding_alias name=&quot;ISO885915&quot;/&gt;            &lt;encoding_alias name=&quot;ISO8859-14&quot;/&gt;            &lt;encoding_alias name=&quot;ISO885914&quot;/&gt;            &lt;encoding_alias name=&quot;ISO8859-1&quot;/&gt;            &lt;encoding_alias name=&quot;ISO88591&quot;/&gt;            &lt;encoding_alias name=&quot;936&quot;/&gt;        &lt;/encoding&gt;    &lt;/codeset&gt;    &lt;!-- Locale entries --&gt;        &lt;locale name=&quot;en_US&quot; encoding=&quot;UTF-8&quot; xpg_name=&quot;en_US.UTF-8&quot;&gt;        &lt;alias name=&quot;en&quot;/&gt;    &lt;/locale&gt;    &lt;locale name=&quot;zh_CN&quot; encoding=&quot;UTF-8&quot; xpg_name=&quot;zh_CN.UTF-8&quot;&gt;        &lt;alias name=&quot;zh-Hans&quot;/&gt;        &lt;alias name=&quot;zh-Hans-CN&quot;/&gt;    &lt;/locale&gt;&lt;/lcdata&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronous Files with Onedrive in Windows</title>
      <link href="/p/bd27589.html"/>
      <url>/p/bd27589.html</url>
      
        <content type="html"><![CDATA[<h1 id="windows-系统下利用-onedrive-同步文件夹"><a href="#windows-系统下利用-onedrive-同步文件夹" class="headerlink" title="windows 系统下利用 onedrive 同步文件夹"></a>windows 系统下利用 onedrive 同步文件夹</h1><p>通过软链接的方式，将目标文件软链接到OneDrive</p><h2 id="1-以管理员权限进入CMD-exe"><a href="#1-以管理员权限进入CMD-exe" class="headerlink" title="1. 以管理员权限进入CMD.exe"></a>1. 以管理员权限进入CMD.exe</h2><h2 id="2-然后运行"><a href="#2-然后运行" class="headerlink" title="2. 然后运行"></a>2. 然后运行</h2><pre><code>mklink /d dir_name_in\Onedrive_path dir_name_need_to_sync</code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Onedrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检测代理是否运行正常</title>
      <link href="/p/e5dfc154.html"/>
      <url>/p/e5dfc154.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行中输入以下命令，查看代理是否正常运行"><a href="#命令行中输入以下命令，查看代理是否正常运行" class="headerlink" title="命令行中输入以下命令，查看代理是否正常运行"></a>命令行中输入以下命令，查看代理是否正常运行</h2><pre><code>curl -so /dev/null -w &quot;%&#123;http_code&#125;&quot; google.com -x socks5://127.0.0.1:10080</code></pre><ul><li><code>socks5</code>表示使用的代理协议，可以换成<code>http</code>等其他协议</li><li><code>10080</code>是代理的端口号，对应代理服务的Input端口</li></ul><p>命令返回值为<code>301</code>,<code>200</code>说明代理服务工作正常，返回值为<code>000</code>说明代理长时间无响应，无法工作。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/p/5c98fe12.html"/>
      <url>/p/5c98fe12.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Markdown-标题"><a href="#1-Markdown-标题" class="headerlink" title="1. Markdown 标题"></a>1. Markdown 标题</h2><ul><li><p>使用&#x3D;和-标记一级和二级标题</p></li><li><p>使用#标记，一级标题对应一个#</p></li></ul><h2 id="2-Markdown-段落格式"><a href="#2-Markdown-段落格式" class="headerlink" title="2. Markdown 段落格式"></a>2. Markdown 段落格式</h2><ul><li><p>段落</p><p>  换行需要两个回车</p></li><li><p>字体</p><p>  <em>斜体文本</em> </p><p>  <em>斜体文本</em></p><p>  <strong>粗体文本</strong></p><p>  <strong>粗体文本</strong></p><p>  <em><strong>斜粗体文本</strong></em></p><p>  <em><strong>斜粗体文本</strong></em></p></li><li><p>分割线</p><p>  你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</p><p>  ***</p><p>  -–</p></li><li><p>删除线</p><p>  文字两端加上~~<br>  <del>Google.com</del></p></li><li><p>下划线</p><p>  <u>下划线<u></p></li><li><p>脚注</p><p>  格式：[^需要著名的文字]</p><p>  这是一段需要脚注的文字 [^aa]</p><p>  [^aa]：脚注内容</p></li></ul><h2 id="3-Markdown-列表"><a href="#3-Markdown-列表" class="headerlink" title="3. Markdown 列表"></a>3. Markdown 列表</h2><ul><li><p>无序列表</p><p>  可以用*、+、-作为标记</p><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul><ul><li>第一项</li><li>第二项</li></ul></li><li><p>有序列表</p><p>  使用数字加上.表示</p><ol><li>第一项</li><li>第二项</li></ol></li><li><p>列表嵌套</p><p>  在子列表选项前面增加四个空格</p><ol><li>第一<ul><li>ele1</li><li>ele2</li></ul></li><li>第二<ul><li>ele3</li><li>ele4</li></ul></li></ol></li></ul><h2 id="4-Markdown-区块"><a href="#4-Markdown-区块" class="headerlink" title="4. Markdown 区块"></a>4. Markdown 区块</h2><p>区块引用，在段落开头使用&gt;,后面紧跟空格。</p><p>通过使用多个&gt;，可以实现多层嵌套引用</p><h2 id="5-Markdown-代码"><a href="#5-Markdown-代码" class="headerlink" title="5. Markdown 代码"></a>5. Markdown 代码</h2><ul><li><p>一个代码片段</p><p>  <code>print()</code> 函数</p></li><li><p>代码块</p><p>  使用&#96;&#96;&#96;包裹一段代码，可以指定或者不指定语言</p><pre><code>int main()</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="6-Markdown-链接"><a href="#6-Markdown-链接" class="headerlink" title="6. Markdown 链接"></a>6. Markdown 链接</h2><ul><li><p>[链接名称](链接地址)</p></li><li><p>&lt;链接地址&gt;</p></li><li><p>高级链接</p><ul><li><p>这个链接1作为网址变量<a href="https://www.google.com/">google</a></p></li><li><p>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a></p></li></ul></li></ul><h2 id="7-Markdown-图片"><a href="#7-Markdown-图片" class="headerlink" title="7. Markdown 图片"></a>7. Markdown 图片</h2><p>图片语法格式如下：</p><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></pre><h2 id="8-Markdown-表格"><a href="#8-Markdown-表格" class="headerlink" title="8. Markdown 表格"></a>8. Markdown 表格</h2><p>制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><ul><li>对齐方式<ul><li><p>-: 设置内容和标题栏居右对齐</p></li><li><p>:- 设置内容和标题栏居左对齐</p></li><li><p>:-: 设置内容和标题栏居中对齐</p></li></ul></li></ul><pre><code>| 左对齐 | 右对齐 | 居中对齐|| :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>参考：</p><p><a href="https://www.google.com/">1</a>.<a href="https://www.runoob.com/markdown">RUNOOB.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
